<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Continuous  Delivery</title>
    <link>http://blog.mingguilu.com/tags/git/</link>
    <description>Recent content in Git on Continuous  Delivery</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016 - 2021, MingguiLu; all rights reserved.</copyright>
    <lastBuildDate>Thu, 10 Aug 2017 17:32:57 +0800</lastBuildDate>
    <atom:link href="http://blog.mingguilu.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Windows下的git_clone问题</title>
      <link>http://blog.mingguilu.com/%E7%8B%AE/Windows%E4%B8%8B%E7%9A%84git_clone%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 10 Aug 2017 17:32:57 +0800</pubDate>
      
      <guid>http://blog.mingguilu.com/%E7%8B%AE/Windows%E4%B8%8B%E7%9A%84git_clone%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;近期为了方便学习数据挖掘与数据分析，将系统由Linux Mint换回windows10开发者预览版，并安装了Ubuntu on Windows 10，由于硬盘格式化了，需要从Github上克隆博客代码，却遇到了问题。&lt;/p&gt;

&lt;p&gt;Windows10的分区挂载在Ubuntu on Windows 10的/mnt目录下，ls可以看到Windows的C、D两个分区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mingguilu@DESKTOP-KME2TBI:~$ cd /mnt/
mingguilu@DESKTOP-KME2TBI:/mnt$ ls
c  d
mingguilu@DESKTOP-KME2TBI:/mnt$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;准备将博客代码克隆到D盘下，便于Windows和Ubuntu都能操作，但是克隆时却报错了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mingguilu@DESKTOP-KME2TBI:/mnt/d/helloworld/hugo$ git clone git@github.com:mingguilu/blog_mingguilu_com.git
Cloning into &#39;blog_mingguilu_com&#39;...
remote: Counting objects: 522, done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 522 (delta 0), reused 1 (delta 0), pack-reused 517
Receiving objects: 100% (522/522), 16.24 MiB | 1.36 MiB/s, done.
Resolving deltas: 100% (188/188), done.
Checking connectivity... done.
error: unable to create file content/猿/AutoIT3开发Helpdesk自动化工具之一:简介.md (Invalid argument)
error: unable to create file content/猿/AutoIt3开发Helpdesk自动化工具之三:系统配置.md (Invalid argument)
error: unable to create file content/猿/AutoIt3开发Helpdesk自动化工具之二:常用语法.md (Invalid argument)
error: unable to create file content/猿/AutoIt3开发Helpdesk自动化工具之五:多任务组合.md (Invalid argument)
error: unable to create file content/猿/AutoIt3开发Helpdesk自动化工具之四:软件安装.md (Invalid argument)
fatal: unable to checkout working tree
warning: Clone succeeded, but checkout failed.
You can inspect what was checked out with &#39;git status&#39;
and retry the checkout with &#39;git checkout -f HEAD&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;博客代码克隆成功了，但是content下多篇博文检出失败，为了排除Ubuntu on Windows 10的问题，在windows端Git bash上尝试克隆还是报错了&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;一番折腾问题依旧，只好Google一下才大概明白是怎么回事，部分博文的文件名中含有冒号，之前都是在linux中创建的没有问题，但是Windows不支持文件名中包含特殊符号。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/20715804/git-cant-checkout-a-repo-from-github&#34;&gt;Git can&amp;rsquo;t checkout a repo from github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/26097568/git-pull-error-unable-to-create-file-invalid-argument&#34;&gt;Git pull error: unable to create file (Invalid argument)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在Ubuntu on Windows 10上切换到家目录中，顺利克隆成功&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mingguilu@DESKTOP-KME2TBI:~$ git clone git@github.com:mingguilu/blog_mingguilu_com.git
Cloning into &#39;blog_mingguilu_com&#39;...
remote: Counting objects: 522, done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 522 (delta 0), reused 1 (delta 0), pack-reused 517
Receiving objects: 100% (522/522), 16.24 MiB | 3.31 MiB/s, done.
Resolving deltas: 100% (188/188), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>感谢Hugo，让我遇见Markdown和Git</title>
      <link>http://blog.mingguilu.com/%E6%84%9F/%E6%84%9F%E8%B0%A2Hugo%EF%BC%8C%E8%AE%A9%E6%88%91%E9%81%87%E8%A7%81Markdown%E5%92%8CGit/</link>
      <pubDate>Sat, 14 Jan 2017 20:33:09 +0800</pubDate>
      
      <guid>http://blog.mingguilu.com/%E6%84%9F/%E6%84%9F%E8%B0%A2Hugo%EF%BC%8C%E8%AE%A9%E6%88%91%E9%81%87%E8%A7%81Markdown%E5%92%8CGit/</guid>
      <description>&lt;p&gt;去年7月在机缘巧合之下接触了静态博客的概念，深入了解了一些知识之后，特别欣喜，决定动手搭建一个自己的静态博客。时间一晃到了年底，当着手实现的时候发现并不简单&lt;/p&gt;

&lt;p&gt;首先是选择哪一款生成器，在知乎上研究一番后，最终在Jekyll、Hexo和Hugo中，选择了Hugo，因为简单、生成速度快，在&lt;a href=&#34;https://staticsitegenerators.net/&#34;&gt;静态博客生成器排名榜&lt;/a&gt;上发展势头好，接着在《&lt;a href=&#34;http://www.gohugo.org&#34;&gt;Hugo中文文档&lt;/a&gt;》学习如何安装使用它，利用自己有限的网页知识在Hugo作者个人博客&lt;a href=&#34;http://sfp13.com&#34;&gt;spf13.com&lt;/a&gt;的源码基础上定制了自己的博客前端&lt;/p&gt;

&lt;p&gt;然后编写文档需要学习一门新的文本标记语言Markdown，所幸Markdown语法相对容易，常用的也不多，看完Te_Lee 分享的《&lt;a href=&#34;http://sspai.com/25137/&#34;&gt;认识与入门 Markdown&lt;/a&gt;》和《&lt;a href=&#34;http://www.jianshu.com/p/1e402922ee32/&#34;&gt;Markdown——入门指南&lt;/a&gt;》，就可以入门了&lt;/p&gt;

&lt;p&gt;最后为了将Hugo发布到Github Pages的个人主页上，必须得学习Git。我并非一名程序，虽然之前使用过svn和github，但并不了解这个强大并让我之后受益匪浅的Git。花了大概一周的时间潜心学习了廖学锋老师的&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&#34;&gt;《Git教程》&lt;/a&gt;和贺永康老师的&lt;a href=&#34;http://edu.51cto.com/course/course_id-1838.html&#34;&gt;《深入理解Git》
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;经过1个月的折腾，终于把博客上线了。然而，收获不仅是有了这个博客，还促使自己学习了Markdown和Git，更重要的是，Git的版本控制思想让我受益匪浅！&lt;/p&gt;

&lt;p&gt;为了记录博客搭建的过程，除了写文档，还用git版本记录代码改动，经过实践发现很多问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前端代码经常改了又改，有时仅仅1处字体px大小；有时修改bug到一半不得要领，先去解决另外一个，这样导致频繁的&lt;code&gt;git commit&lt;/code&gt;，且一个&lt;code&gt;commit&lt;/code&gt;掺和多处修改&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;因为频繁的&lt;code&gt;git commit&lt;/code&gt;，&lt;code&gt;commit message&lt;/code&gt;每次随性而写，回头&lt;code&gt;git log&lt;/code&gt;一看全是一句话概括，具体改了什么自己也看不懂了&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/gan_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当写文档时，前一篇没写完搁置了，接着完成了另外一篇，这时commit并push就很尴尬了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有时候不得不感慨，真是想什么来什么！这段时间&lt;a href=&#34;http://weibo.com/jobbole&#34;&gt;伯乐在线官方微博&lt;/a&gt;刚好推荐了两篇git干货，&lt;a href=&#34;http://blog.jobbole.com/109197/&#34;&gt;《Git 最佳实践：commit msg》&lt;/a&gt;和&lt;a href=&#34;http://blog.jobbole.com/109466/&#34;&gt;《Git 最佳实践：分支管理》&lt;/a&gt;。虽然自己没法全部理解两篇文章的内容，但依然指导我做些改变&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;多使用git分支，在新分支里开始一篇文档，在新分支里修改前端的代码，当文档完成可以发表，或代码修改完测试没有问题，再将新分支合并到&lt;code&gt;marst&lt;/code&gt;分支，并&lt;code&gt;push&lt;/code&gt;到github的远程仓库里&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;基于以上的分支，&lt;code&gt;commit&lt;/code&gt;即可灵活很多，坚持一次&lt;code&gt;commit&lt;/code&gt;只完成一个任务，并确保每次&lt;code&gt;commit&lt;/code&gt;的正确性。因为“每次提交的代码都可能产生一个可发布的版本，坚持这个实践，那么软件会一直处于&lt;strong&gt;可用状态&lt;/strong&gt; —— 《持续交付》”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在&lt;a href=&#34;http://blog.jobbole.com/109197/&#34;&gt;《Git 最佳实践：commit msg》&lt;/a&gt;关于&lt;code&gt;commit message&lt;/code&gt;规范的指导下，重新创建了版本库，并在写message时尝试写简单易懂的标题和详尽明了的内容&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/gan_02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;近期刚好在看一本关于Devops的书《持续交付 - 发布可靠软件的系统方法》，本书前2章着重讲述了使用版本控制对构建软件可重复且可靠的自动化发布的重要意义。而这次git的实践，有助于理解书中的内容，最终使用“Continuous Delivery”作为博客标题也是因为这本书。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git-everything-is-local</title>
      <link>http://blog.mingguilu.com/%E7%8C%BF/git-everything-is-local/</link>
      <pubDate>Thu, 08 Dec 2016 08:48:05 +0800</pubDate>
      
      <guid>http://blog.mingguilu.com/%E7%8C%BF/git-everything-is-local/</guid>
      <description>

&lt;h3 id=&#34;1-安装git:0a315d94de8b55214793afe9517d8fb5&#34;&gt;1. 安装git&lt;/h3&gt;

&lt;h4 id=&#34;windows:0a315d94de8b55214793afe9517d8fb5&#34;&gt;windows&lt;/h4&gt;

&lt;p&gt;下载并安装&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git for Windows&lt;/a&gt;，默认选项安装到Ajusting your PATH environment时，勾选第二项Run Git from Windows Command Prompt，即可在windows命令行使用git命令，不过Git Bash用户体验更好&lt;/p&gt;

&lt;h4 id=&#34;ubnutu:0a315d94de8b55214793afe9517d8fb5&#34;&gt;ubnutu&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-全局配置git:0a315d94de8b55214793afe9517d8fb5&#34;&gt;2. 全局配置git&lt;/h3&gt;

&lt;p&gt;命令行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.name [your-name]
git config --global user.email [your-email-address]
git config --global color.ui true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim ~/.gitconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看全局配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --list
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-创建repository-repo:0a315d94de8b55214793afe9517d8fb5&#34;&gt;3. 创建repository/repo&lt;/h3&gt;

&lt;p&gt;创建本地git repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;克隆线上的项目&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/[github-account]/[project-name].git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-添加及提交文件:0a315d94de8b55214793afe9517d8fb5&#34;&gt;4. 添加及提交文件&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/git_3_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;添加文件到staying area&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提交改动到git repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m [&amp;quot;commit-description&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接从working directory提交到git repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -am [&amp;quot;commit-description&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-查看git状态:0a315d94de8b55214793afe9517d8fb5&#34;&gt;5. 查看git状态&lt;/h3&gt;

&lt;p&gt;查看git状态&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看git状态标志&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;标志的说明&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A: 你本地新增的文件（服务器上没有）

C: 文件的一个新拷贝

D: 你本地删除的文件（服务器上还在）

M: 文件的内容或者mode被修改了

R: 文件名被修改了

T: 文件的类型被修改了

U: 文件没有被合并(你需要完成合并才能进行提交)

X: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;忽略~结尾的文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;*~&amp;quot; &amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-查看文件区别:0a315d94de8b55214793afe9517d8fb5&#34;&gt;6. 查看文件区别&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/git_6_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;查看working directory 和 staying area 之间的区别&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看staying area 和 git repository 之间的区别&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff --staged
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看history 和 working directory 之间的区别&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&amp;ndash;stat参数查看简短信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff --stat [--staged|HEAD]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-撤销误操作:0a315d94de8b55214793afe9517d8fb5&#34;&gt;7. 撤销误操作&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/git_7_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从git repository 撤销到staying area&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从staying area撤销到working directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从git repository 撤销到working directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout HEAD [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;8-移除及重命名文件:0a315d94de8b55214793afe9517d8fb5&#34;&gt;8. 移除及重命名文件&lt;/h3&gt;

&lt;p&gt;删除git文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除git文件，但保留源文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm --cached [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重命名git文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mv [file-name] [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;9-暂存工作区:0a315d94de8b55214793afe9517d8fb5&#34;&gt;9. 暂存工作区&lt;/h3&gt;

&lt;p&gt;放入暂存区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看暂存区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;恢复暂存区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;10-图解commit对象:0a315d94de8b55214793afe9517d8fb5&#34;&gt;10. 图解commit对象&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/git_10_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;查看commit记录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log --pretty=oneline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log --oneline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reflog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看commit对象类型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git cat-file -t [HEAD|short-Hash]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;commit对象类型说明&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tree 目录结构
blob 一个二进制文件
commit  一次提交的信息（包含tree、parent、author、committer信息）
tag 标签（commit的别名）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看commit对象详细信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git cat-file -p [HEAD|short-Hash]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;11-理解tree-ish表达式:0a315d94de8b55214793afe9517d8fb5&#34;&gt;11. 理解tree-ish表达式&lt;/h3&gt;

&lt;p&gt;查看commit对象指向的HASH值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rev-parse [HEAD|HEAD~|HEAD~2|master~3|master~4|...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看指定commit的tree的HASH值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rev-parse HEAD~4^{tree}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看指定commit的blob的HASH值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rev-parse HEAD~6:[file-path]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;12-创建及删除分支:0a315d94de8b55214793afe9517d8fb5&#34;&gt;12. 创建及删除分支&lt;/h3&gt;

&lt;p&gt;分支文件路径&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/.git/refs/heads/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看所有分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch [branch-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;切换分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout [branch-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建并切换分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b [branch-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch -d [branch-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;合并分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git merge [branch-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;13-配置github远程仓库:0a315d94de8b55214793afe9517d8fb5&#34;&gt;13. 配置Github远程仓库&lt;/h3&gt;

&lt;p&gt;创建SSH Key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;youremail@example.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一路回车使用默认值，完成之后在用户主目录中打开 &lt;code&gt;.ssh&lt;/code&gt;目录，可以看到&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id_rsa      私钥，不能泄露出去
id_rsa.pub  公钥，可告诉任何人
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;登录Github，依次点击&amp;rdquo;settings&amp;rdquo;——&amp;gt;&amp;ldquo;SSH and GPG keys&amp;rdquo;——&amp;gt;&amp;ldquo;New SSH Key&amp;rdquo;
&lt;img src=&#34;http://blog.mingguilu.com/media/git_13_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;填写Title，在Key文本框里粘贴&lt;code&gt;id_rsa.pub&lt;/code&gt;文件的内容，点击&amp;rdquo;Add SSH Key&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;14-同步远程github仓库:0a315d94de8b55214793afe9517d8fb5&#34;&gt;14. 同步远程Github仓库&lt;/h3&gt;

&lt;p&gt;关联本地仓库与远程仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin git@github.com:[github-account]/[repo-name].git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一次把本地库master分支推送到远程库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后本地做了提交，即可推送到远程库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;15-从github远程库克隆:0a315d94de8b55214793afe9517d8fb5&#34;&gt;15. 从Github远程库克隆&lt;/h3&gt;

&lt;p&gt;创建Github Repositories远程库
&lt;img src=&#34;http://blog.mingguilu.com/media/git_15_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;把远程库克隆到本地&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:[github-account]/[repo-name].git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/[github-account]/[repo-name].git
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>