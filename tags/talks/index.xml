<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Talks on Continuous  Delivery</title>
    <link>http://blog.mingguilu.com/tags/talks/</link>
    <description>Recent content in Talks on Continuous  Delivery</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016 - 2021, MingguiLu; all rights reserved.</copyright>
    <lastBuildDate>Sat, 14 Jan 2017 20:33:09 +0800</lastBuildDate>
    <atom:link href="http://blog.mingguilu.com/tags/talks/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>感谢Hugo，让我遇见Markdown和Git</title>
      <link>http://blog.mingguilu.com/%E6%84%9F/%E6%84%9F%E8%B0%A2Hugo%EF%BC%8C%E8%AE%A9%E6%88%91%E9%81%87%E8%A7%81Markdown%E5%92%8CGit/</link>
      <pubDate>Sat, 14 Jan 2017 20:33:09 +0800</pubDate>
      
      <guid>http://blog.mingguilu.com/%E6%84%9F/%E6%84%9F%E8%B0%A2Hugo%EF%BC%8C%E8%AE%A9%E6%88%91%E9%81%87%E8%A7%81Markdown%E5%92%8CGit/</guid>
      <description>&lt;p&gt;去年7月在机缘巧合之下接触了静态博客的概念，深入了解了一些知识之后，特别欣喜，决定动手搭建一个自己的静态博客。时间一晃到了年底，当着手实现的时候发现并不简单&lt;/p&gt;

&lt;p&gt;首先是选择哪一款生成器，在知乎上研究一番后，最终在Jekyll、Hexo和Hugo中，选择了Hugo，因为简单、生成速度快，在&lt;a href=&#34;https://staticsitegenerators.net/&#34;&gt;静态博客生成器排名榜&lt;/a&gt;上发展势头好，接着在《&lt;a href=&#34;http://www.gohugo.org&#34;&gt;Hugo中文文档&lt;/a&gt;》学习如何安装使用它，利用自己有限的网页知识在Hugo作者个人博客&lt;a href=&#34;http://sfp13.com&#34;&gt;spf13.com&lt;/a&gt;的源码基础上定制了自己的博客前端&lt;/p&gt;

&lt;p&gt;然后编写文档需要学习一门新的文本标记语言Markdown，所幸Markdown语法相对容易，常用的也不多，看完Te_Lee 分享的《&lt;a href=&#34;http://sspai.com/25137/&#34;&gt;认识与入门 Markdown&lt;/a&gt;》和《&lt;a href=&#34;http://www.jianshu.com/p/1e402922ee32/&#34;&gt;Markdown——入门指南&lt;/a&gt;》，就可以入门了&lt;/p&gt;

&lt;p&gt;最后为了将Hugo发布到Github Pages的个人主页上，必须得学习Git。我并非一名程序，虽然之前使用过svn和github，但并不了解这个强大并让我之后受益匪浅的Git。花了大概一周的时间潜心学习了廖学锋老师的&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&#34;&gt;《Git教程》&lt;/a&gt;和贺永康老师的&lt;a href=&#34;http://edu.51cto.com/course/course_id-1838.html&#34;&gt;《深入理解Git》
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;经过1个月的折腾，终于把博客上线了。然而，收获不仅是有了这个博客，还促使自己学习了Markdown和Git，更重要的是，Git的版本控制思想让我受益匪浅！&lt;/p&gt;

&lt;p&gt;为了记录博客搭建的过程，除了写文档，还用git版本记录代码改动，经过实践发现很多问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前端代码经常改了又改，有时仅仅1处字体px大小；有时修改bug到一半不得要领，先去解决另外一个，这样导致频繁的&lt;code&gt;git commit&lt;/code&gt;，且一个&lt;code&gt;commit&lt;/code&gt;掺和多处修改&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;因为频繁的&lt;code&gt;git commit&lt;/code&gt;，&lt;code&gt;commit message&lt;/code&gt;每次随性而写，回头&lt;code&gt;git log&lt;/code&gt;一看全是一句话概括，具体改了什么自己也看不懂了&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/gan_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当写文档时，前一篇没写完搁置了，接着完成了另外一篇，这时commit并push就很尴尬了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有时候不得不感慨，真是想什么来什么！这段时间&lt;a href=&#34;http://weibo.com/jobbole&#34;&gt;伯乐在线官方微博&lt;/a&gt;刚好推荐了两篇git干货，&lt;a href=&#34;http://blog.jobbole.com/109197/&#34;&gt;《Git 最佳实践：commit msg》&lt;/a&gt;和&lt;a href=&#34;http://blog.jobbole.com/109466/&#34;&gt;《Git 最佳实践：分支管理》&lt;/a&gt;。虽然自己没法全部理解两篇文章的内容，但依然指导我做些改变&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;多使用git分支，在新分支里开始一篇文档，在新分支里修改前端的代码，当文档完成可以发表，或代码修改完测试没有问题，再将新分支合并到&lt;code&gt;marst&lt;/code&gt;分支，并&lt;code&gt;push&lt;/code&gt;到github的远程仓库里&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;基于以上的分支，&lt;code&gt;commit&lt;/code&gt;即可灵活很多，坚持一次&lt;code&gt;commit&lt;/code&gt;只完成一个任务，并确保每次&lt;code&gt;commit&lt;/code&gt;的正确性。因为“每次提交的代码都可能产生一个可发布的版本，坚持这个实践，那么软件会一直处于&lt;strong&gt;可用状态&lt;/strong&gt; —— 《持续交付》”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在&lt;a href=&#34;http://blog.jobbole.com/109197/&#34;&gt;《Git 最佳实践：commit msg》&lt;/a&gt;关于&lt;code&gt;commit message&lt;/code&gt;规范的指导下，重新创建了版本库，并在写message时尝试写简单易懂的标题和详尽明了的内容&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/gan_02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;近期刚好在看一本关于Devops的书《持续交付 - 发布可靠软件的系统方法》，本书前2章着重讲述了使用版本控制对构建软件可重复且可靠的自动化发布的重要意义。而这次git的实践，有助于理解书中的内容，最终使用“Continuous Delivery”作为博客标题也是因为这本书。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>