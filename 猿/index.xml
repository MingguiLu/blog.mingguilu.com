<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>猿s on Continuous  Delivery</title>
    <link>http://blog.mingguilu.com/%E7%8C%BF/</link>
    <description>Recent content in 猿s on Continuous  Delivery</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016 - 2021, MingguiLu; all rights reserved.</copyright>
    <lastBuildDate>Thu, 16 Mar 2017 15:51:48 +0800</lastBuildDate>
    <atom:link href="http://blog.mingguilu.com/%E7%8C%BF/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ubuntu16.04安装matplotlib</title>
      <link>http://blog.mingguilu.com/%E7%8C%BF/Ubuntu16.04%E5%AE%89%E8%A3%85matplotlib/</link>
      <pubDate>Thu, 16 Mar 2017 15:51:48 +0800</pubDate>
      
      <guid>http://blog.mingguilu.com/%E7%8C%BF/Ubuntu16.04%E5%AE%89%E8%A3%85matplotlib/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://matplotlib.org/&#34;&gt;Matplotlib&lt;/a&gt;&lt;/strong&gt;是一个 Python 的 2D绘图库，它以各种硬拷贝格式和跨平台的交互式环境生成出版质量级别的图形。通过 Matplotlib，开发者可以仅需要几行代码，便可以生成绘图，直方图，功率谱，条形图，错误图，散点图等&lt;/p&gt;

&lt;h3 id=&#34;在ubuntu16-04安装matplotlib:abd45e074f4023e340842637fe30886f&#34;&gt;在Ubuntu16.04安装Matplotlib&lt;/h3&gt;

&lt;h4 id=&#34;1-如果使用ubuntu16-04系统自带python3版本:abd45e074f4023e340842637fe30886f&#34;&gt;1. 如果使用Ubuntu16.04系统自带Python3版本：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ pytho3 --version
Python 3.5.1+

$ sudo apt install python3-matplotlib
正在读取软件包列表.. . 完成
正在分析软件包的依赖关系树       
正在读取状态信息... 完成       
将会同时安装下列软件：
  binutils blt cpp-5 fonts-lyx g++-5 gcc-5 gcc-5-base javascript-common libasan2 libatomic1 libblas-common libblas3 libcc1-0 libcilkrts5 libgcc-5-dev libgfortran3
  libgomp1 libitm1 libjs-jquery libjs-jquery-ui liblapack3 liblsan0 libmpx0 libquadmath0 libstdc++-5-dev libstdc++6 libtsan0 libubsan0 python-matplotlib-data
  python3-cycler python3-dateutil python3-numpy python3-tk python3-tz tk8.6-blt2.5 ttf-bitstream-vera
建议安装：
  binutils-doc blt-demo gcc-5-locales g++-5-multilib gcc-5-doc libstdc++6-5-dbg gcc-5-multilib libgcc1-dbg libgomp1-dbg libitm1-dbg libatomic1-dbg libasan2-dbg
  liblsan0-dbg libtsan0-dbg libubsan0-dbg libcilkrts5-dbg libmpx0-dbg libquadmath0-dbg apache2 | lighttpd | httpd libjs-jquery-ui-docs libstdc++-5-doc dvipng ffmpeg
  inkscape ipython3 python-matplotlib-doc python3-cairocffi python3-gobject python3-nose python3-pyqt4 python3-scipy python3-sip python3-tornado texlive-extra-utils
  texlive-latex-extra ttf-staypuft gfortran python-numpy-doc python3-dev python3-numpy-dbg tix python3-tk-dbg
下列【新】软件包将被安装：
  blt fonts-lyx javascript-common libblas-common libblas3 libgfortran3 libjs-jquery libjs-jquery-ui liblapack3 python-matplotlib-data python3-cycler python3-dateutil
  python3-matplotlib python3-numpy python3-tk python3-tz tk8.6-blt2.5 ttf-bitstream-vera
下列软件包将被升级：
  binutils cpp-5 g++-5 gcc-5 gcc-5-base libasan2 libatomic1 libcc1-0 libcilkrts5 libgcc-5-dev libgomp1 libitm1 liblsan0 libmpx0 libquadmath0 libstdc++-5-dev
  libstdc++6 libtsan0 libubsan0
升级了 19 个软件包，新安装了 18 个软件包，要卸载 0 个软件包，有 480 个软件包未被升级。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-如果使用python2-7:abd45e074f4023e340842637fe30886f&#34;&gt;2. 如果使用Python2.7&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ python --version
$ Python 2.7.11+

sudo apt install python-matplotlib
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-如果安装了较新的python版本-就必须安装matplotlib依赖的一些库:abd45e074f4023e340842637fe30886f&#34;&gt;3. 如果安装了较新的python版本，就必须安装matplotlib依赖的一些库：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ python3 --version
Python 3.5.2

$ sudo apt install python3.5-dev python3.5-tk tk-dev
$ sudo apt install libfreetype6-dev g++

$ pip install --user matplotlib
# 安装包时可能需要使用pip3，而不是pip。另外，如果这个命令不管用，可能需要删除标志`--user`   

Collecting matplotlib
  Downloading matplotlib-2.0.0-1-cp27-cp27mu-manylinux1_x86_64.whl (14.6MB)
    100% |████████████████████████████████| 14.6MB 58kB/s 
Collecting numpy&amp;gt;=1.7.1 (from matplotlib)
  Downloading numpy-1.12.0-cp27-cp27mu-manylinux1_x86_64.whl (16.5MB)
    100% |████████████████████████████████| 16.5MB 70kB/s 
Collecting cycler&amp;gt;=0.10 (from matplotlib)
  Downloading cycler-0.10.0-py2.py3-none-any.whl
Collecting python-dateutil (from matplotlib)
  Downloading python_dateutil-2.6.0-py2.py3-none-any.whl (194kB)
    100% |████████████████████████████████| 194kB 135kB/s 
Collecting functools32 (from matplotlib)
  Downloading functools32-3.2.3-2.zip
Requirement already satisfied: six&amp;gt;=1.10 in ./.local/lib/python2.7/site-packages (from matplotlib)
Collecting pytz (from matplotlib)
  Downloading pytz-2016.10-py2.py3-none-any.whl (483kB)
    100% |████████████████████████████████| 491kB 252kB/s 
Requirement already satisfied: pyparsing!=2.0.0,!=2.0.4,!=2.1.2,!=2.1.6,&amp;gt;=1.5.6 in ./.local/lib/python2.7/site-packages (from matplotlib)
Collecting subprocess32 (from matplotlib)
  Downloading subprocess32-3.2.7.tar.gz (54kB)
    100% |████████████████████████████████| 61kB 477kB/s 
Building wheels for collected packages: functools32, subprocess32
  Running setup.py bdist_wheel for functools32 ... done
  Stored in directory: /home/imkind/.cache/pip/wheels/3c/d0/09/cd78d0ff4d6cfecfbd730782a7815a4571cd2cd4d2ed6e69d9
  Running setup.py bdist_wheel for subprocess32 ... done
  Stored in directory: /home/imkind/.cache/pip/wheels/7d/4c/a4/ce9ceb463dae01f4b95e670abd9afc8d65a45f38012f8030cc
Successfully built functools32 subprocess32
Installing collected packages: numpy, cycler, python-dateutil, functools32, pytz, subprocess32, matplotlib
Successfully installed cycler-0.10.0 functools32-3.2.3.post2 matplotlib-2.0.0 numpy-1.12.0 python-dateutil-2.6.0 pytz-2016.10 subprocess32-3.2.7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;测试matplotlib:abd45e074f4023e340842637fe30886f&#34;&gt;测试matplotlib&lt;/h3&gt;

&lt;p&gt;在python中导入matplotlib，如果没有出现任何错误消息，说明matplotlib安装成功&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python3
Python 3.5.2 (default, Nov 17 2016, 17:05:23) 
[GCC 5.4.0 20160609] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; import matplotlib
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;*参考文档*

* 《Python编程从入门到实践》-- 数据可视化 15.1 安装matplotlib --p285-287
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python3从文件中读取数据</title>
      <link>http://blog.mingguilu.com/%E7%8C%BF/Python3%E4%BB%8E%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Sun, 12 Mar 2017 13:06:28 +0800</pubDate>
      
      <guid>http://blog.mingguilu.com/%E7%8C%BF/Python3%E4%BB%8E%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE/</guid>
      <description>

&lt;p&gt;Python3有三种从文件中读取数据的方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;read()　读取整个文件内容；占用内存多&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;readline()　每次读取并返回一行数据；读取速度慢，每次占用内存少&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;readlines()　读取每一行数据，并作为元素存储在一个列表中&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我将圆周率π的部分数值拆分为三行存储在文件&lt;code&gt;pi_digits.txt&lt;/code&gt;中，然后使用python读取文件并拼接为完整的&lt;code&gt;π&lt;/code&gt;：3.141592653589793238462643383279，注意得到结果是字符串，并不是数字&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;.read()&lt;/code&gt;读取文件&lt;code&gt;pi_digits.txt&lt;/code&gt;的全部内容&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;with open(&#39;pi_digits.txt&#39;) as file_object:
    &#39;&#39;&#39;打开文件&#39;&#39;&#39;
    print(file_object.read())
    &#39;&#39;&#39;打印文件内容&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3.1415926535
  8979323846
  2643383279
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;方法一-read:70c1948403385fde2f5c586d29c1840f&#34;&gt;方法一：.read()&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;with open(&#39;pi_digits.txt&#39;) as file_object:
    &#39;&#39;&#39;打开文件&#39;&#39;&#39;
    pi = file_object.read()
    &#39;&#39;&#39;读取文件内容并赋给变量content&#39;&#39;&#39;
    print(pi.replace(&amp;quot;\n&amp;quot;,&amp;quot;&amp;quot;).replace(&amp;quot; &amp;quot;,&amp;quot;&amp;quot;))
    &#39;&#39;&#39;使用.replace()将每行末尾的换行符和空格，替换为空，打印拼接完成的π&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;方法二-逐行读取:70c1948403385fde2f5c586d29c1840f&#34;&gt;方法二：逐行读取&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;with open(&#39;pi_digits.txt&#39;) as file_object:
    &#39;&#39;&#39;打开文件&#39;&#39;&#39;
    pi = &#39;&#39;
    &#39;&#39;&#39;初始化变量pi&#39;&#39;&#39;
    for line in file_object:
        &#39;&#39;&#39;逐行读取文件的每一行内容&#39;&#39;&#39;
        pi += line.strip()
        &#39;&#39;&#39;剔除元素首尾的空字符后做字符串拼接，并赋给pi&#39;&#39;&#39;
        # pi += &amp;quot;&amp;quot;.join(line.strip())
    print(pi)
    &#39;&#39;&#39;打印拼接完成的π&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;方法三-readline:70c1948403385fde2f5c586d29c1840f&#34;&gt;方法三：.readline()&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;with open(&#39;pi_digits.txt&#39;) as file_object:
    &#39;&#39;&#39;打开文件&#39;&#39;&#39;
    pi = &#39;&#39;
    &#39;&#39;&#39;初始化变量pi&#39;&#39;&#39;
    while True:
        &#39;&#39;&#39;???&#39;&#39;&#39;
        line = file_object.readline()
        &#39;&#39;&#39;读取一行内容赋给变量line&#39;&#39;&#39;
        if line:
            &#39;&#39;&#39;如果读取到一行数据&#39;&#39;&#39;
            #print(line)
            pi += line.strip()
            &#39;&#39;&#39;剔除这行数据两端的空字符之后拼接并赋给pi&#39;&#39;&#39;
        else:
            &#39;&#39;&#39;如果读取内容为空&#39;&#39;&#39;
            break
            &#39;&#39;&#39;退出循环&#39;&#39;&#39;
     print(pi)
     &#39;&#39;&#39;打印拼接完成的π&#39;&#39;&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;方法四-readlines:70c1948403385fde2f5c586d29c1840f&#34;&gt;方法四：.readlines()&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;with open(&#39;pi_digits.txt&#39;) as file_object:
    &#39;&#39;&#39;打开文件&#39;&#39;&#39;
    lines = file_object.readlines()
    &#39;&#39;&#39;读取文件的每行作为元素存入列表&#39;&#39;&#39;
    print(lines)
    &#39;&#39;&#39;打印列表&#39;&#39;&#39;
    pi = &#39;&#39;
    &#39;&#39;&#39;初始化变量pi&#39;&#39;&#39;
    for line in lines:
        &#39;&#39;&#39;遍历列表的元素&#39;&#39;&#39;
        pi += line.strip()
        &#39;&#39;&#39;剔除元素首尾的空字符后做字符串拼接，并赋给pi&#39;&#39;&#39;
    print(pi)
    &#39;&#39;&#39;打印拼接完成的π&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;方法五-read-split:70c1948403385fde2f5c586d29c1840f&#34;&gt;方法五：.read().split()&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;with open(&#39;pi_digits.txt&#39;) as file_object:
    &#39;&#39;&#39;打开文件&#39;&#39;&#39;
    lines = file_object.read().split()
    &#39;&#39;&#39;将文件分割为字符串列表，相对于.readlines(),这种方法在分割内容时，就剔除了空字符&#39;&#39;&#39;
    print(lines)
    &#39;&#39;&#39;打印列表&#39;&#39;&#39;
    pi = &#39;&#39;
    &#39;&#39;&#39;初始化变量pi，用于表示完整的π&#39;&#39;&#39;
    for line in lines:
        &#39;&#39;&#39;遍历列表的元素&#39;&#39;&#39;
        pi += line
        &#39;&#39;&#39;将每个元素做字符串拼接，并赋给pi&#39;&#39;&#39;
    print(pi)
    &#39;&#39;&#39;打印拼接完成的π&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Git-everything-is-local</title>
      <link>http://blog.mingguilu.com/%E7%8C%BF/git-everything-is-local/</link>
      <pubDate>Thu, 08 Dec 2016 08:48:05 +0800</pubDate>
      
      <guid>http://blog.mingguilu.com/%E7%8C%BF/git-everything-is-local/</guid>
      <description>

&lt;h3 id=&#34;1-安装git:0a315d94de8b55214793afe9517d8fb5&#34;&gt;1. 安装git&lt;/h3&gt;

&lt;h4 id=&#34;windows:0a315d94de8b55214793afe9517d8fb5&#34;&gt;windows&lt;/h4&gt;

&lt;p&gt;下载并安装&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git for Windows&lt;/a&gt;，默认选项安装到Ajusting your PATH environment时，勾选第二项Run Git from Windows Command Prompt，即可在windows命令行使用git命令，不过Git Bash用户体验更好&lt;/p&gt;

&lt;h4 id=&#34;ubnutu:0a315d94de8b55214793afe9517d8fb5&#34;&gt;ubnutu&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-全局配置git:0a315d94de8b55214793afe9517d8fb5&#34;&gt;2. 全局配置git&lt;/h3&gt;

&lt;p&gt;命令行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.name [your-name]
git config --global user.email [your-email-address]
git config --global color.ui true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim ~/.gitconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看全局配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --list
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-创建repository-repo:0a315d94de8b55214793afe9517d8fb5&#34;&gt;3. 创建repository/repo&lt;/h3&gt;

&lt;p&gt;创建本地git repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;克隆线上的项目&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/[github-account]/[project-name].git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-添加及提交文件:0a315d94de8b55214793afe9517d8fb5&#34;&gt;4. 添加及提交文件&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/git_3_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;添加文件到staying area&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提交改动到git repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m [&amp;quot;commit-description&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接从working directory提交到git repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -am [&amp;quot;commit-description&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-查看git状态:0a315d94de8b55214793afe9517d8fb5&#34;&gt;5. 查看git状态&lt;/h3&gt;

&lt;p&gt;查看git状态&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看git状态标志&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;标志的说明&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A: 你本地新增的文件（服务器上没有）

C: 文件的一个新拷贝

D: 你本地删除的文件（服务器上还在）

M: 文件的内容或者mode被修改了

R: 文件名被修改了

T: 文件的类型被修改了

U: 文件没有被合并(你需要完成合并才能进行提交)

X: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;忽略~结尾的文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;*~&amp;quot; &amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-查看文件区别:0a315d94de8b55214793afe9517d8fb5&#34;&gt;6. 查看文件区别&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/git_6_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;查看working directory 和 staying area 之间的区别&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看staying area 和 git repository 之间的区别&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff --staged
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看history 和 working directory 之间的区别&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&amp;ndash;stat参数查看简短信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff --stat [--staged|HEAD]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-撤销误操作:0a315d94de8b55214793afe9517d8fb5&#34;&gt;7. 撤销误操作&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/git_7_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从git repository 撤销到staying area&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从staying area撤销到working directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从git repository 撤销到working directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout HEAD [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;8-移除及重命名文件:0a315d94de8b55214793afe9517d8fb5&#34;&gt;8. 移除及重命名文件&lt;/h3&gt;

&lt;p&gt;删除git文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除git文件，但保留源文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm --cached [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重命名git文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mv [file-name] [file-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;9-暂存工作区:0a315d94de8b55214793afe9517d8fb5&#34;&gt;9. 暂存工作区&lt;/h3&gt;

&lt;p&gt;放入暂存区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看暂存区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;恢复暂存区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;10-图解commit对象:0a315d94de8b55214793afe9517d8fb5&#34;&gt;10. 图解commit对象&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.mingguilu.com/media/git_10_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;查看commit记录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log --pretty=oneline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log --oneline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reflog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看commit对象类型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git cat-file -t [HEAD|short-Hash]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;commit对象类型说明&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tree 目录结构
blob 一个二进制文件
commit  一次提交的信息（包含tree、parent、author、committer信息）
tag 标签（commit的别名）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看commit对象详细信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git cat-file -p [HEAD|short-Hash]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;11-理解tree-ish表达式:0a315d94de8b55214793afe9517d8fb5&#34;&gt;11. 理解tree-ish表达式&lt;/h3&gt;

&lt;p&gt;查看commit对象指向的HASH值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rev-parse [HEAD|HEAD~|HEAD~2|master~3|master~4|...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看指定commit的tree的HASH值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rev-parse HEAD~4^{tree}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看指定commit的blob的HASH值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rev-parse HEAD~6:[file-path]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;12-创建及删除分支:0a315d94de8b55214793afe9517d8fb5&#34;&gt;12. 创建及删除分支&lt;/h3&gt;

&lt;p&gt;分支文件路径&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/.git/refs/heads/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看所有分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch [branch-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;切换分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout [branch-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建并切换分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b [branch-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch -d [branch-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;合并分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git merge [branch-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;13-配置github远程仓库:0a315d94de8b55214793afe9517d8fb5&#34;&gt;13. 配置Github远程仓库&lt;/h3&gt;

&lt;p&gt;创建SSH Key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;youremail@example.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一路回车使用默认值，完成之后在用户主目录中打开 &lt;code&gt;.ssh&lt;/code&gt;目录，可以看到&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id_rsa      私钥，不能泄露出去
id_rsa.pub  公钥，可告诉任何人
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;登录Github，依次点击&amp;rdquo;settings&amp;rdquo;——&amp;gt;&amp;ldquo;SSH and GPG keys&amp;rdquo;——&amp;gt;&amp;ldquo;New SSH Key&amp;rdquo;
&lt;img src=&#34;http://blog.mingguilu.com/media/git_13_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;填写Title，在Key文本框里粘贴&lt;code&gt;id_rsa.pub&lt;/code&gt;文件的内容，点击&amp;rdquo;Add SSH Key&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;14-同步远程github仓库:0a315d94de8b55214793afe9517d8fb5&#34;&gt;14. 同步远程Github仓库&lt;/h3&gt;

&lt;p&gt;关联本地仓库与远程仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin git@github.com:[github-account]/[repo-name].git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一次把本地库master分支推送到远程库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后本地做了提交，即可推送到远程库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;15-从github远程库克隆:0a315d94de8b55214793afe9517d8fb5&#34;&gt;15. 从Github远程库克隆&lt;/h3&gt;

&lt;p&gt;创建Github Repositories远程库
&lt;img src=&#34;http://blog.mingguilu.com/media/git_15_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;把远程库克隆到本地&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:[github-account]/[repo-name].git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/[github-account]/[repo-name].git
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>