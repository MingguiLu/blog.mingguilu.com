<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Account locked due to 13 failed logins]]></title>
    <url>%2F2018%2F06%2F27%2FAccount-locked-due-to-13-failed-logins%2F</url>
    <content type="text"><![CDATA[ssh登录时密码错误次数超限后账户锁定，解锁方法如下： pam_tally2 --user=ituser #查看用户登录计数器 pam_tally2 --user=ituser --reset #重置计数器，即解锁用户 极端情况下，已经无法登录到服务器上进行解锁，需要使用salt工具等远程解锁： [root@ops-saltmast-01 ~]# ssh ituser@172.30.32.50 Account locked due to 13 failed logins Password: [root@ops-saltmast-01 ~]# [root@ops-saltmast-01 ~]# salt &apos;prd-nginx-03&apos; cmd.run &apos;pam_tally2 --user=ituser&apos; WARNING: yacc table file version is out of date prd-nginx-03: Login Failures Latest failure From ituser 13 06/28/18 10:01:42 172.30.33.183 [root@ops-saltmast-01 ~]# [root@ops-saltmast-01 ~]# salt &apos;prd-nginx-03&apos; cmd.run &apos;pam_tally2 --user=ituser --reset&apos; WARNING: yacc table file version is out of date prd-nginx-03: Login Failures Latest failure From ituser 13 06/28/18 10:01:42 172.30.33.183 [root@ops-saltmast-01 ~]# [root@ops-saltmast-01 ~]# salt &apos;prd-nginx-03&apos; cmd.run &apos;pam_tally2 --user=ituser&apos; WARNING: yacc table file version is out of date prd-nginx-03: Login Failures Latest failure From ituser 0 参考文档 《Account locked due to 25 failed logins》：https://www.cnblogs.com/cjsblogs/p/8794271.html 《使用Pam_Tally2锁定和解锁SSH失败的登录尝试》：https://www.howtoing.com/use-pam_tally2-to-lock-and-unlock-ssh-failed-login-attempts/]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>account locked</tag>
        <tag>ssh账户锁定</tag>
        <tag>ssh账户解锁</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx配置proxy_pass自动定向到二级目录]]></title>
    <url>%2F2018%2F05%2F20%2FNginx%E9%85%8D%E7%BD%AEproxy_pass%E8%87%AA%E5%8A%A8%E5%AE%9A%E5%90%91%E5%88%B0%E4%BA%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[近期在生产中遇到一个需求： 某部门CRM系统运行在一台CentOS服务器(假设IP为 172.29.23.48)上，该系统使用一个java web的war包启动，客户端使用IP地址加端口接二级目录来访问： http://172.29.23.48:8088/crm 。现在需要再扩容1台CRM服务器，加入Keepalived高可用方案，并绑定域名(假设为 crm.mingguilu.com)进行访问：http://crm.mingguilu.com 在扩容完成并配置Keepalived+Nginx负载均衡高可用后，仍然需要域名接二级目录访问： http://crm.mingguilu.com/crm/，该如何配置直接使用域名http://crm.mingguilu.com访问呢？ 先模拟一下CRM系统扩容因为当前测试环境无法完全使用war包模拟出使用二级目录访问CRM系统，以下将虚拟主机的根目录设置为/usr/share/nginx/system，CRM系统文件放置在/usr/share/nginx/system/crm下 创建虚拟目录，上传CRM系统文件[root@mg-nginx-04 conf.d]# cd /usr/share/nginx/ [root@mg-nginx-04 nginx]# mkdir -p system/crm [root@mg-nginx-04 nginx]# cd system/crm/ [root@mg-nginx-04 crm]# rz [root@mg-nginx-04 crm]# ls index.html sugarcrm.jpg 创建虚拟主机配置文件[root@mg-nginx-04 ~]# cd /etc/nginx/conf.d/ [root@mg-nginx-04 conf.d]# cp -a default.conf system.conf [root@mg-nginx-04 conf.d]# vi system.conf [root@mg-nginx-04 conf.d]# cat system.conf server { listen 8088; server_name localhost; location / { root /usr/share/nginx/system; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } 启动nginx，访问模拟的CRM系统[root@mg-nginx-04 crm]# nginx -t nginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful [root@mg-nginx-04 crm]# [root@mg-nginx-04 crm]# nginx -s reload [root@mg-nginx-04 crm]# systemctl restart nginx 访问http://172.29.23.49:8088/crm/index.html，测试成功 访问http://172.29.23.48:8088/crm/index.html，测试成功 配置keepalived+nginx高可用nginx负载均衡配置文件下面以主负载均衡服务器为例，备负载均衡服务器上的配置相同 [root@mg-nginx-01 ~]# cd /etc/nginx/conf.d/ [root@mg-nginx-01 conf.d]# [root@mg-nginx-01 conf.d]# vi system.conf [root@mg-nginx-01 conf.d]# [root@mg-nginx-01 conf.d]# cat system.conf upstream system { server 172.29.23.48:8088 weight=4 max_fails=2 fail_timeout=30s; server 172.29.23.49:8088 weight=4 max_fails=2 fail_timeout=30s; } server { listen 80; server_name crm.mingguilu.com; access_log /var/log/nginx/system.log main; location / { proxy_pass http://system; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_next_upstream error timeout invalid_header http_404 http_500 http_502 http_504; } } [root@mg-nginx-01 conf.d]# nginx -t nginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful [root@mg-nginx-01 conf.d]# [root@mg-nginx-01 conf.d]# nginx -s reload keepalived配置文件keepalived虚拟ip为172.29.19.18，详细配置过程省略，参考上一篇博文：[Keepalived+Nginx实现主备负载均衡高可用]{http://blog.mingguilu.com/2018/05/19/Keepalived-Nginx%E5%AE%9E%E7%8E%B0%E4%B8%BB%E5%A4%87%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%AB%98%E5%8F%AF%E7%94%A8/} 客户端添加本地hosts解析在生产环境中应通知域名或DNS系统管理员，绑定域名crm.mingguilu.com到keepalived虚拟ip 172.29.19.18 172.29.19.18 crm.mingguilu.com 访问测试访问 http://crm.mingguilu.com，访问失败 访问 http://crm.mingguilu.com/crm/，访问成功 注意: http://crm.mingguilu.com/crm/ crm后面必须加上斜杠 / ，否则会找不到二级目录crm下的默认文件index.html，导致访问失败 配置域名访问时自动定向到二级目录proxy_pass的URL加上URI修改nginx负载均衡配置文件，将proxy_pass http://system; 修改为 proxy_pass http://system/crm/; 访问测试访问 http://crm.mingguilu.com ，访问成功 proxy_pass解析proxy_pass 可以根据location匹配的情况建立被代理的服务器或URI与代理服务器直接的映射关系 语法 设置被代理的服务器的协议和地址 支持URI映射(可选) 协议支持http和https 地址支持域名和IP地址，端口号可选 Syntax: proxy_pass URL; Default: — Context: location, if in location, limit_except Sets the protocol and address of a proxied server and an optional URI to which a location should be mapped. As a protocol, “http” or “https” can be specified. The address can be specified as a domain name or IP address, and an optional port: 示例： proxy_pass http://localhost:8000/uri/; 如果一个域名解析到多个地址，所有地址可能以轮询方式被访问，可以把一个地址指定为一组服务器 If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a server group. 示例： upstream system { #定义一组服务器集合，名称为system server 172.29.23.48:8088 weight=4 max_fails=2 fail_timeout=30s; server 172.29.23.49:8088 weight=4 max_fails=2 fail_timeout=30s; } server { listen 80; server_name crm.mingguilu.com; access_log /var/log/nginx/system.log main; location / { proxy_pass http://system; #将被代理的服务器地址指定到名称为system的一组服务器 } } 参数值支持变量，这种情况下， 如果地址被指定为域名，则在定义的服务器组中搜索名称，如果找不到，将会使用DNS解析 Parameter value can contain variables. In this case, if an address is specified as a domain name, the name is searched among the described server groups, and, if not found, is determined using a resolver. 请求的URI按照如下规则传递到服务器 如果proxy_pass的URL定向里包括URI，那么请求中匹配到location中URI的部分会被proxy_pass后面URL中的URI替换 A request URI is passed to the server as follows: * If the proxy_pass directive is specified with a URI, then when a request is passed to the server, the part of a normalized request URI matching the location is replaced by a URI specified in the directive: location /name/ { proxy_pass http://127.0.0.1/remote/; } #请求http://127.0.0.1/name/index.html ，会被代理到 http://127.0.0.1/remote/index.html #注意请求 http://127.0.0.1/name 时 /name 必须手动输入完整 如果proxy_pass的URL定向里不包括URI，那么请求中的URI会保持原样传送给后端server * If proxy_pass is specified without a URI, the request URI is passed to the server in the same form as sent by a client when the original request is processed, or the full normalized request URI is passed when processing the changed URI: location /some/path/ { proxy_pass http://127.0.0.1; } #请求http://127.0.0.1/some/path/index.html ，会被代理到 http://127.0.0.1/some/path/index.html #注意请求 http://127.0.0.1/some/path 时 /some/path 必须手动输入完整 一些情况下，不能确定替换的URI location里是正则表达式，这种情况下，proxy_pass里最好不要有URI When location is specified using a regular expression, and also inside named locations. In these cases, proxy_pass should be specified without a URI. 在proxy_pass前面用了rewrite，如下，这种情况下，proxy_pass是无效的 When the URI is changed inside a proxied location using the rewrite directive, and this same configuration will be used to process a request (break): location /name/ { rewrite /name/([^/]+) /users?name=$1 break; proxy_pass http://127.0.0.1; } 如果proxy_pass中包含变量， 它将按原样传递给服务器，替换原始请求URI location /name/ { proxy_pass http://127.0.0.1$request_uri; } 参考文档 《Keepalived+Nginx实现主备负载均衡高可用》：http://blog.mingguilu.com/2018/05/19/Keepalived-Nginx%E5%AE%9E%E7%8E%B0%E4%B8%BB%E5%A4%87%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%AB%98%E5%8F%AF%E7%94%A8/ 《Module ngx_http_proxy_module proxy_pass》：http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass 《Nginx 之四： Nginx服务器的rewrite、全局变量、重定向和防盗链相关功能》：https://www.cnblogs.com/zhang-shijie/p/5453249.html]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>nginx</tag>
        <tag>proxy_pass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Keepalived+Nginx实现主备负载均衡高可用]]></title>
    <url>%2F2018%2F05%2F19%2FKeepalived-Nginx%E5%AE%9E%E7%8E%B0%E4%B8%BB%E5%A4%87%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%AB%98%E5%8F%AF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[项目简介 安装nginx6台服务器上安装nginx方法一样，下面以其中一台为例： 参考nginx官方网站安装方法使用yum安装：http://nginx.org/en/linux_packages.html#stable 添加yum源[root@mg-nginx-03 ~]# vi /etc/yum.repos.d/nginx.repo [root@mg-nginx-03 ~]# [root@mg-nginx-03 ~]# cat /etc/yum.repos.d/nginx.repo [nginx] name=nginx repo baseurl=http://nginx.org/packages/centos/7/$basearch/ gpgcheck=0 enabled=1 清理yum缓存[root@mg-nginx-03 ~]# yum clean all 已加载插件：fastestmirror 正在清理软件源： base epel extras nginx updates Cleaning up everything Maybe you want: rm -rf /var/cache/yum, to also free up space taken by orphaned data from disabled or removed repos Cleaning up list of fastest mirrors 安装nginx[root@mg-nginx-03 ~]# yum install -y nginx 已安装: nginx.x86_64 1:1.14.0-1.el7_4.ngx 完毕！ 查看nginx相关文件[root@mg-nginx-03 ~]# find / -name &quot;nginx&quot; /etc/logrotate.d/nginx /etc/sysconfig/nginx /etc/nginx #主配置文件 /var/lib/yum/repos/x86_64/7/nginx /var/log/nginx #日志 /var/cache/yum/x86_64/7/nginx /var/cache/nginx /usr/sbin/nginx #nginx启动文件 /usr/lib64/nginx /usr/share/nginx #网站文件存放目录 /usr/libexec/initscripts/legacy-actions/nginx 管理nginx应用[root@mg-nginx-03 conf.d]# systemctl start nginx #启动nginx [root@mg-nginx-03 conf.d]# systemctl enable nginx #设置nginx开机启动 Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service. [root@mg-nginx-03 conf.d]# systemctl status nginx #查看nginx运行状态 ● nginx.service - nginx - high performance web server Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; vendor preset: disabled) Active: active (running) since 四 2018-05-24 11:14:52 CST; 53s ago Docs: http://nginx.org/en/docs/ Process: 10694 ExecStop=/bin/kill -s TERM $MAINPID (code=exited, status=0/SUCCESS) Process: 10709 ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf (code=exited, status=0/SUCCESS) Main PID: 10710 (nginx) CGroup: /system.slice/nginx.service ├─10710 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf └─10711 nginx: worker process 5月 24 11:14:52 mg-nginx-03 systemd[1]: Starting nginx - high performance web server... 5月 24 11:14:52 mg-nginx-03 systemd[1]: Started nginx - high performance web server. [root@mg-nginx-03 conf.d]# systemctl restart nginx #重启nginx [root@mg-nginx-03 conf.d]# systemctl stop nginx #停止nginx 配置虚拟主机发布网站接下来将在四台nginx站点上配置虚拟主机发布我的静态博客网站，为了方便之后检验nginx负载均衡的效果，将每台站点上的博客首页稍做修改，添加上“位于mg-nginx-xx上的blog”，下面以其中一台为例 创建虚拟主机配置文件nginx默认配置文件定义了虚拟主机配置文件存放在/etc/nginx/conf.d/下，以*.conf结尾 [root@mg-nginx-03 nginx]# grep &quot;include&quot; /etc/nginx/nginx.conf include /etc/nginx/mime.types; include /etc/nginx/conf.d/*.conf; 将缺省的配置文件default.conf拷贝一份重名为blog.conf，并修改配置 [root@mg-nginx-03 conf.d]# cp -a default.conf blog.conf [root@mg-nginx-03 conf.d]# [root@mg-nginx-03 conf.d]# cat blog.conf server { listen 8080; #端口修改为8080 server_name localhost; #由于实验环境中使用IP:Port访问，此处缺省即可，如规划域名可修改为域名 #charset koi8-r; #access_log /var/log/nginx/host.access.log main; location / { root /usr/share/nginx/blog; #网站主目录修改为/usr/share/nginx/blog index index.html index.htm; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } 将静态博客网站的blog目录上传到/usr/share/nginx下推荐一个文件上传下载的工具 lrzsz，可通过yum安装之后使用 rz 上传文件，sz filename 下载文件 [root@mg-nginx-03 nginx]# cd /tmp/ [root@mg-nginx-03 tmp]# rz [root@mg-nginx-03 tmp]# ls blog.tar.gz [root@mg-nginx-03 tmp]# tar -zxvf blog.tar.gz -C /usr/share/nginx/ [root@mg-nginx-03 tmp]# cd /usr/share/nginx/ [root@mg-nginx-03 nginx]# ll 总用量 0 drwxr-xr-x 15 mingguilu mingguilu 253 5月 24 14:09 blog drwxr-xr-x 2 root root 40 5月 24 10:45 html [root@mg-nginx-03 nginx]# ll blog/ 总用量 4824 drwxr-xr-x 3 mingguilu mingguilu 16 5月 22 16:48 2016 drwxr-xr-x 8 mingguilu mingguilu 66 5月 24 14:00 2017 drwxr-xr-x 4 mingguilu mingguilu 26 5月 24 14:00 2018 -rw-r--r-- 1 mingguilu mingguilu 710 5月 22 17:26 404.html drwxr-xr-x 2 mingguilu mingguilu 24 5月 22 17:25 about drwxr-xr-x 6 mingguilu mingguilu 72 5月 24 14:00 archives drwxr-xr-x 6 mingguilu mingguilu 104 5月 24 14:00 categories -rw-r--r-- 1 mingguilu mingguilu 19 5月 22 17:26 CNAME drwxr-xr-x 2 mingguilu mingguilu 22 5月 22 16:48 css -rw-r--r-- 1 mingguilu mingguilu 4590771 5月 22 17:26 debug.log drwxr-xr-x 27 mingguilu mingguilu 4096 5月 22 16:48 images -rw-r--r-- 1 mingguilu mingguilu 75702 5月 24 14:09 index.html drwxr-xr-x 3 mingguilu mingguilu 17 5月 22 16:48 js drwxr-xr-x 16 mingguilu mingguilu 261 5月 24 14:00 lib drwxr-xr-x 4 mingguilu mingguilu 24 5月 24 14:00 page -rw-r--r-- 1 mingguilu mingguilu 253501 5月 22 17:26 search.xml drwxr-xr-x 51 mingguilu mingguilu 4096 5月 24 14:00 tags 将博客首页index.html稍作修改便于检测nginx负载均衡&lt;ul id=&quot;menu&quot; class=&quot;menu&quot;&gt; &lt;!-- 用于nginx负载均衡测试 start --&gt; &lt;li class=&quot;menu-item menu-item-home&quot;&gt; &lt;a href=&quot;/&quot; rel=&quot;section&quot;&gt; &lt;i class=&quot;menu-item-icon fa fa-fw fa-linux&quot;&gt;&lt;/i&gt; &lt;br /&gt; 位于mg-nginx-03上的blog &lt;/a&gt; &lt;/li&gt; &lt;!-- 用于nginx负载均衡测试 end --&gt; &lt;li class=&quot;menu-item menu-item-home&quot;&gt; &lt;a href=&quot;/&quot; rel=&quot;section&quot;&gt; &lt;i class=&quot;menu-item-icon fa fa-fw fa-home&quot;&gt;&lt;/i&gt; &lt;br /&gt; 首页 &lt;/a&gt; &lt;/li&gt; 修改后将在首页左上角显示“位于mg-nginx-xx上的blog”，效果如下： 配置nginx负载均衡接下来在mg-nginx-01上配置负载均衡，注意：只做负载均衡一台nginx即可，后面会引入高可用则需要2台以上nginx做负载转发 Nginx的反向代理和负载均衡，需要用到HttpProxyMoudule和HttpUpstreamModule模块，其中HttpProxyMoudule用来将用户的数据请求转发至其他服务器，HttpUpstreamModule模块用来提供简单的负载均衡技术(轮询、最少连接、客户端IP)，这两个模块在nginx安装时会自动安装上 创建配置文件[root@mg-nginx-01 ~]# cd /etc/nginx/conf.d/ [root@mg-nginx-01 conf.d]# vi blog.conf [root@mg-nginx-01 conf.d]# cat blog.conf upstream blog { #upstream定义后端真实服务器集合，blog为服务器组的名称 #ip_hash; #根据客户端IP地址的hash值分配固定的后端服务器，否则将使用轮询方式转发数据 server 172.29.23.45:8080 weight=4 max_fails=2 fail_timeout=30s; server 172.29.23.46:8080 weight=4 max_fails=2 fail_timeout=30s; server 172.29.23.48:8080 weight=4 max_fails=2 fail_timeout=30s; server 172.29.23.49:8080 weight=4 max_fails=2 fail_timeout=30s; #weight设置权重值，down指令可以设置某台服务器处于宕机不可用状态，max_fails定义连接后端服务器失败多少次后则认为服务器处理无效状态，fail_timeout定义连接后端服务器超时时间 } server { listen 80; #注意：nginx启动之后，默认使用default.conf配置，80端口会被占用，需要在default.conf中改为其它端口或注释掉不使用 server_name blog-uat.mingguilu.com; #网站域名，如果域名未在DNS注册，需要在客户端hosts文件中添加解析条目：172.29.19.19 blog-uat.mingguilu.com，并清理系统和浏览器缓存 access_log /var/log/nginx/blog.log main; #访问日志 location / { proxy_pass http://blog; #将请求转发给一组服务器 proxy_set_header Host $host; #$host代表nginx转发服务器本身 proxy_set_header X-Real-IP $remote_addr; #获取用户真实的IP地址 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #获取用户真实的IP地址 proxy_next_upstream error timeout invalid_header http_404 http_500 http_502 http_504; #当后端服务器中一台返回error timeout或错误码404、500...时，将请求分配给一下台服务器继续处理 } } 检测nginx配置文件是否合规[root@mg-nginx-01 conf.d]# nginx -t nginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful 重新加载配置文件[root@mg-nginx-01 conf.d]# nginx -s reload 客户端添加本地hosts解析在C:\Windows\System32\drivers\etc\hosts 文件末尾添加以下内容： 172.29.19.19 blog-uat.mingguilu.com 刷新系统DNS缓存 C:\Users\v-mingguilu&gt;ipconfig /flushdns Windows IP 配置 已成功刷新 DNS 解析缓存。 访问测试，如果firefox和chrome未达预期效果，试试IE浏览器 配置keepalived+nginx高可用以上完成了4台nginx发布站点和1台nginx负载均衡，如果任意站点宕机，剩余站点可以继续响应客户端访问，但实现负载均衡的这台nginx服务器本身存在风险，如果宕机，将无法通过域名blog-uat.mingguilu.com访问，接下来将扩容一台nginx负载均衡服务器并引入keepalived实现高可用 扩容一台nginx负载均衡服务器扩容的nginx负载均衡服务器为mg-nginx-02，与上面mg-nginx-01的配置相同 [root@mg-nginx-02 ~]# cd /etc/nginx/conf.d/ [root@mg-nginx-02 conf.d]# vi blog.conf [root@mg-nginx-02 conf.d]# cat blog.conf upstream blog { #upstream定义后端真实服务器集合，blog为服务器组的名称 #ip_hash; #根据客户端IP地址的hash值分配固定的后端服务器，否则将使用轮询方式转发数据 server 172.29.23.45:8080 weight=4 max_fails=2 fail_timeout=30s; server 172.29.23.46:8080 weight=4 max_fails=2 fail_timeout=30s; server 172.29.23.48:8080 weight=4 max_fails=2 fail_timeout=30s; server 172.29.23.49:8080 weight=4 max_fails=2 fail_timeout=30s; #weight设置权重值，down指令可以设置某台服务器处于宕机不可用状态，max_fails定义连接后端服务器失败多少次后则认为服务器处理无效状态，fail_timeout定义连接后端服务器超时时间 } server { listen 80; #注意：nginx启动之后，默认使用default.conf配置，80端口会被占用，需要在default.conf中改为其它端口或注释掉不使用 server_name blog-uat.mingguilu.com; #网站域名 access_log /var/log/nginx/blog.log main; #访问日志 location / { proxy_pass http://blog; #将请求转发给一组服务器 proxy_set_header Host $host; #$host代表nginx转发服务器本身 proxy_set_header X-Real-IP $remote_addr; #获取用户真实的IP地址 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #获取用户真实的IP地址 proxy_next_upstream error timeout invalid_header http_404 http_500 http_502 http_504; #当后端服务器中一台返回error timeout或错误码404、500...时，将请求分配给一下台服务器继续处理 } } 安装keepalived在mg-nginx-01和mg-nginx-02上安装keepalived，将mg-nginx-01称为主负载均衡服务器，即主Master节点， mg-nginx-02称为备负载均衡服务器，即备Backup节点 安装方法参考官方文档：http://www.keepalived.org/doc/installing_keepalived.html [root@mg-nginx-01 ~]# yum install -y keepalived 已安装: keepalived.x86_64 0:1.3.5-6.el7 作为依赖被安装: lm_sensors-libs.x86_64 0:3.4.0-4.20160601gitf9185e5.el7 net-snmp-agent-libs.x86_64 1:5.7.2-33.el7_5.2 net-snmp-libs.x86_64 1:5.7.2-33.el7_5.2 完毕！ 查看keepalived部分安装文件[root@mg-nginx-01 ~]# find / -name &quot;keepalived*&quot; /etc/sysconfig/keepalived /etc/selinux/targeted/active/modules/100/keepalived /etc/keepalived /etc/keepalived/keepalived.conf #主配置文件 /usr/sbin/keepalived #启动程序 /usr/lib/systemd/system/keepalived.service ...... 配置文件说明配置文件： /etc/keepalived/keepalived.conf global_defs { #全局配置 notification_email { 定义报警邮件地址 acassen@firewall.loc failover@firewall.loc sysadmin@firewall.loc } notification_email_from Alexandre.Cassen@firewall.loc #定义发送邮件的地址 smtp_server 192.168.200.1 #邮箱服务器 smtp_connect_timeout 30 #定义超时时间 router_id LVS_DEVEL #定义路由标识信息，相同局域网唯一 } vrrp_instance VI_1 { #定义实例 state MASTER #状态参数 master/backup 只是说明 interface eth0 #虚IP地址放置的网卡位置 virtual_router_id 51 #同一个集群id一致 priority 100 # 优先级决定是主还是备，越大越优先 advert_int 1 #主备通讯时间间隔 authentication { #认证 auth_type PASS auth_pass 1111 } virtual_ipaddress { #设备之间使用的虚拟ip地址 192.168.200.16 192.168.200.17 192.168.200.18 } } 修改配置文件主节点配置[root@mg-nginx-01 keepalived]# cp -a keepalived.conf keepalived.conf.bak #养成好习惯，先备份默认配置文件 [root@mg-nginx-01 keepalived]# vi keepalived.conf [root@mg-nginx-01 keepalived]# cat keepalived.conf ! Configuration File for keepalived global_defs { router_id mg-nginx-01 #与备节点的配置不同 } vrrp_instance VI_1 { state MASTER #与备节点的配置不同 interface ens33 virtual_router_id 51 priority 150 #与备节点的配置不同 advert_int 1 authentication { auth_type PASS auth_pass 1111 } virtual_ipaddress { 172.29.19.18/24 } } 备节点配置[root@mg-nginx-02 keepalived]# cp -a keepalived.conf keepalived.conf.bak #养成好习惯，先备份默认配置文件 [root@mg-nginx-02 keepalived]# vi keepalived.conf [root@mg-nginx-02 keepalived]# cat keepalived.conf ! Configuration File for keepalived global_defs { router_id mg-nginx-02 #与主节点的配置不同 } vrrp_instance VI_1 { state BACKUP #与主节点的配置不同 interface ens33 virtual_router_id 51 priority 100 #与主节点的配置不同 advert_int 1 authentication { auth_type PASS auth_pass 1111 } virtual_ipaddress { 172.29.19.18/24 } } 启动keepalived[root@mg-nginx-01 keepalived]# systemctl enable keepalived Created symlink from /etc/systemd/system/multi-user.target.wants/keepalived.service to /usr/lib/systemd/system/keepalived.service. [root@mg-nginx-01 keepalived]# [root@mg-nginx-01 keepalived]# systemctl start keepalived [root@mg-nginx-02 keepalived]# systemctl enable keepalived Created symlink from /etc/systemd/system/multi-user.target.wants/keepalived.service to /usr/lib/systemd/system/keepalived.service. [root@mg-nginx-02 keepalived]# [root@mg-nginx-02 keepalived]# systemctl start keepalived 查看虚拟ip状态主节点优先级设置为：priority 150 ，备节点优先级设置为：priority 100 所以当前虚拟ip飘在主节点mg-nginx-01上： [root@mg-nginx-01 keepalived]# ip add 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:bc:f8:34 brd ff:ff:ff:ff:ff:ff inet 172.29.19.19/24 brd 172.29.19.255 scope global dynamic ens33 valid_lft 518994sec preferred_lft 518994sec inet 172.29.19.18/24 scope global secondary ens33 #keepalived虚拟ip valid_lft forever preferred_lft forever inet6 fe80::eaa7:1c99:3289:8d13/64 scope link valid_lft forever preferred_lft forever 修改客户端本地hosts解析将C:\Windows\System32\drivers\etc\hosts 文件修改如下： 172.29.19.18 blog-uat.mingguilu.com 刷新系统DNS缓存，清理浏览器缓存 C:\Users\v-mingguilu&gt;ipconfig /flushdns Windows IP 配置 已成功刷新 DNS 解析缓存。 访问测试，成功！ 模拟一下主节点发生故障宕机，备节点接管服务将主节点上的nginx和keepalived都停掉： [root@mg-nginx-01 ~]# systemctl stop nginx [root@mg-nginx-01 ~]# systemctl stop keepalived 查看网卡信息，虚拟ip果然飘到了备节点网卡上： [root@mg-nginx-02 ~]# ip add 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:3b:15:27 brd ff:ff:ff:ff:ff:ff inet 172.29.19.20/24 brd 172.29.19.255 scope global dynamic ens33 valid_lft 688417sec preferred_lft 688417sec inet 172.29.19.18/24 scope global secondary ens33 valid_lft forever preferred_lft forever inet6 fe80::362c:96eb:19ff:bf5e/64 scope link valid_lft forever preferred_lft forever 在浏览器访问测试结果也正常，keepalived+nginx高可用配置成功！ 模拟一下主节点从故障中恢复，夺回主节点身份重新启动nginx和keepalived服务，很快就夺回主节点地位 [root@mg-nginx-01 ~]# systemctl start nginx [root@mg-nginx-01 ~]# systemctl start keepalived [root@mg-nginx-01 ~]# [root@mg-nginx-01 ~]# ip add 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:bc:f8:34 brd ff:ff:ff:ff:ff:ff inet 172.29.19.19/24 brd 172.29.19.255 scope global dynamic ens33 valid_lft 687526sec preferred_lft 687526sec inet 172.29.19.18/24 scope global secondary ens33 valid_lft forever preferred_lft forever inet6 fe80::eaa7:1c99:3289:8d13/64 scope link valid_lft forever preferred_lft forever 本次实验中出现的一些问题？！keepalived配置文件中virtual_ipaddress的写法不同产生的网卡信息显示差异原本虚拟ip简省的配置应该是： virtual_ipaddress { 172.29.19.18 } 启动keepalived服务后，查看网卡信息： 虚拟ip掩码为32位，但客户端和其他服务器都能ping通，网站正常访问 随后将虚拟ip配置修改为如下： virtual_ipaddress { 172.29.19.18/24 } 重启keepalived服务后，查看网卡信息： 虚拟ip掩码为24位，显示信息中增加了secondary字段，服务正常 将虚拟ip配置修改为最详细： virtual_ipaddress { 172.29.19.18/24 dev ens33 label ens33:1 } 重启keepalived服务后，查看网卡信息： 虚拟ip掩码为24位，显示信息中增加了secondary字段，虚拟接口为1，服务正常 主节点nginx服务stop之后，主节点的身份未变，网站无法访问我原本的理解是，当主节点上的nginx服务stop之后，无法响应客户端数据请求，备节点就会上位接管客户端请求，但这个理解是错误的，实际上故障中的主节点此时依然是主节点，客户端将无法访问网站。 要理解这个意料之外的结果，需要先研究一下keepalived高可用故障切换转移的工作原理： VRRP (Virtual Router Redundancy Protocol ,虚拟路由器冗余协议） 简言之， 在 Keepalived服务正常工作时，主节点会不断地向备节点发送（多播的方式）心跳消息，用以告诉备节点自己还活看，当主节点发生故障时，就无法发送心跳消息，备节点也就因此无法继续检测到来自主节点的心跳了，于是调用自身的接管程序，接管主节点的 IP资源及服务。而当主节点恢复时，备节点又会释放主节点故障时自身接管的IP资源及服务，恢复到原来的备节点角色。 所以只停止主节点上nginx服务，主备节点之间的心跳消息依然正常通信，备节点不会接管客户端请求，而主节点也无法进行响应客户端请求，最终造成客户端访问失败。 当我们把主节点keepalived服务stop时，或者主节点宕机，物理连接不通时，主备节点无法收发心跳消息，备节点就会成功上位！ 参考文档 《Nginx Documentation》：http://nginx.org/en/docs/ 《Keepalived User Guide》：http://www.keepalived.org/doc/ 《 keepalived实现服务高可用》： https://www.cnblogs.com/clsn/p/8052649.html#auto_id_4]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>nginx</tag>
        <tag>keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Manjaro_17.1.7_Hakoila安装Teamviewer-beta_13无法连接问题]]></title>
    <url>%2F2018%2F04%2F12%2FManjaro-17-1-7-Hakoila%E5%AE%89%E8%A3%85Teamviewer-beta-13%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[linux系统信息如下：$ lsb_release -a LSB Version: n/a Distributor ID: ManjaroLinux Description: Manjaro Linux Release: 17.1.7 Codename: Hakoila 仓库中可用的Teamviewer版本$ sudo pacman -Ss teamviewer archlinuxcn/teamviewer 12.0.90041-7 All-In-One Software for Remote Support and Online Meetings archlinuxcn/teamviewer-beta 13.1.3026-1 All-In-One Software for Remote Support and Online Meetings - beta version 安装运行Teamviewer-12之后频繁掉线，不可用$ sudo pacman -S teamviewer 正在解决依赖关系... 正在查找软件包冲突... 软件包 (1) teamviewer-12.0.90041-7 全部安装大小： 145.02 MiB :: 进行安装吗？ [Y/n] y ...... 安装运行Teamviewer-beta-13之后无连接，不可用$ sudo pacman -S teamviewer-beta 正在解决依赖关系... 正在查找软件包冲突... 软件包 (1) teamviewer-beta-13.1.3026-1 全部安装大小： 59.26 MiB :: 进行安装吗？ [Y/n] y ...... 使用官网下载tar包直接运行后无连接，不可用Teamviewer官方下载页面： https://www.teamviewer.com/en/download/linux/ $ tar xf teamviewer_13.1.3026_amd64.tar.xz $ cd teamviewer $ ll 总用量 28K drwx------ 2 mingguilu mingguilu 4.0K 4月 12 00:52 config drwxr-xr-x 2 mingguilu mingguilu 4.0K 3月 20 20:11 doc drwx------ 2 mingguilu mingguilu 4.0K 4月 12 00:39 logfiles -rwxr-xr-x 1 mingguilu mingguilu 952 3月 20 20:11 teamviewer -rw-r--r-- 1 mingguilu mingguilu 285 4月 12 00:39 teamviewer.desktop drwxr-xr-x 6 mingguilu mingguilu 4.0K 3月 20 20:11 tv_bin -rwxr-xr-x 1 mingguilu mingguilu 956 3月 20 20:11 tv-setup $ ./teamviewer Init... CheckCPU: SSE2 support: yes Checking setup... Launching TeamViewer ... Starting network process (no daemon) Network process already started (or error) Launching TeamViewer GUI ... 使用官网下载tar包安装后重启系统，可正常使用查看tv-setup的用法： $ sudo ./tv-setup [sudo] mingguilu 的密码： How to use TeamViewer (tar.xz) teamviewer run teamviewer directly You can just extract the tar.xz package and run &apos;teamviewer&apos; without installation. It will behave similar to a TeamViewer Portable or QuickSupport on Windows. This should work if all necessary libraries (packages) are installed on your system. tv-setup checklibs identify missing libraries Run this command to identify missing libraries You can then look for the matching packages and install them manually. tv-setup install interactive installation tv-setup install force no questions A permanent installation with all the features of the RPM/DEB packages (start menu entries, auto start, background daemon for permanent access) tv-setup uninstall [force] undo previous (TAR) installation Removes the package. Log files and configuration are not removed 进行安装： $ sudo ./tv-setup install -=- TeamViewer tar.xz interactive installation -=- Checking dependencies Analyzing dependencies ... All library dependencies (*.so) seem to be satisfied! QtQuickControls seems to be missing Serious Problem - installation should be aborted Missing libraries TeamViewer will not be operational without these libraries. Please install them and try again. Continue (y) or abort (n) ? [Y/n]? y Installing files... Files will be installed in &apos;/opt/teamviewer&apos; Continue (y) or abort (n) ? [Y/n]? Copying files... done Install daemon? Note: You can (un)install the daemon at any time. Commands are explained in &apos;teamviewer help&apos; Continue (y) or skip (n) ? [Y/n]? y Create menu entries? Creates menu entries for your desktop environment. Continue (y) or skip (n) ? [Y/n]? y gtk-update-icon-cache: Cache file created successfully. Done! TeamViewer TAR has been sucessfully installed. Run teamviewer help for more information. 参考文档 《manjaro/arch Linux 安装teamviewer13后无法正常价运行 》：https://blog.csdn.net/vectorwww/article/details/79388281]]></content>
      <categories>
        <category>趣玩尝新</category>
      </categories>
      <tags>
        <tag>manjaro</tag>
        <tag>teamviewer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nicehash的CPU挖矿指南之CentOS篇]]></title>
    <url>%2F2018%2F04%2F01%2FNicehash%E7%9A%84CPU%E6%8C%96%E7%9F%BF%E6%8C%87%E5%8D%97%E4%B9%8BCentOS%E7%AF%87%2F</url>
    <content type="text"><![CDATA[时至今日，随着挖矿难度提升，加密货币价格一再腰斩，个人挖矿只是浪费精力和资源而已，完全不推荐，本篇文章仅作为体验教程 Nicehash矿池相比国内外XMR矿池Nicehash矿池相比于其他国内外的XMR矿池，有一定的优势，或网络连通性好，或矿工多算力强，容易爆块获得收益，最重要的是结算周期短，相对国内矿池1.5～3XMR的高门槛，Nicehash结算到交易所钱包最低0.0021BTC即可，抽水0.2%也相对较低 Linux版本相比Windows版本优缺点无论Windows还是Linux版本CPU挖矿实际是调用xmr-stak、cpuminer等挖XMR，再抽掉手续费换算成Bitcoin结算给矿工 优点： 系统资源开销更低，挖矿软件运行更稳定 Linux系统便于结合自动化工具进行批量部署和管理 Linux系统便于持续部署的新版本挖矿软件和算法 用户可自定义用于挖矿的CPU线程数 缺点： Nichash控制面板无法显示每台矿机的名称，无论实际有多少台矿机，矿机数量只显示1台 Github上有很多版本的挖矿软件，但有些版本可能会抽水，注意分辨 注册Nicehashhttps://www.nicehash.com/?refby=1358932&amp;lang=zh 推荐系统：CentOS 7 以上cat /etc/redhat-release CentOS Linux release 7.4.1708 (Core) 切换到root用户sudo su - root 关闭防火墙sudo systemctl stop firewalld sudo systemctl disable firewalld sudo setenforce 0 sudo sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config 系统调优参数，防止出现内存错误echo &apos;* soft memlock 262144&apos; &gt;&gt; /etc/security/limits.conf echo &apos;* hard memlock 262144&apos; &gt;&gt; /etc/security/limits.conf sysctl -w vm.nr_hugepages=128 安装依赖软件yum install -y centos-release-scl epel-release yum install -y devtoolset-4-gcc* hwloc-devel libmicrohttpd-devel openssl-devel libcurl-devel libtool automake make git yum groupinstall -y &quot;Development Tools&quot; scl enable devtoolset-4 bash 创建cpuminer-opt工作目录mkdir /data cd /data 下载编译cpuminer-optNicehash官方推荐的cpuminer-multi的Github仓库地址为：https://github.com/tpruvot/cpuminer-multi.git 不过这个版本不支持cryptonightv7算法（或许支持但我不知道怎么用），所以选择以下支持cryptonightv7算法的cpuminer-opt git clone https://github.com/JayDDee/cpuminer-opt.git cd cpuminer-opt ./build.sh 创建日志文件mkdir /data/cpuminer-opt/logs touch /data/cpuminer-opt/logs/cpuminer.log chmod -R 755 /data/cpuminer-opt/logs/cpuminer.log 配置对应算法的挖矿参数参数简介： “url” : Stratum服务器地址，格式为：stratum+tcp://算法.位置.nicehash.com:端口，参考https://www.nicehash.com/farm-mining“user” : 你的Nicehash钱包地址，或者Nicehash的邮箱账户“pass” : 密码，默认‘x’，可以空着’ ‘，或者填‘矿工名称:邮箱地址’“algo” : 挖矿算法，需要跟url中的算法一样，参考https://www.nicehash.com/algorithm“threads” : 用于挖矿的cpu线程，默认0为所有线程其他参数： 默认即可 cp cpuminer-conf.json cpuminer-conf.json.cryptonightv7 cp cpuminer-conf.json cpuminer-conf.json.lyra2rev2 vi cpuminer-conf.json.cryptonightv7 { &quot;_comment1&quot; : &quot;Any long-format command line argument &quot;, &quot;_comment2&quot; : &quot;may be used in this JSON configuration file&quot;, &quot;api-bind&quot; : &quot;127.0.0.1:4048&quot;, &quot;url&quot; : &quot;stratum+tcp://cryptonightv7.hk.nicehash.com:3363&quot;, &quot;user&quot; : &quot;3PZxBftQ8kt8uUszqM9tFnqwJMKWPpg8zm&quot;, &quot;pass&quot; : &quot;x&quot;, &quot;algo&quot; : &quot;cryptonightv7&quot;, &quot;threads&quot; : 7, &quot;cpu-priority&quot; : 0, &quot;cpu-affinity&quot; : -1, &quot;benchmark&quot; : false, &quot;debug&quot; : false, &quot;protocol&quot;: false, &quot;quiet&quot; : false } vi cpuminer-conf.json.lyra2rev2 { &quot;_comment1&quot; : &quot;Any long-format command line argument &quot;, &quot;_comment2&quot; : &quot;may be used in this JSON configuration file&quot;, &quot;api-bind&quot; : &quot;127.0.0.1:4048&quot;, &quot;url&quot; : &quot;stratum+tcp://lyra2rev2.hk.nicehash.com:3347&quot;, &quot;user&quot; : &quot;3PZxBftQ8kt8uUszqM9tFnqwJMKWPpg8zm&quot;, &quot;pass&quot; : &quot;x&quot;, &quot;algo&quot; : &quot;lyra2rev2&quot;, &quot;threads&quot; : 7, &quot;cpu-priority&quot; : 0, &quot;cpu-affinity&quot; : -1, &quot;benchmark&quot; : false, &quot;debug&quot; : false, &quot;protocol&quot;: false, &quot;quiet&quot; : false } 创建cpuminer对应算法的启动脚本mkdir /data/cpuminer-opt/bin cd /data/cpuminer-opt/bin vi startup-cryptonightv7.sh #!/bin/bash cd /data/cpuminer-opt ./cpuminer -c cpuminer-conf.json.cryptonightv7 &gt;/data/cpuminer-opt/logs/cpuminer.log 2&gt;&amp;1 &amp; vi startup-lyra2rev2.sh #!/bin/bash cd /data/cpuminer-opt ./cpuminer -c cpuminer-conf.json.lyra2rev2 &gt;/data/cpuminer-opt/logs/cpuminer.log 2&gt;&amp;1 &amp; chmod 755 startup-cryptonightv7.sh chmod 755 startup-lyra2rev2.sh 创建cpuminer停止脚本vi shutdown.sh #!/bin/bash XMR_STAK_PID=`ps -ef|grep cpuminer|grep -v grep|awk &apos;{print $2}&apos;` kill -9 $XMR_STAK_PID chmod 755 shutdown.sh 启动cpuminer开始挖矿sh startup-cryptonightv7.sh 切换算法挖矿 sh shutdown.sh sh startup-lyra2rev2.sh 实时追踪cpuminer日志tail -fn 100 /data/cpuminer-opt/logs/cpuminer.log 实时查看挖矿信息登录Nicehash，依次访问控制面板 ——&gt; 查看统计数据，即可查看矿机实时挖矿状态 免登陆情况下直接访问：https://www.nicehash.com/miner/你的Nicehash钱包地址 结算到交易所换成RMB推荐将Nicehash赚取的Bitcoin结算到火币交易所https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=vg333，通过站内法币交易简单方便的将数字货币出售为RMB，支持微信、支付宝收款 参考文档 注册Nicehash：https://www.nicehash.com/?refby=1358932&amp;lang=zh 火币交易所：https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=vg333 《CPU挖矿指南》： https://www.nicehash.com/help/cpu-mining 《Nicehash算法》： https://www.nicehash.com/algorithm 《Nicehash选择服务器》： https://www.nicehash.com/farm-mining 《cpuminer-opt/RELEASE_NOTES》 ：https://github.com/JayDDee/cpuminer-opt/blob/master/RELEASE_NOTES 《This is the home of cpuminer-opt, The optimized CPU miner》： https://bitcointalk.org/index.php?topic=1326803.0]]></content>
      <categories>
        <category>趣玩尝新</category>
      </categories>
      <tags>
        <tag>nicehash</tag>
        <tag>bitcoin</tag>
        <tag>cpuminer</tag>
        <tag>挖矿</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nicehash的CPU挖矿指南之Ubuntu篇]]></title>
    <url>%2F2018%2F04%2F01%2FNicehash%E7%9A%84CPU%E6%8C%96%E7%9F%BF%E6%8C%87%E5%8D%97%E4%B9%8BUbuntu%E7%AF%87%2F</url>
    <content type="text"><![CDATA[时至今日，随着挖矿难度提升，加密货币价格一再腰斩，个人挖矿只是浪费精力和资源而已，完全不推荐，本篇文章仅作为体验教程 Nicehash矿池相比国内外XMR矿池Nicehash矿池相比于其他国内外的XMR矿池，有一定的优势，或网络连通性好，或矿工多算力强，容易爆块获得收益，最重要的是结算周期短，相对国内矿池1.5～3XMR的高门槛，Nicehash结算到交易所钱包最低0.0021BTC即可，抽水0.2%也相对较低 Linux版本相比Windows版本优缺点无论Windows还是Linux版本CPU挖矿实际是调用xmr-stak、cpuminer等挖XMR，再抽掉手续费换算成Bitcoin结算给矿工 优点： 系统资源开销更低，挖矿软件运行更稳定 Linux系统便于结合自动化工具进行批量部署和管理 Linux系统便于持续部署的新版本挖矿软件和算法 用户可自定义用于挖矿的CPU线程数 缺点： Nichash控制面板无法显示每台矿机的名称，无论实际有多少台矿机，矿机数量只显示1台 Github上有很多版本的挖矿软件，但有些版本可能会抽水，注意分辨 注册Nicehashhttps://www.nicehash.com/?refby=1358932&amp;lang=zh 推荐系统：Ubuntu 16.04 以上cat /etc/issue Ubuntu 18.04 LTS \n \l 切换到root用户sudo su - root 系统调优参数，防止出现内存错误echo &apos;* soft memlock 262144&apos; &gt;&gt; /etc/security/limits.conf echo &apos;* hard memlock 262144&apos; &gt;&gt; /etc/security/limits.conf sysctl -w vm.nr_hugepages=128 安装依赖软件sudo apt-get install -y build-essential libcurl4-openssl-dev libtool libjansson* libncurses5-dev libssl-dev libgmp-dev zlib1g-dev git automake 创建cpuminer-opt工作目录mkdir /data cd /data 下载编译cpuminer-optNicehash官方推荐的cpuminer-multi的Github仓库地址为：https://github.com/tpruvot/cpuminer-multi.git 不过这个版本不支持cryptonightv7算法（或许支持但我不知道怎么用），所以选择以下支持cryptonightv7算法的cpuminer-opt git clone https://github.com/JayDDee/cpuminer-opt.git cd cpuminer-opt ./build.sh 创建日志文件mkdir /data/cpuminer-opt/logs touch /data/cpuminer-opt/logs/cpuminer.log chmod -R 755 /data/cpuminer-opt/logs/cpuminer.log 配置对应算法的挖矿参数参数简介： “url” : Stratum服务器地址，格式为：stratum+tcp://算法.位置.nicehash.com:端口，参考https://www.nicehash.com/farm-mining“user” : 你的Nicehash钱包地址，或者Nicehash的邮箱账户“pass” : 密码，默认‘x’，可以空着’ ‘，或者填‘矿工名称:邮箱地址’“algo” : 挖矿算法，需要跟url中的算法一样，参考https://www.nicehash.com/algorithm“threads” : 用于挖矿的cpu线程，默认0为所有线程其他参数： 默认即可 cp cpuminer-conf.json cpuminer-conf.json.cryptonightv7 cp cpuminer-conf.json cpuminer-conf.json.lyra2rev2 vi cpuminer-conf.json.cryptonightv7 { &quot;_comment1&quot; : &quot;Any long-format command line argument &quot;, &quot;_comment2&quot; : &quot;may be used in this JSON configuration file&quot;, &quot;api-bind&quot; : &quot;127.0.0.1:4048&quot;, &quot;url&quot; : &quot;stratum+tcp://cryptonightv7.hk.nicehash.com:3363&quot;, &quot;user&quot; : &quot;3PZxBftQ8kt8uUszqM9tFnqwJMKWPpg8zm&quot;, &quot;pass&quot; : &quot;x&quot;, &quot;algo&quot; : &quot;cryptonightv7&quot;, &quot;threads&quot; : 7, &quot;cpu-priority&quot; : 0, &quot;cpu-affinity&quot; : -1, &quot;benchmark&quot; : false, &quot;debug&quot; : false, &quot;protocol&quot;: false, &quot;quiet&quot; : false } vi cpuminer-conf.json.lyra2rev2 { &quot;_comment1&quot; : &quot;Any long-format command line argument &quot;, &quot;_comment2&quot; : &quot;may be used in this JSON configuration file&quot;, &quot;api-bind&quot; : &quot;127.0.0.1:4048&quot;, &quot;url&quot; : &quot;stratum+tcp://lyra2rev2.hk.nicehash.com:3347&quot;, &quot;user&quot; : &quot;3PZxBftQ8kt8uUszqM9tFnqwJMKWPpg8zm&quot;, &quot;pass&quot; : &quot;x&quot;, &quot;algo&quot; : &quot;lyra2rev2&quot;, &quot;threads&quot; : 7, &quot;cpu-priority&quot; : 0, &quot;cpu-affinity&quot; : -1, &quot;benchmark&quot; : false, &quot;debug&quot; : false, &quot;protocol&quot;: false, &quot;quiet&quot; : false } 创建cpuminer对应算法的启动脚本mkdir /data/cpuminer-opt/bin cd /data/cpuminer-opt/bin vi startup-cryptonightv7.sh #!/bin/bash cd /data/cpuminer-opt ./cpuminer -c cpuminer-conf.json.cryptonightv7 &gt;/data/cpuminer-opt/logs/cpuminer.log 2&gt;&amp;1 &amp; vi startup-lyra2rev2.sh #!/bin/bash cd /data/cpuminer-opt ./cpuminer -c cpuminer-conf.json.lyra2rev2 &gt;/data/cpuminer-opt/logs/cpuminer.log 2&gt;&amp;1 &amp; chmod 755 startup-cryptonightv7.sh chmod 755 startup-lyra2rev2.sh 创建cpuminer停止脚本vi shutdown.sh #!/bin/bash XMR_STAK_PID=`ps -ef|grep cpuminer|grep -v grep|awk &apos;{print $2}&apos;` kill -9 $XMR_STAK_PID chmod 755 shutdown.sh 启动cpuminer开始挖矿sh startup-cryptonightv7.sh 切换算法挖矿 sh shutdown.sh sh startup-lyra2rev2.sh 实时追踪cpuminer日志tail -fn 100 /data/cpuminer-opt/logs/cpuminer.log 实时查看挖矿信息登录Nicehash，依次访问控制面板 ——&gt; 查看统计数据，即可查看矿机实时挖矿状态 免登陆情况下直接访问：https://www.nicehash.com/miner/你的Nicehash钱包地址 结算到交易所换成RMB推荐将Nicehash赚取的Bitcoin结算到火币交易所https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=vg333，通过站内法币交易简单方便的将数字货币出售为RMB，支持微信、支付宝收款 参考文档 注册Nicehash：https://www.nicehash.com/?refby=1358932&amp;lang=zh 火币交易所：https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=vg333 《CPU挖矿指南》： https://www.nicehash.com/help/cpu-mining 《Nicehash算法》： https://www.nicehash.com/algorithm 《Nicehash选择服务器》： https://www.nicehash.com/farm-mining 《cpuminer-opt/RELEASE_NOTES》 ：https://github.com/JayDDee/cpuminer-opt/blob/master/RELEASE_NOTES 《This is the home of cpuminer-opt, The optimized CPU miner》： https://bitcointalk.org/index.php?topic=1326803.0]]></content>
      <categories>
        <category>趣玩尝新</category>
      </categories>
      <tags>
        <tag>nicehash</tag>
        <tag>bitcoin</tag>
        <tag>cpuminer</tag>
        <tag>挖矿</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nicehash的CPU挖矿指南之Windows篇]]></title>
    <url>%2F2018%2F04%2F01%2FNicehash%E7%9A%84CPU%E6%8C%96%E7%9F%BF%E6%8C%87%E5%8D%97%E4%B9%8BWindows%E7%AF%87%2F</url>
    <content type="text"><![CDATA[时至今日，随着挖矿难度提升，加密货币价格一再腰斩，个人挖矿只是浪费精力和资源而已，完全不推荐，本篇文章仅作为体验教程 Nicehash矿池相比国内外XMR矿池Nicehash矿池相比于其他国内外的XMR矿池，有一定的优势，或网络连通性好，或矿工多算力强，容易爆块获得收益，最重要的是结算周期短，相对国内矿池1.5～3XMR的高门槛，Nicehash结算到交易所钱包最低0.0021BTC即可，抽水0.2%也相对较低 Windows版本相比Linux版本优缺点无论Windows还是Linux版本CPU挖矿实际是调ii用xmr-stak、cpuminer等挖XMR，再抽掉手续费换算成Bitcoin结算给矿工 优点： 一般个人或办公电脑都是Windows系统 下载、安装和配置步骤简单 GUI界面直观易上手 在Nicehash查看挖矿状态时显示矿机名称和总数 自动切换最优的算法和矿池 缺点： 软件需逐台安装和更新，自动批量管理不容易实现 无法自定义用于挖矿的CPU线程数，默认50% 注册Nicehash访问nicehash官网，注册一个账号 https://www.nicehash.com/?refby=1358932&amp;lang=zh 登录Nicehash，查看BTC钱包地址 下载NicehashNicehash Miner 支持CPU和GPU挖矿，可以根据电脑的显卡平台选择对应的版本，如果没有独显或独显型号偏低端，只用CPU挖矿的话，随意选择即可 Nicehash Miner for NVIDIA安装 初始化 由于电脑显卡是ADM的，NVIDIA版本的挖矿软件发出警告不支持AMD GPUs，忽略即可 Nicehash Miner主界面如下 参数配置点击“WALLET”，输入Nicehash邮箱账户，或者BTC钱包地址，我这里使用BTC钱包地址 点击“WORKER”,设置这台矿机的名称，挖矿时可以在控制面板追踪这台矿机的信息 点击“CONFIGURE”,建议保持勾选“Automatic Service Location”，软件将自动连接最优的矿池 勾选上“Mining”下的三个选项，依次为：系统空闲时自动挖矿、开机启动挖矿、自动控制显卡风扇速度 启动挖矿参数配置完成后，点击”START“，开始基准算法的测试 挖矿进行中 NiceHashMinerLegacy for AMD下载安装NiceHashMinerLegacy在Nicehash下载页面点击”DOWNLOAD FOR AMD“后，会跳转到github下载最新版：https://github.com/nicehash/NiceHashMinerLegacy/releases 下载完成后直接解压缩即可使用，在解压目录中找到 NiceHashMinerLegacy.exe ，双击运行 初始化同意服务协议，选择语言，我这里默认英语，也可下来选择简体中文 继续点击同意 挖矿软件检测并提示我的AMD显卡驱动版本过低，建议更新驱动 等待软件初始化 Nicehash Miner Legacy主界面 参数设置Nicehash Miner Legacy不支持自动寻找最优矿池，需要手动设置，我们选择离自己最近的位置即可 输入Nicehash BTC钱包地址和矿机名称 点击”settings“，勾选需要的选项：系统空闲时自动挖矿、开机启动挖矿 启动挖矿勾选上可用于挖矿的设备，点击’Start‘,弹出是否进行算法基准测试，建议点击’Yes‘，点击’No‘跳过测试直接开始挖矿 测试时可勾选上’Start mining after benchmark‘，测试完成后自动开始挖矿 挖矿进行中 实时查看挖矿信息登录Nicehash，依次访问控制面板 ——&gt; 查看统计数据，即可查看矿机实时挖矿状态 免登陆情况下直接访问：https://www.nicehash.com/miner/你的Nicehash钱包地址 结算和体现Nicehash每天下午6点左右支付到BTC钱包，但未支付的余额需大于0.001BTC 当BTC钱包余额大于0.2BTC，即可提现到任一比特币钱包，比如提到交易所兑现 推荐将Nicehash赚取的Bitcoin结算到火币交易所https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=vg333，通过站内法币交易简单方便的将数字货币出售为RMB，支持微信、支付宝收款 提现步骤如下： 登录Nicehash，菜单栏依次点击”钱包“——&gt;”提现”——&gt;”Withdraw to my BTC wallet“ 输入要转入的BTC钱包地址和数额，点击”添加到提现“ 然后在提现列表中点击”确认“该笔提现，提现时间一般要8小时左右 参考文档 注册Nicehash：https://www.nicehash.com/?refby=1358932&amp;lang=zh 火币交易所：https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=vg333 收益能力计算器:https://www.nicehash.com/profitability-calculator 收益 &amp; 款项支付 :https://www.nicehash.com/help/when-and-how-do-you-get-paid 服务 &amp; 费用：https://www.nicehash.com/help/fees]]></content>
      <categories>
        <category>趣玩尝新</category>
      </categories>
      <tags>
        <tag>nicehash</tag>
        <tag>bitcoin</tag>
        <tag>cpuminer</tag>
        <tag>挖矿</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7使用GlusterFS实现Harbor镜像仓库的分布式存储]]></title>
    <url>%2F2018%2F03%2F12%2FCentOS7%E4%BD%BF%E7%94%A8GlusterFS%E5%AE%9E%E7%8E%B0Harbor%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%2F</url>
    <content type="text"><![CDATA[实验环境Hostname、IP Docker+Harbor os：CentOS7.2 hostname：centos7-01 ip：72.29.20.54 GlusterFS节点1 os：CentOS7.2 hostname：gluster-node-1 ip：172.29.20.57 GlusterFS节点2 os：CentOS7.2 hostname：gluster-node-2 ip：172.29.20.59 磁盘信息 GlusterFS节点1 /dev/sda：20G 安装系统 /dev/sdb：20G GlusterFS存储 GlusterFS节点2 /dev/sda：20G 安装系统 /dev/sdb：20G GlusterFS存储 格式化并挂载磁盘同时在gluster-node-1和gluster-node-2上进行 查看磁盘信息[mingguilu@gluster-node-1 ~]$ sudo fdisk -l 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘 /dev/sda：21.5 GB, 21474836480 字节，41943040 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘标签类型：dos 磁盘标识符：0x000a1bd9 设备 Boot Start End Blocks Id System /dev/sda1 * 2048 2099199 1048576 83 Linux /dev/sda2 2099200 41943039 19921920 8e Linux LVM 磁盘 /dev/mapper/centos-root：18.2 GB, 18249416704 字节，35643392 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘 /dev/mapper/centos-swap：2147 MB, 2147483648 字节，4194304 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘分区[root@gluster-node-1 mingguilu]# fdisk /dev/sdb 欢迎使用 fdisk (util-linux 2.23.2)。 更改将停留在内存中，直到您决定将更改写入磁盘。 使用写入命令前请三思。 Device does not contain a recognized partition table 使用磁盘标识符 0x896a8f0e 创建新的 DOS 磁盘标签。 命令(输入 m 获取帮助)：m 命令操作 a toggle a bootable flag b edit bsd disklabel c toggle the dos compatibility flag d delete a partition g create a new empty GPT partition table G create an IRIX (SGI) partition table l list known partition types m print this menu n add a new partition o create a new empty DOS partition table p print the partition table q quit without saving changes s create a new empty Sun disklabel t change a partition&apos;s system id u change display/entry units v verify the partition table w write table to disk and exit x extra functionality (experts only) 命令(输入 m 获取帮助)：n Partition type: p primary (0 primary, 0 extended, 4 free) e extended Select (default p): p 分区号 (1-4，默认 1)： 起始 扇区 (2048-41943039，默认为 2048)： 将使用默认值 2048 Last 扇区, +扇区 or +size{K,M,G} (2048-41943039，默认为 41943039)： 将使用默认值 41943039 分区 1 已设置为 Linux 类型，大小设为 20 GiB 命令(输入 m 获取帮助)：w The partition table has been altered! Calling ioctl() to re-read partition table. 正在同步磁盘。 [root@gluster-node-2 mingguilu]# fdisk -l | grep sdb 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区 /dev/sdb1 2048 41943039 20970496 83 Linux 磁盘格式化[root@gluster-node-1 mingguilu]# mkfs.xfs -i size=512 /dev/sdb1 meta-data=/dev/sdb1 isize=512 agcount=4, agsize=1310656 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=0, sparse=0 data = bsize=4096 blocks=5242624, imaxpct=25 = sunit=0 swidth=0 blks naming =version 2 bsize=4096 ascii-ci=0 ftype=1 log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1 realtime =none extsz=4096 blocks=0, rtextents=0 创建存储挂载点目录[root@gluster-node-1 mingguilu]# mkdir -p /data/brick1 设置开机自动载[root@gluster-node-1 mingguilu]# echo &apos;/dev/sdb1 /data/brick1 xfs defaults 1 2&apos; &gt;&gt; /etc/fstab 挂载[root@gluster-node-1 ~]# mount -a [root@gluster-node-1 ~]# mount | grep sdb1 /dev/sdb1 on /data/brick1 type xfs (rw,relatime,seclabel,attr2,inode64,noquota) 安装GlusterFS添加GlusterFS安装源[root@gluster-node-1 ~]# yum install centos-release-gluster 安装GlusterFS[root@gluter-node-1 ~]# yum install -y glusterfs-server 启动Gluster[root@gluster-node-1 ~]# systemctl start glusterd 开机自启动[root@gluster-node-1 ~]# systemctl enable glusterd Created symlink from /etc/systemd/system/multi-user.target.wants/glusterd.service to /usr/lib/systemd/system/glusterd.service. 查看状态[root@gluster-node-1 ~]# systemctl status glusterd ● glusterd.service - GlusterFS, a clustered file-system server Loaded: loaded (/usr/lib/systemd/system/glusterd.service; enabled; vendor preset: disabled) Active: active (running) since 一 2018-03-12 16:41:40 CST; 18s ago Main PID: 8894 (glusterd) CGroup: /system.slice/glusterd.service └─8894 /usr/sbin/glusterd -p /var/run/glusterd.pid --log-level INFO 3月 12 16:41:40 gluster-node-1 systemd[1]: Starting GlusterFS, a clustered file.... 3月 12 16:41:40 gluster-node-1 systemd[1]: Started GlusterFS, a clustered file-.... Hint: Some lines were ellipsized, use -l to show in full. 停止GlusterFS[root@gluster-node-1 ~]# systemctl stop glusterd 添加节点gluster-node-1上[root@gluster-node-1 mingguilu]# gluster peer probe 172.29.20.59 peer probe: success. gluster-node-2上[root@gluster-node-2 ~]# gluster peer probe 172.29.20.57 peer probe: success. 检查节点状态[root@gluster-node-1 mingguilu]# gluster peer status Number of Peers: 1 Hostname: 172.29.20.59 Uuid: c786d332-1647-4b1b-9640-adbf7b80162d State: Peer in Cluster (Connected) [root@gluster-node-2 ~]# gluster peer status Number of Peers: 1 Hostname: gluster-node-1 Uuid: a3d5a5bb-d60d-411d-bafb-0d3439f211e0 State: Peer in Cluster (Connected) Other names: 172.29.20.57 创建Volume创建volume挂载点[root@gluster-node-1 mingguilu]# mkdir -p /data/brick1/gv0 [root@gluster-node-2 mingguilu]# mkdir -p /data/brick1/gv0 创建volume在随意一台上： [root@gluster-node-1 mingguilu]# gluster volume create gv0 replica 2 gluster-node-1:/data/brick1/gv0 gluster-node-2:/data/brick1/gv0 Replica 2 volumes are prone to split-brain. Use Arbiter or Replica 3 to avoid this. See: http://docs.gluster.org/en/latest/Administrator%20Guide/Split%20brain%20and%20ways%20to%20deal%20with%20it/. Do you still want to continue? (y/n) y volume create: gv0: success: please start the volume to access data 启动volume[root@gluster-node-1 mingguilu]# gluster volume create gv0 replica 2 gluster-node-1:/data/brick1/gv0 gluster-node-2:/data/brick1/gv0 Replica 2 volumes are prone to split-brain. Use Arbiter or Replica 3 to avoid this. See: http://docs.gluster.org/en/latest/Administrator%20Guide/Split%20brain%20and%20ways%20to%20deal%20with%20it/. Do you still want to continue? (y/n) y volume create: gv0: success: please start the volume to access data 查看volume状态[root@gluster-node-1 mingguilu]# gluster volume info Volume Name: gv0 Type: Replicate Volume ID: df3bf85e-1e39-43ae-9e7d-d857b4fce7a5 Status: Started Snapshot Count: 0 Number of Bricks: 1 x 2 = 2 Transport-type: tcp Bricks: Brick1: gluster-node-1:/data/brick1/gv0 Brick2: gluster-node-2:/data/brick1/gv0 Options Reconfigured: transport.address-family: inet nfs.disable: on performance.client-io-threads: off [root@gluster-node-2 ~]# gluster volume info Volume Name: gv0 Type: Replicate Volume ID: df3bf85e-1e39-43ae-9e7d-d857b4fce7a5 Status: Started Snapshot Count: 0 Number of Bricks: 1 x 2 = 2 Transport-type: tcp Bricks: Brick1: gluster-node-1:/data/brick1/gv0 Brick2: gluster-node-2:/data/brick1/gv0 Options Reconfigured: transport.address-family: inet nfs.disable: on performance.client-io-threads: off 将Harbor镜像仓库挂载到GlusterFS安装GlusterFS和Glusterfs-clientyum install -y glusterfs glusterfs-client 停止harbor[root@centos7-01 harbor]# docker-compose stop Stopping nginx ... done Stopping harbor-jobservice ... done Stopping harbor-ui ... done Stopping harbor-db ... done Stopping harbor-adminserver ... done Stopping registry ... done Stopping harbor-log ... done 挂载[root@centos7-01 harbor]# mount -t glusterfs gluster-node-1:gv0 /data/registry/docker/registry/v2/repositories/]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
        <tag>Harbor</tag>
        <tag>GlusterFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7安装和配置Harbor]]></title>
    <url>%2F2018%2F03%2F08%2FCentOS7%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEHarbor%2F</url>
    <content type="text"><![CDATA[Harbor安装方式 在线安装： 安装包从Docker Hub下载Harbor镜像，所以安装程序很小，但安装时间较长 离线安装： 当无法联网时使用，安装包较大，安装过程更快速和稳定，推荐使用 OVA安装： 在VMware vCente平台下使用 安装要求 Python: 2.7 或更高版本 Docker： 1.10 或更高版本 Docker Compose： 1.6.0 或更高版本 Openssl： 最新版 安装步骤 下载安装包 配置harbor.cfg 运行install.sh安装并启动 下载安装包Harbor最新安装包下载地址： Harbor Releases Download Binary 下载并解压在线安装包[mingguilu@localhost ~]$ wget https://storage.googleapis.com/harbor-releases/release-1.4.0/harbor-online-installer-v1.4.0.tgz [mingguilu@localhost ~]$ tar xvf harbor-online-installer-v1.4.0.tgz 下载并解压离线安装包[mingguilu@localhost ~]$ wget https://storage.googleapis.com/harbor-releases/release-1.4.0/harbor-offline-installer-v1.4.0.tgz [mingguilu@localhost ~]$ tar xvf harbor-offline-installer-v1.4.0.tgz 修改配置文件harbor.cfg这段内容转自：Harbor 私有仓库简单部署,是官方文档很完整的汉化文档 必须参数 hostname：目标主机的主机名，用于访问UI和注册表服务。它应该是目标机器的IP地址或完全限定域名（FQDN），例如192.168.1.10或reg.yourdomain.com。不要使用localhost或127.0.0.1为主机名 – 注册表服务需要外部客户端访问！ ui_url_protocol：（http或https。默认为http）用于访问UI和令牌/通知服务的协议。如果启用公证，则此参数必须为https。默认情况下，这是http。要设置https协议，请参阅使用HTTPS访问harbor。 db_password：用于db_auth的MySQL数据库的根密码。更改此密码以供任何生产用途！ max_job_workers：（默认值为3）作业服务中的最大复制工作数。对于每个映像复制作业，工作程序将存储库的所有标签同步到远程目标。增加此数字允许系统中更多的并发复制作业。但是，由于每个工作人员都会消耗一定数量的网络/ CPU / IO资源，请根据主机硬件资源选择该属性的值。 customize_crt：（打开或关闭，默认为打开）当此属性打开时，准备脚本将为注册表令牌的生成/验证创建私钥和根证书。当密钥和根证书由外部源提供时，将此属性设置为off。有关详细信息，请参阅自定义密钥和harbor令牌服务证书。 ssl_cert：SSL证书的路径，仅当协议设置为https时才应用 ssl_cert_key：SSL密钥的路径，仅当协议设置为https时才应用 secretkey_path：用于在复制策略中加密或解密远程注册表的密码的密钥路径。 可选参数 电子邮件设置：Harbor需要这些参数才能向用户发送“密码重设”电子邮件，只有在需要该功能时才需要这些参数。另外，请注意，在默认情况下SSL连接时没有启用-如果你的SMTP服务器需要SSL，但不支持STARTTLS，那么你应该通过设置启用SSL email_ssl = TRUE。email_server = smtp.mydomain.com email_server_port = 25 email_username = sample_admin@mydomain.com email_password = abc email_from = admin sample_admin@mydomain.com email_ssl = false harbor_admin_password：管理员的初始密码。该密码仅在Harbor 第一次启动时生效。之后，此设置将被忽略，并且应在UI中设置管理员的密码。请注意，默认用户名/密码为admin / Harbor12345。 auth_mode：使用的身份验证类型。默认情况下，它是db_auth，即凭据存储在数据库中。对于LDAP身份验证，请将其设置为ldap_auth。重要提示：从现有的Harbor 实例升级时，必须确保auth_modeharbor.cfg在启动新版本的Harbor之前是一样的。否则，升级后用户可能无法登录。 ldap_url：LDAP端点URL（例如ldaps://ldap.mydomain.com）。 仅当auth_mode设置为ldap_auth时才使用。 ldap_searchdn：具有搜索LDAP / AD服务器权限的用户的DN（例如uid=admin,ou=people,dc=mydomain,dc=com）。 ldap_search_pwd：由ldap_searchdn指定的用户的密码。 LDAP_BASEDN：基本DN查找用户，如ou=people,dc=mydomain,dc=com。 仅当auth_mode设置为ldap_auth时才使用。 LDAP_FILTER：用于查找用户，例如，搜索过滤器(objectClass=person)。 ldap_uid：用于在LDAP搜索期间匹配用户的属性，它可以是uid，cn，电子邮件或其他属性。 ldap_scope：搜索用户的范围，1-LDAP_SCOPE_BASE，2-LDAP_SCOPE_ONELEVEL，3-LDAP_SCOPE_SUBTREE。默认值为3。 self_registration：（开或关，默认为开）启用/禁用用户注册自己的能力。禁用时，只能由管理员用户创建新用户，只有管理员用户才能在海港创建新用户。 注意：当auth_mode设置为ldap_auth时，自注册功能始终被禁用，并且该标志被忽略。 token_expiration：令牌服务创建的令牌的到期时间（以分钟为单位），默认值为30分钟。 project_creation_restriction：用于控制用户有权创建项目的标志。默认情况下，每个人都可以创建一个项目，设置为“adminonly”，以便只有admin才能创建项目。 verify_remote_cert：（上或关闭，默认为上）该标志，判断是否验证SSL / TLS证书时码头与远程注册表实例通信。将此属性设置为off可绕过SSL / TLS验证，SSL / TLS验证通常在远程实例具有自签名或不受信任的证书时使用 配置存储后端（可选）默认情况下，Harbor将映像存储在本地文件系统上。在生产环境中，您可以考虑使用其他存储后端而不是本地文件系统，如S3，Openstack Swift，Ceph等。您需要更新的是storage文件中的部分common/templates/registry/config.yml。例如，如果您使用Openstack Swift作为存储后端，则该部分可能如下所示： storage: swift: username: admin password: ADMIN_PASS authurl: http://keystone_addr:35357/v3/auth tenant: admin domain: default region: regionOne container: docker_images 注意：有关注册表的存储后端的详细信息，请参阅registry配置参考。 安装Harbor(默认安装，无公证)[mingguilu@localhost harbor]$ sudo ./install.sh [Step 0]: checking installation environment ... Note: docker version: 17.06.2 ✖ Need to install docker-compose(1.7.1+) by yourself first and run this script again. 如果之前是使用curl方式安装的Docker-compose，如无意外，安装程序会提示docker-compose未安装，需要使用pip方式重新安装，参考上一篇文章：CentOS7安装Docker和Docker-compose [mingguilu@localhost harbor]$ sudo ./install.sh [Step 0]: checking installation environment ... Note: docker version: 17.06.2 Note: docker-compose version: 1.19.0 [Step 1]: loading Harbor images ... 651f69aef02c: Loading layer [==================================================&gt;] 135.8MB/135.8MB 40a1aad64343: Loading layer [==================================================&gt;] 23.24MB/23.24MB 3fe2713e4072: Loading layer [==================================================&gt;] 12.16MB/12.16MB ba3a1eb0e375: Loading layer [==================================================&gt;] 17.3MB/17.3MB 447427ec5e1a: Loading layer [==================================================&gt;] 15.87kB/15.87kB 4ccb4026663c: Loading layer [==================================================&gt;] 3.072kB/3.072kB 16faa95946a1: Loading layer [==================================================&gt;] 29.46MB/29.46MB Loaded image: vmware/notary-server-photon:v0.5.1-v1.4.0 fa7ba9fd42c9: Loading layer [==================================================&gt;] 10.95MB/10.95MB 4e400f9ae23e: Loading layer [==================================================&gt;] 17.3MB/17.3MB 2802fb27c88b: Loading layer [==================================================&gt;] 15.87kB/15.87kB e6367a4e1e1e: Loading layer [==================================================&gt;] 3.072kB/3.072kB 8ece8dfcdd98: Loading layer [==================================================&gt;] 28.24MB/28.24MB Loaded image: vmware/notary-signer-photon:v0.5.1-v1.4.0 a7dd1a8afcaf: Loading layer [==================================================&gt;] 396.7MB/396.7MB 05adebbe496f: Loading layer [==================================================&gt;] 9.216kB/9.216kB 86eb534949fa: Loading layer [==================================================&gt;] 9.216kB/9.216kB d7f127c69380: Loading layer [==================================================&gt;] 7.68kB/7.68kB 5ac1c4dc5ee9: Loading layer [==================================================&gt;] 1.536kB/1.536kB d0bec56b5b1a: Loading layer [==================================================&gt;] 9.728kB/9.728kB 4bbe83860556: Loading layer [==================================================&gt;] 2.56kB/2.56kB e526f9e6769f: Loading layer [==================================================&gt;] 3.072kB/3.072kB Loaded image: vmware/harbor-db:v1.4.0 1cff102bbda2: Loading layer [==================================================&gt;] 154.1MB/154.1MB 04c9f3e07de1: Loading layer [==================================================&gt;] 10.75MB/10.75MB 7b6c7bf54f5c: Loading layer [==================================================&gt;] 2.048kB/2.048kB 42f8acdb7fe3: Loading layer [==================================================&gt;] 48.13kB/48.13kB 5b6299d0a1df: Loading layer [==================================================&gt;] 10.8MB/10.8MB Loaded image: vmware/clair-photon:v2.0.1-v1.4.0 6534131f457c: Loading layer [==================================================&gt;] 94.76MB/94.76MB 73f582101e4b: Loading layer [==================================================&gt;] 6.656kB/6.656kB 86d847823c48: Loading layer [==================================================&gt;] 6.656kB/6.656kB Loaded image: vmware/postgresql-photon:v1.4.0 5cd250d5a352: Loading layer [==================================================&gt;] 23.24MB/23.24MB ad3fd52b54f3: Loading layer [==================================================&gt;] 14.99MB/14.99MB 13b1e24cc368: Loading layer [==================================================&gt;] 14.99MB/14.99MB Loaded image: vmware/harbor-adminserver:v1.4.0 c26c69706710: Loading layer [==================================================&gt;] 23.24MB/23.24MB 223f6fe02cc8: Loading layer [==================================================&gt;] 23.45MB/23.45MB 1fc843c8698a: Loading layer [==================================================&gt;] 7.168kB/7.168kB e09293610ee7: Loading layer [==================================================&gt;] 10.39MB/10.39MB d59f9780b1d8: Loading layer [==================================================&gt;] 23.44MB/23.44MB Loaded image: vmware/harbor-ui:v1.4.0 dd4753242e59: Loading layer [==================================================&gt;] 73.07MB/73.07MB 95aed61ca251: Loading layer [==================================================&gt;] 3.584kB/3.584kB 1864f9818562: Loading layer [==================================================&gt;] 3.072kB/3.072kB da2a19f80b81: Loading layer [==================================================&gt;] 4.096kB/4.096kB 058531639e75: Loading layer [==================================================&gt;] 3.584kB/3.584kB a84e69fb619b: Loading layer [==================================================&gt;] 10.24kB/10.24kB Loaded image: vmware/harbor-log:v1.4.0 b1056051f246: Loading layer [==================================================&gt;] 23.24MB/23.24MB 07678065e08b: Loading layer [==================================================&gt;] 19.19MB/19.19MB a2d9bdb8f5fb: Loading layer [==================================================&gt;] 19.19MB/19.19MB Loaded image: vmware/harbor-jobservice:v1.4.0 7f58ce57cd5e: Loading layer [==================================================&gt;] 4.805MB/4.805MB Loaded image: vmware/nginx-photon:v1.4.0 4c8965978b77: Loading layer [==================================================&gt;] 23.24MB/23.24MB 1466c942edde: Loading layer [==================================================&gt;] 2.048kB/2.048kB ac5c17331735: Loading layer [==================================================&gt;] 2.048kB/2.048kB 86824c7c466a: Loading layer [==================================================&gt;] 2.048kB/2.048kB fd3bd0e70d67: Loading layer [==================================================&gt;] 22.8MB/22.8MB b02195d77636: Loading layer [==================================================&gt;] 22.8MB/22.8MB Loaded image: vmware/registry-photon:v2.6.2-v1.4.0 Loaded image: vmware/photon:1.0 Loaded image: vmware/mariadb-photon:v1.4.0 454c81edbd3b: Loading layer [==================================================&gt;] 135.2MB/135.2MB e99db1275091: Loading layer [==================================================&gt;] 395.4MB/395.4MB 051e4ee23882: Loading layer [==================================================&gt;] 9.216kB/9.216kB 6cca4437b6f6: Loading layer [==================================================&gt;] 9.216kB/9.216kB 1d48fc08c8bc: Loading layer [==================================================&gt;] 7.68kB/7.68kB 0419724fd942: Loading layer [==================================================&gt;] 1.536kB/1.536kB 526b2156bd7a: Loading layer [==================================================&gt;] 637.8MB/637.8MB 9ebf6900ecbd: Loading layer [==================================================&gt;] 78.34kB/78.34kB Loaded image: vmware/harbor-db-migrator:1.4 [Step 2]: preparing environment ... loaded secret from file: /data/secretkey Generated configuration file: ./common/config/nginx/nginx.conf Generated configuration file: ./common/config/adminserver/env Generated configuration file: ./common/config/ui/env Generated configuration file: ./common/config/registry/config.yml Generated configuration file: ./common/config/db/env Generated configuration file: ./common/config/jobservice/env Generated configuration file: ./common/config/log/logrotate.conf Generated configuration file: ./common/config/jobservice/app.conf Generated configuration file: ./common/config/ui/app.conf Generated certificate, key file: ./common/config/ui/private_key.pem, cert file: ./common/config/registry/root.crt The configuration files are ready, please use docker-compose to start the service. Creating harbor-log ... done [Step 3]: checking existing instance of Harbor ... Creating harbor-adminserver ... done Creating harbor-ui ... done [Step 4]: starting Harbor ... Creating nginx ... done Creating harbor-db ... Creating registry ... Creating harbor-adminserver ... Creating harbor-ui ... Creating harbor-jobservice ... Creating nginx ... ✔ ----Harbor has been installed and started successfully.---- Now you should be able to visit the admin portal at http://192.168.2.200. For more details, please visit https://github.com/vmware/harbor . 访问Harbor门户在浏览器访问http://hostname,Harbor默认管理员账户是admin，密码是Harbor12345 管理Harbor停止harbor[mingguilu@localhost harbor]$ sudo docker-compose stop Stopping harbor-jobservice ... done Stopping nginx ... done Stopping harbor-ui ... done Stopping harbor-db ... done Stopping harbor-adminserver ... done Stopping registry ... done Stopping harbor-log ... done 启动harbor[mingguilu@localhost harbor]$ sudo docker-compose start Starting log ... done Starting adminserver ... done Starting registry ... done Starting ui ... done Starting mysql ... done Starting jobservice ... done Starting proxy ... done 查看harbor状态[mingguilu@localhost harbor]$ sudo docker-compose ps Name Command State Ports ------------------------------------------------------------------------------------------------------------------------------ harbor-adminserver /harbor/start.sh Up harbor-db /usr/local/bin/docker-entr ... Up 3306/tcp harbor-jobservice /harbor/start.sh Up harbor-log /bin/sh -c /usr/local/bin/ ... Up 127.0.0.1:1514-&gt;10514/tcp harbor-ui /harbor/start.sh Up nginx nginx -g daemon off; Up 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:4443-&gt;4443/tcp, 0.0.0.0:80-&gt;80/tcp registry /entrypoint.sh serve /etc/ ... Up 5000/tcp 更改harbor的配置$ sudo docker-compose down -v $ vim harbor.cfg $ sudo ./prepare $ sudo docker-compose up -d 删除Harbor 的容器，同时保留图像数据和Harbor的数据库文件在文件系统上$ sudo docker-compose down -v 删除Harbor 的数据库和图像数据（为了干净的重新安装）$ rm -rf /data/database $ rm -rf /data/registry 客户端登录登录失败[mingguilu@localhost harbor]$ sudo docker login -u admin -p Harbor12345 192.168.2.200 Error response from daemon: Get https://192.168.2.200/v2/: dial tcp 192.168.2.200:443: getsockopt: connection refused 使用docker login命令登录时报错了，这是因为默认情况下，docker对registry的操作是基于https协议的，而Harbor默认是以http协议访问的 其实在harbor官方安装配置文档中，就有下面一段做了说明： IMPORTANT: The default installation of Harbor uses HTTP - as such, you will need to add the option --insecure-registry to your client&apos;s Docker daemon and restart the Docker service. 重要信息： Harbor的默认安装使用HTTP – 因此，您需要将该选项添加--insecure-registry到客户端的Docker守护程序中，然后重新启动Docker服务。 添加insecure-registry选项我们去Docker守护进程中(/etc/docker/daemon.json ,CentOS7下没有这个文件，需要手动创建)添加 –insecure-registry 参数 [mingguilu@localhost harbor]$ sudo vim /etc/docker/daemon.json [mingguilu@localhost harbor]$ sudo cat /etc/docker/daemon.json { &quot;insecure-registries&quot;:[&quot;192.168.2.200&quot;] } 重启docker[mingguilu@localhost harbor]$ sudo systemctl restart docker 重启harbor[mingguilu@localhost harbor]$ sudo docker-compose stop Stopping harbor-jobservice ... done Stopping nginx ... done Stopping harbor-ui ... done Stopping harbor-db ... done Stopping harbor-adminserver ... done Stopping registry ... done Stopping harbor-log ... done [mingguilu@localhost harbor]$ sudo docker-compose start Starting log ... done Starting adminserver ... done Starting registry ... done Starting ui ... done Starting mysql ... done Starting jobservice ... done Starting proxy ... done 登录成功[mingguilu@localhost harbor]$ sudo docker login -u admin -p Harbor12345 192.168.2.200 Login Succeeded 上传镜像给镜像打tagdocker tag repository:tag hostname:port/projectname/repository:tag 以hello-world镜像为例 [mingguilu@localhost harbor]$ sudo docker tag hello-world 192.168.2.200/library/hello-world:test [mingguilu@localhost harbor]$ sudo docker images | grep hello-world 192.168.2.200/library/hello-world test f2a91732366c 3 months ago 1.85kB hello-world latest f2a91732366c 3 months ago 1.85kB 上传镜像[mingguilu@localhost harbor]$ sudo docker push 192.168.2.200/library/hello-world:test The push refers to a repository [192.168.2.200/library/hello-world] f999ae22f308: Layer already exists test: digest: sha256:8072a54ebb3bc136150e2f2860f00a7bf45f13eeb917cca2430fcd0054c8e51b size: 524 [mingguilu@localhost harbor]$ sudo docker push 192.168.2.200/library/harbor-log:test The push refers to a repository [192.168.2.200/library/harbor-log] a84e69fb619b: Layer already exists 058531639e75: Layer already exists da2a19f80b81: Layer already exists 1864f9818562: Layer already exists 95aed61ca251: Layer already exists dd4753242e59: Layer already exists 651f69aef02c: Layer already exists test: digest: sha256:6b7e914eadc358c17929b0e7230ea951e5962441485e85c7245d2b25b601743a size: 1777 在Harbor门户在管理镜像 拉取镜像[mingguilu@localhost harbor]$ sudo docker rmi 192.168.2.200/library/harbor-log:test Untagged: 192.168.2.200/library/harbor-log:test Untagged: 192.168.2.200/library/harbor-log@sha256:6b7e914eadc358c17929b0e7230ea951e5962441485e85c7245d2b25b601743a [mingguilu@localhost harbor]$ sudo docker pull 192.168.2.200/library/harbor-log:test test: Pulling from library/harbor-log Digest: sha256:6b7e914eadc358c17929b0e7230ea951e5962441485e85c7245d2b25b601743a Status: Downloaded newer image for 192.168.2.200/library/harbor-log:test [mingguilu@localhost harbor]$ sudo docker images | grep harbor-log 192.168.2.200/library/harbor-log test 9e818c7a27ab 4 weeks ago 200MB vmware/harbor-log v1.4.0 9e818c7a27ab 4 weeks ago 200MB 参考文档 《Installation and Configuration Guide》: https://github.com/vmware/harbor/blob/master/docs/installation_guide.md 《Harbor 私有仓库简单部署》： http://blog.csdn.net/CSDN_duomaomao/article/details/78036331 《Docker仓库Harbor》： https://www.itwithauto.com/?p=785 《Harbor实战》： https://www.jianshu.com/p/cf16763942d5]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7安装Docker和Docker-compose]]></title>
    <url>%2F2018%2F03%2F06%2FCentOS7%E5%AE%89%E8%A3%85Docker%E5%92%8CDocker-compose%2F</url>
    <content type="text"><![CDATA[Docker分为Docker-EE(enterprise edition)和Docker-CE(community edition)两个版本；EE是收费版本，由官方技术团队维护和提供技术支持；CE是免费版本，由社区维护和提供技术支持 安装Docker-EE获取Docker EE repository URL注册Docker帐户在Docker官网右上角点击Create Docker ID，输入Docker ID、邮箱、密码进行注册，随后在邮件点击链接激活帐户 在Docker Store获取Docker EE for CentOS在GET DOCKER下面点击GET DOCKER EE，筛选出Docker Enterprise Edition for CentOS Docker-EE是付费版本，但可以免费体验1个月，点击Start 1 Month Trial 如果是第一次获取Docker repository URL，会要求完善个人账户信息，填写提交即可，接下来即可看到自己的URL 卸载旧版本的Docker或Docker-engine如果系统上不存在旧版的Docker可以跳过这步 $ sudo yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine \ docker-ce 配置Yum源移除现有的Docker yum源[mingguilu@localhost yum.repos.d]$ sudo mv docker-ee.repo docker-ee.repo.bak [mingguilu@localhost yum.repos.d]$ ls CentOS-Base.repo CentOS-Debuginfo.repo CentOS-Media.repo CentOS-Vault.repo CentOS-CR.repo CentOS-fasttrack.repo CentOS-Sources.repo docker-ee.repo.bak 将Docker EE repository UR添加到临时环境变量中$ export DOCKERURL=&apos;&lt;DOCKER-EE-URL&gt;&apos; [mingguilu@localhost yum.repos.d]$ export DOCKERURL=&apos;&lt;DOCKER-EE-URL&gt;&apos; [mingguilu@localhost yum.repos.d]$ export | head -1 declare -x DOCKERURL=&quot;https://storebits.docker.com/ee/centos/sub-43072c8f-268b-4608-8065-9996bb1c7129&quot; 把存储Docker EE repository UR的变量添加到/etc/yum/vars/dockerurl文件中$ sudo -E sh -c &apos;echo &quot;$DOCKERURL/centos&quot; &gt; /etc/yum/vars/dockerurl&apos; 安装必需的软件yum-utils、device-mapper-persistent-data、lvm2$ sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 添加到yum源$ sudo -E yum-config-manager \ --add-repo \ &quot;$DOCKERURL/centos/docker-ee.repo&quot; 正式安装$ sudo yum -y install docker-ee [mingguilu@localhost yum.repos.d]$ sudo yum install -y docker-ee 已加载插件：fastestmirror docker-ee-stable-17.06 | 2.9 kB 00:00:00 docker-ee-stable-18.01 | 2.9 kB 00:00:00 (1/2): docker-ee-stable-18.01/x86_64/primary_db | 1.1 kB 00:00:02 (2/2): docker-ee-stable-17.06/x86_64/primary_db | 7.6 kB 00:00:02 Loading mirror speeds from cached hostfile * base: centos.ustc.edu.cn * extras: mirrors.sohu.com * updates: mirrors.sohu.com 正在解决依赖关系 --&gt; 正在检查事务 ---&gt; 软件包 docker-ee.x86_64.0.17.06.2.ee.6-3.el7.centos 将被 安装 --&gt; 正在处理依赖关系 container-selinux &gt;= 2.9，它被软件包 docker-ee-17.06.2.ee.6-3.el7.centos.x86_64 需要 --&gt; 正在检查事务 ---&gt; 软件包 container-selinux.noarch.2.2.36-1.gitff95335.el7 将被 安装 --&gt; 解决依赖关系完成 依赖关系解决 ==================================================================================== Package 架构 版本 源 大小 ==================================================================================== 正在安装: docker-ee x86_64 17.06.2.ee.6-3.el7.centos docker-ee-stable-17.06 25 M 为依赖而安装: container-selinux noarch 2:2.36-1.gitff95335.el7 extras 31 k 事务概要 ==================================================================================== 安装 1 软件包 (+1 依赖软件包) 总下载量：25 M 安装大小：79 M Downloading packages: (1/2): container-selinux-2.36-1.gitff95335.el7.noarch.rpm | 31 kB 00:00:01 warning: /var/cache/yum/x86_64/7/docker-ee-stable-17.06/packages/docker-ee-17.06.2.ee.6-3.el7.centos.x86_64.rpm: Header V4 RSA/SHA512 Signature, key ID 76682bc9: NOKEY docker-ee-17.06.2.ee.6-3.el7.centos.x86_64.rpm 的公钥尚未安装 (2/2): docker-ee-17.06.2.ee.6-3.el7.centos.x86_64.rpm | 25 MB 00:00:48 ------------------------------------------------------------------------------------ 总计 534 kB/s | 25 MB 00:48 从 https://storebits.docker.com/ee/centos/sub-43072c8f-268b-4608-8065-9996bb1c7129/centos/gpg 检索密钥 导入 GPG key 0x76682BC9: 用户ID : &quot;Docker Release (EE rpm) &lt;docker@docker.com&gt;&quot; 指纹 : 77fe da13 1a83 1d29 a418 d3e8 99e5 ff2e 7668 2bc9 来自 : https://storebits.docker.com/ee/centos/sub-43072c8f-268b-4608-8065-9996bb1c7129/centos/gpg Running transaction check Running transaction test Transaction test succeeded Running transaction 正在安装 : 2:container-selinux-2.36-1.gitff95335.el7.noarch 1/2 正在安装 : docker-ee-17.06.2.ee.6-3.el7.centos.x86_64 2/2 验证中 : docker-ee-17.06.2.ee.6-3.el7.centos.x86_64 1/2 验证中 : 2:container-selinux-2.36-1.gitff95335.el7.noarch 2/2 已安装: docker-ee.x86_64 0:17.06.2.ee.6-3.el7.centos 作为依赖被安装: container-selinux.noarch 2:2.36-1.gitff95335.el7 完毕！ 启动Docker$ sudo systemctl start docker 开机自动启动Docker服务$ sudo systemctl enable docker 查看Docker状态$ sudo systemctl status docker 停止Docker$ sudo systemctl stop docker 测试Docker[mingguilu@localhost ~]$ sudo docker run hello-world Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://cloud.docker.com/ For more examples and ideas, visit: https://docs.docker.com/engine/userguide/ 安装Docker-CE在线安装Docker-CE在线安装Docker-CE的步骤与Docker-EE差不多，参考官网文档：Get Docker CE for CentOS 离线安装Docker-CE下载Docker-CE的rpm包下载地址： https://download.docker.com/linux/centos/7/x86_64/stable/Packages/ [mingguilu@localhost ~]$ wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.12.1.ce-1.el7.centos.x86_64.rpm 安装Docker-CE[mingguilu@localhost ~]$ sudo yum install ./docker-ce-17.12.1.ce-1.el7.centos.x86_64.rpm 安装Docker Composecurl方式安装Docker Composecurl命令安装$ sudo curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose [mingguilu@localhost ~]$ sudo curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose [sudo] mingguilu 的密码： % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 617 0 617 0 0 68 0 --:--:-- 0:00:08 --:--:-- 138 100 8288k 100 8288k 0 0 106k 0 0:01:17 0:01:17 --:--:-- 319k 添加可执行权限[mingguilu@localhost ~]$ sudo chmod +x /usr/local/bin/docker-compose [sudo] mingguilu 的密码： [mingguilu@localhost ~]$ [mingguilu@localhost ~]$ ls -lh /usr/local/bin/docker-compose -rwxr-xr-x. 1 root root 8.1M 3月 6 12:58 /usr/local/bin/docker-compose 查看docker-compose版本[mingguilu@localhost ~]$ docker-compose --version docker-compose version 1.19.0, build 9e633ef pip方式安装安装python-pip[mingguilu@localhost ~]$ sudo yum install python-pip 已加载插件：fastestmirror Loading mirror speeds from cached hostfile * base: mirrors.sohu.com * extras: mirrors.sohu.com * updates: mirrors.sohu.com 没有可用软件包 python-pip。 错误：无须任何处理 找不到python-pip包，需先安装epel-release[mingguilu@localhost ~]$ sudo yum install -y epel-release [mingguilu@localhost ~]$ sudo yum install -y python-pip [mingguilu@localhost ~]$ sudo pip install --upgrade pip pip安装Docker-compose[mingguilu@localhost ~]$ sudo yum install -y docker-compose 已加载插件：fastestmirror Loading mirror speeds from cached hostfile * base: mirrors.sohu.com * epel: mirror01.idc.hinet.net * extras: mirrors.sohu.com * updates: mirrors.sohu.com 正在解决依赖关系 --&gt; 正在检查事务 ---&gt; 软件包 docker-compose.noarch.0.1.9.0-5.el7 将被 安装 --&gt; 正在处理依赖关系 python-docker-py &gt;= 1.10.6-1，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在处理依赖关系 python-dockerpty &gt;= 0.4.1-1，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在处理依赖关系 PyYAML，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在处理依赖关系 python-cached_property，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在处理依赖关系 python-docopt，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在处理依赖关系 python-enum34，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在处理依赖关系 python-jsonschema，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在处理依赖关系 python-requests，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在处理依赖关系 python-six，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在处理依赖关系 python-texttable，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在处理依赖关系 python-websocket-client，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在处理依赖关系 python2-backports-functools_lru_cache，它被软件包 docker-compose-1.9.0-5.el7.noarch 需要 --&gt; 正在检查事务 ---&gt; 软件包 PyYAML.x86_64.0.3.10-11.el7 将被 安装 --&gt; 正在处理依赖关系 libyaml-0.so.2()(64bit)，它被软件包 PyYAML-3.10-11.el7.x86_64 需要 ---&gt; 软件包 python-docker-py.noarch.0.1.10.6-3.el7 将被 安装 --&gt; 正在处理依赖关系 python-ipaddress，它被软件包 python-docker-py-1.10.6-3.el7.noarch 需要 --&gt; 正在处理依赖关系 python-docker-pycreds，它被软件包 python-docker-py-1.10.6-3.el7.noarch 需要 ---&gt; 软件包 python-enum34.noarch.0.1.0.4-1.el7 将被 安装 ---&gt; 软件包 python-requests.noarch.0.2.6.0-1.el7_1 将被 安装 --&gt; 正在处理依赖关系 python-urllib3 &gt;= 1.10.2-1，它被软件包 python-requests-2.6.0-1.el7_1.noarch 需要 --&gt; 正在处理依赖关系 python-chardet &gt;= 2.2.1-1，它被软件包 python-requests-2.6.0-1.el7_1.noarch 需要 ---&gt; 软件包 python-six.noarch.0.1.9.0-2.el7 将被 安装 ---&gt; 软件包 python-websocket-client.noarch.0.0.32.0-116.el7 将被 安装 ---&gt; 软件包 python2-backports-functools_lru_cache.noarch.0.1.2.1-4.el7 将被 安装 ---&gt; 软件包 python2-cached_property.noarch.0.1.3.0-7.el7 将被 安装 ---&gt; 软件包 python2-dockerpty.noarch.0.0.4.1-9.el7 将被 安装 ---&gt; 软件包 python2-docopt.noarch.0.0.6.2-7.el7 将被 安装 ---&gt; 软件包 python2-jsonschema.noarch.0.2.5.1-3.el7 将被 安装 --&gt; 正在处理依赖关系 python-repoze-lru，它被软件包 python2-jsonschema-2.5.1-3.el7.noarch 需要 ---&gt; 软件包 python2-texttable.noarch.0.0.9.1-1.el7 将被 安装 --&gt; 正在检查事务 ---&gt; 软件包 libyaml.x86_64.0.0.1.4-11.el7_0 将被 安装 ---&gt; 软件包 python-chardet.noarch.0.2.2.1-1.el7_1 将被 安装 ---&gt; 软件包 python-docker-pycreds.noarch.0.1.10.6-3.el7 将被 安装 ---&gt; 软件包 python-ipaddress.noarch.0.1.0.16-2.el7 将被 安装 ---&gt; 软件包 python-repoze-lru.noarch.0.0.4-3.el7 将被 安装 ---&gt; 软件包 python-urllib3.noarch.0.1.10.2-3.el7 将被 安装 --&gt; 解决依赖关系完成 依赖关系解决 ========================================================================================================================================================================= Package 架构 版本 源 大小 ========================================================================================================================================================================= 正在安装: docker-compose noarch 1.9.0-5.el7 epel 150 k 为依赖而安装: PyYAML x86_64 3.10-11.el7 base 153 k libyaml x86_64 0.1.4-11.el7_0 base 55 k python-chardet noarch 2.2.1-1.el7_1 base 227 k python-docker-py noarch 1.10.6-3.el7 extras 101 k python-docker-pycreds noarch 1.10.6-3.el7 extras 18 k python-enum34 noarch 1.0.4-1.el7 base 52 k python-ipaddress noarch 1.0.16-2.el7 base 34 k python-repoze-lru noarch 0.4-3.el7 epel 13 k python-requests noarch 2.6.0-1.el7_1 base 94 k python-six noarch 1.9.0-2.el7 base 29 k python-urllib3 noarch 1.10.2-3.el7 base 101 k python-websocket-client noarch 0.32.0-116.el7 extras 56 k python2-backports-functools_lru_cache noarch 1.2.1-4.el7 epel 12 k python2-cached_property noarch 1.3.0-7.el7 epel 16 k python2-dockerpty noarch 0.4.1-9.el7 epel 28 k python2-docopt noarch 0.6.2-7.el7 epel 28 k python2-jsonschema noarch 2.5.1-3.el7 epel 75 k python2-texttable noarch 0.9.1-1.el7 epel 21 k 事务概要 ========================================================================================================================================================================= 安装 1 软件包 (+18 依赖软件包) 总下载量：1.2 M 安装大小：4.8 M Downloading packages: (1/19): libyaml-0.1.4-11.el7_0.x86_64.rpm | 55 kB 00:00:00 (2/19): python-docker-pycreds-1.10.6-3.el7.noarch.rpm | 18 kB 00:00:00 (3/19): python-enum34-1.0.4-1.el7.noarch.rpm | 52 kB 00:00:00 (4/19): PyYAML-3.10-11.el7.x86_64.rpm | 153 kB 00:00:00 (5/19): python-docker-py-1.10.6-3.el7.noarch.rpm | 101 kB 00:00:00 (6/19): python-ipaddress-1.0.16-2.el7.noarch.rpm | 34 kB 00:00:00 (7/19): python-chardet-2.2.1-1.el7_1.noarch.rpm | 227 kB 00:00:00 (8/19): docker-compose-1.9.0-5.el7.noarch.rpm | 150 kB 00:00:00 (9/19): python-requests-2.6.0-1.el7_1.noarch.rpm | 94 kB 00:00:00 (10/19): python-repoze-lru-0.4-3.el7.noarch.rpm | 13 kB 00:00:00 (11/19): python2-backports-functools_lru_cache-1.2.1-4.el7.noarch.rpm | 12 kB 00:00:00 (12/19): python-six-1.9.0-2.el7.noarch.rpm | 29 kB 00:00:00 (13/19): python2-cached_property-1.3.0-7.el7.noarch.rpm | 16 kB 00:00:00 (14/19): python-urllib3-1.10.2-3.el7.noarch.rpm | 101 kB 00:00:00 (15/19): python-websocket-client-0.32.0-116.el7.noarch.rpm | 56 kB 00:00:00 (16/19): python2-dockerpty-0.4.1-9.el7.noarch.rpm | 28 kB 00:00:00 (17/19): python2-docopt-0.6.2-7.el7.noarch.rpm | 28 kB 00:00:00 (18/19): python2-jsonschema-2.5.1-3.el7.noarch.rpm | 75 kB 00:00:00 (19/19): python2-texttable-0.9.1-1.el7.noarch.rpm | 21 kB 00:00:00 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 总计 730 kB/s | 1.2 MB 00:00:01 Running transaction check Running transaction test Transaction test succeeded Running transaction 正在安装 : python-six-1.9.0-2.el7.noarch 1/19 正在安装 : python-websocket-client-0.32.0-116.el7.noarch 2/19 正在安装 : python-docker-pycreds-1.10.6-3.el7.noarch 3/19 正在安装 : python2-dockerpty-0.4.1-9.el7.noarch 4/19 正在安装 : python-urllib3-1.10.2-3.el7.noarch 5/19 正在安装 : python-ipaddress-1.0.16-2.el7.noarch 6/19 正在安装 : python-enum34-1.0.4-1.el7.noarch 7/19 正在安装 : python2-docopt-0.6.2-7.el7.noarch 8/19 正在安装 : python-chardet-2.2.1-1.el7_1.noarch 9/19 正在安装 : python-requests-2.6.0-1.el7_1.noarch 10/19 正在安装 : python-docker-py-1.10.6-3.el7.noarch 11/19 正在安装 : python2-cached_property-1.3.0-7.el7.noarch 12/19 正在安装 : libyaml-0.1.4-11.el7_0.x86_64 13/19 正在安装 : PyYAML-3.10-11.el7.x86_64 14/19 正在安装 : python2-texttable-0.9.1-1.el7.noarch 15/19 正在安装 : python-repoze-lru-0.4-3.el7.noarch 16/19 正在安装 : python2-jsonschema-2.5.1-3.el7.noarch 17/19 正在安装 : python2-backports-functools_lru_cache-1.2.1-4.el7.noarch 18/19 正在安装 : docker-compose-1.9.0-5.el7.noarch 19/19 验证中 : python2-backports-functools_lru_cache-1.2.1-4.el7.noarch 1/19 验证中 : python-docker-pycreds-1.10.6-3.el7.noarch 2/19 验证中 : python-repoze-lru-0.4-3.el7.noarch 3/19 验证中 : docker-compose-1.9.0-5.el7.noarch 4/19 验证中 : python-requests-2.6.0-1.el7_1.noarch 5/19 验证中 : python2-texttable-0.9.1-1.el7.noarch 6/19 验证中 : python2-jsonschema-2.5.1-3.el7.noarch 7/19 验证中 : libyaml-0.1.4-11.el7_0.x86_64 8/19 验证中 : python2-cached_property-1.3.0-7.el7.noarch 9/19 验证中 : python-chardet-2.2.1-1.el7_1.noarch 10/19 验证中 : python2-docopt-0.6.2-7.el7.noarch 11/19 验证中 : python-enum34-1.0.4-1.el7.noarch 12/19 验证中 : python-docker-py-1.10.6-3.el7.noarch 13/19 验证中 : python-websocket-client-0.32.0-116.el7.noarch 14/19 验证中 : PyYAML-3.10-11.el7.x86_64 15/19 验证中 : python2-dockerpty-0.4.1-9.el7.noarch 16/19 验证中 : python-ipaddress-1.0.16-2.el7.noarch 17/19 验证中 : python-six-1.9.0-2.el7.noarch 18/19 验证中 : python-urllib3-1.10.2-3.el7.noarch 19/19 已安装: docker-compose.noarch 0:1.9.0-5.el7 作为依赖被安装: PyYAML.x86_64 0:3.10-11.el7 libyaml.x86_64 0:0.1.4-11.el7_0 python-chardet.noarch 0:2.2.1-1.el7_1 python-docker-py.noarch 0:1.10.6-3.el7 python-docker-pycreds.noarch 0:1.10.6-3.el7 python-enum34.noarch 0:1.0.4-1.el7 python-ipaddress.noarch 0:1.0.16-2.el7 python-repoze-lru.noarch 0:0.4-3.el7 python-requests.noarch 0:2.6.0-1.el7_1 python-six.noarch 0:1.9.0-2.el7 python-urllib3.noarch 0:1.10.2-3.el7 python-websocket-client.noarch 0:0.32.0-116.el7 python2-backports-functools_lru_cache.noarch 0:1.2.1-4.el7 python2-cached_property.noarch 0:1.3.0-7.el7 python2-dockerpty.noarch 0:0.4.1-9.el7 python2-docopt.noarch 0:0.6.2-7.el7 python2-jsonschema.noarch 0:2.5.1-3.el7 python2-texttable.noarch 0:0.9.1-1.el7 完毕！ 查看Docker-compose版本[mingguilu@localhost ~]$ sudo docker-compose --version docker-compose version 1.9.0, build 2585387 参考文档： 《Install Docker》: https://docs.docker.com/install/ 《Get Docker EE for CentOS》: https://docs.docker.com/install/linux/docker-ee/centos/ 《Get Docker CE for CentOS》: https://docs.docker.com/install/linux/docker-ce/centos/ 《Install Docker Compose》: https://docs.docker.com/compose/install/]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RAID阵列上的Server_2012_R2忘记Administrator密码后...]]></title>
    <url>%2F2018%2F03%2F02%2FRAID%E9%98%B5%E5%88%97%E4%B8%8A%E7%9A%84Server_2012_R2%E5%BF%98%E8%AE%B0Administrator%E5%AF%86%E7%A0%81%E5%90%8E%2F</url>
    <content type="text"><![CDATA[配置了RAID5阵列的Dell服务器丢失了Administrator密码，运行着Windows Server 2012 R2，WinPE没有加载RAID驱动也无能为力，最后使用Windows Server 2012 R2的安装光盘重置了密码 从安装光盘启动 在安装程序中选择”修复计算机” 选择选项”疑难解答” 选择高级选项”命令提示符” 将Windows\system32下的osk.exe程序替换成cmd.exe程序# 进入系统盘的Windows\system32目录下 cd Windows\system32 # 将osk.exe(屏幕键盘程序)重命名做备份 rename osk.exe osk.exe.old # 拷贝cmd.exe程序并重命名为osk.exe copy cmd.exe osk.exe 选择”继续”，重启服务器到登录界面 点击”屏幕键盘”，弹出命令行终端 用DOS命令重置Administrator密码，或创建新用户# 重置Administrator密码 net user administrator New_Password # 创建新帐户 net user New_Username New_Password # 将新帐户添加到本地管理员组 net localgroup administrators New_Username 登录系统]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>Windows Server</tag>
        <tag>RAID</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker进阶-命令详解]]></title>
    <url>%2F2018%2F03%2F02%2FDocker%E8%BF%9B%E9%98%B6-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Docker版本信息docker infodocker info [OPTIONS] $ sudo docker info Containers: 3 Running: 1 Paused: 0 Stopped: 2 Images: 8 Server Version: 18.03.0-ce Storage Driver: overlay2 Backing Filesystem: extfs Supports d_type: true Native Overlay Diff: false Logging Driver: json-file Cgroup Driver: cgroupfs Plugins: Volume: local Network: bridge host macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog Swarm: inactive Runtimes: runc Default Runtime: runc Init Binary: docker-init containerd version: cfd04396dc68220d1cecbe686a6cc3aa5ce3667c runc version: 4fc53a81fb7c994640722ac585fa9ca548971871 init version: 949e6fa Security Options: seccomp Profile: default Kernel Version: 4.14.30-1-MANJARO Operating System: Manjaro Linux OSType: linux Architecture: x86_64 CPUs: 4 Total Memory: 11.63GiB Name: brick ID: N2PS:JU6L:LEPJ:3WPU:PGGR:6LFK:H5OZ:OYCA:A2KU:FTZE:JVBO:PZGQ Docker Root Dir: /var/lib/docker Debug Mode (client): false Debug Mode (server): false Registry: https://index.docker.io/v1/ Labels: Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false docker versiondocker version [OPTIONS] $ sudo docker version Client: Version: 18.03.0-ce API version: 1.37 Go version: go1.10 Git commit: 0520e24302 Built: Fri Mar 23 01:47:41 2018 OS/Arch: linux/amd64 Experimental: false Orchestrator: swarm Server: Engine: Version: 18.03.0-ce API version: 1.37 (minimum version 1.12) Go version: go1.10 Git commit: 0520e24302 Built: Fri Mar 23 01:48:12 2018 OS/Arch: linux/amd64 Experimental: false docker -v$ sudo docker -v Docker version 18.03.0-ce, build 0520e24302 Docker镜像仓库docker login登录到docker镜像仓库： docker login [OPTIONS] [SERVER] Options: -p, 登录密码 -u, 登录用户名 Server： 如果未指定镜像仓库地址，默认为官方仓库 Docker Hub $ sudo docker login -u admin -p Harbor12345 172.29.20.54 WARNING! Using --password via the CLI is insecure. Use --password-stdin. Login Succeeded docker logout登出docker镜像仓库： docker logout [SERVER] Server： 如果未指定镜像仓库地址，默认为官方仓库 Docker Hub $ sudo docker logout 172.29.20.54 Removing login credentials for 172.29.20.54 docker search从镜像仓库中查找镜像： docker search [OPTIONS] TERM Options: -f, --filter filter 显示过滤后的搜索结果 --format string ？ --limit int 指定显示的搜索结果数量 --no-trunc 显示完整的镜像描述 搜索nginx镜像，显示前5个，并显示完整的描述信息 $ sudo docker search --limit 5 --no-trunc nginx NAME DESCRIPTION STARS OFFICIAL AUTOMATED nginx Official build of Nginx. 8309 [OK] jwilder/nginx-proxy Automated Nginx reverse proxy for docker containers 1309 [OK] richarvey/nginx-php-fpm Container running Nginx + PHP-FPM capable of pulling application code from git 544 [OK] jrcs/letsencrypt-nginx-proxy-companion LetsEncrypt container to use with nginx as proxy 341 [OK] nginxdemos/nginx-ingress NGINX Ingress Controller for Kubernetes 10 搜索官方的并且stars数量不少于1000的apache镜像 $ sudo docker search --filter &quot;is-official=true&quot; --filter &quot;stars=1000&quot; apache NAME DESCRIPTION STARS OFFICIAL AUTOMATED tomcat Apache Tomcat is an open source implementati… 1790 [OK] httpd The Apache HTTP Server Project 1618 [OK] docker pull从镜像仓库中拉取一个镜像： docker pull [OPTIONS] NAME[:TAG|@DIGEST] Options: -a, --all-tags 拉取所有tagged的镜像 --disable-content-trust 忽略镜像的校验，默认开启 $ sudo docker pull jenkins Using default tag: latest latest: Pulling from library/jenkins c73ab1c6897b: Pull complete 1ab373b3deae: Pull complete b542772b4177: Pull complete 57c8de432dbe: Pull complete da44f64ae999: Pull complete 0bbc7b377a91: Pull complete 1b6c70b3786f: Pull complete d9bbcf733166: Pull complete b1d3e8de8ec6: Pull complete c1455927bc48: Pull complete 1d3c626322f1: Pull complete 23612106c74c: Pull complete 596d10c47bfa: Pull complete 62e8d5201cdb: Pull complete 2c3d92fb5e98: Pull complete bc5965f9d105: Pull complete 6816953234b3: Pull complete e49ca30dec01: Pull complete 0713317dfd5a: Pull complete 522ab7b13eb6: Pull complete Digest: sha256:93263adb6ab1ecb240b342a9e62e782c5b46d4d87cd01830021d1dfe89acb518 Status: Downloaded newer image for jenkins:latest docker push上传本地镜像到镜像仓库，要先登录到镜像仓库： docker push [OPTIONS] NAME[:TAG] Options: --disable-content-trust 忽略镜像的校验，默认开启 $ sudo docker pull hello-world Using default tag: latest latest: Pulling from library/hello-world Digest: sha256:97ce6fa4b6cdc0790cda65fe7290b74cfebd9fa0c9b8c38e979330d547d22ce1 Status: Image is up to date for hello-world:latest 本地镜像管理docker images列出本地镜像： docker images [OPTIONS] [REPOSITORY[:TAG]] Options: -a, --all 列出所有镜像(包含中间映像层) --digests 显示摘要信息 -f, --filter filter 显示满足条件的的镜像 --format string 指定返回值的模板文件 --no-trunc 显示完整的镜像信息 -q, --quiet 只显示镜像ID号 $ sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE hello_docker latest d68de571b8bb 3 days ago 4.15MB nginx latest 7f70b30f2cc6 2 weeks ago 109MB jenkins latest 7b210b6c238a 2 weeks ago 801MB ubuntu latest f975c5035748 4 weeks ago 112MB centos latest 2d194b392dd1 4 weeks ago 195MB vbkunin/itop latest a5748269b591 2 months ago 608MB alpine latest 3fd9065eaf02 2 months ago 4.15MB hello-world latest f2a91732366c 4 months ago 1.85kB docker rmi删除本地一个或多个镜像： docker rmi [OPTIONS] IMAGE [IMAGE...] Options: -f, --force 强制删除 --no-prune 不移除该镜像的过程镜像，默认移除 当镜像正在被容器使用时，需先删除对应的容器，再删除镜像 $ sudo docker rmi hello_docker Error response from daemon: conflict: unable to remove repository reference &quot;hello_docker&quot; (must force) - container 0581f2e3a913 is using its referenced image d68de571b8bb 或者使用 -f 选项强制删除镜像 $ sudo docker rmi -f hello_docker Untagged: hello_docker:latest Deleted: sha256:d68de571b8bb337b0d0b43a088745d49d293044fbf0491568cd607b119ac560b Deleted: sha256:07768e3639e3895fe2dc11d28860b24694c201633e6dc2af3ae67e27d6e41fa8 docker tag标记本地镜像，将其归入某一仓库： docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] $ sudo docker tag jenkins:latest 172.29.20.54/devops/jenkins:latest $ sudo docker images | grep jenkins 172.29.20.54/devops/jenkins latest 7b210b6c238a 2 weeks ago 801MB jenkins latest 7b210b6c238a 2 weeks ago 801MB docker history查看指定镜像的创建历史： docker history [OPTIONS] IMAGE Options: --format string -H, --human 以可读的格式打印镜像大小和日期，默认为true --no-trunc 显示完整的提交记录 -q, --quiet 仅列出提交记录ID $ sudo docker history nginx IMAGE CREATED CREATED BY SIZE COMMENT 7f70b30f2cc6 2 weeks ago /bin/sh -c #(nop) CMD [&quot;nginx&quot; &quot;-g&quot; &quot;daemon… 0B &lt;missing&gt; 2 weeks ago /bin/sh -c #(nop) STOPSIGNAL [SIGTERM] 0B &lt;missing&gt; 2 weeks ago /bin/sh -c #(nop) EXPOSE 80/tcp 0B &lt;missing&gt; 2 weeks ago /bin/sh -c ln -sf /dev/stdout /var/log/nginx… 22B &lt;missing&gt; 2 weeks ago /bin/sh -c set -x &amp;&amp; apt-get update &amp;&amp; apt… 53.4MB &lt;missing&gt; 2 weeks ago /bin/sh -c #(nop) ENV NJS_VERSION=1.13.10.0… 0B &lt;missing&gt; 2 weeks ago /bin/sh -c #(nop) ENV NGINX_VERSION=1.13.10… 0B &lt;missing&gt; 3 weeks ago /bin/sh -c #(nop) LABEL maintainer=NGINX Do… 0B &lt;missing&gt; 3 weeks ago /bin/sh -c #(nop) CMD [&quot;bash&quot;] 0B &lt;missing&gt; 3 weeks ago /bin/sh -c #(nop) ADD file:e3250bb9848f956bd… 55.3MB docker save将指定一个或多个镜像保存成tar归档文件： docker save [OPTIONS] IMAGE [IMAGE...] Options: -o, --output string 输出到文件 $ sudo docker save -o nginx.tar nginx $ ll -rw------- 1 root root 108M 4月 7 18:20 nginx.tar docker import从归档文件中创建镜像： docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]] Options: -c, --change list 应用docker指令创建镜像 -m, --message string 提交时的说明文字 $ sudo docker import nginx.tar nginx:v1.0 sha256:a04ebdfe23cc08d2c1511fb95af4d39f51937d26425f644a5b6d02b10e9f90e9 $ sudo docker images nginx REPOSITORY TAG IMAGE ID CREATED SIZE nginx v1.0 a04ebdfe23cc About a minute ago 113MB nginx latest c5c4e8fa2cf7 3 days ago 109MB 容器生命周期管理docker run创建一个新的容器并运行一个命令： docker run [OPTIONS] IMAGE [COMMAND] [ARG...] Options: -a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项； -d 后台运行容器，并返回容器ID -i 以交互模式运行容器，通常与 -t 同时使用 -t 为容器重新分配一个伪输入终端，通常与 -i 同时使用 -P 将容器的80端口映射到主机随机端口 -p hostPort:containerPort 将容器的指定端口映射到主机指定端口 -v 将主机文件系统挂载到容器中 --name &quot;container_name&quot; 为容器指定一个名称 --dns 8.8.8.8 指定容器使用的DNS服务器，默认和宿主一致 --dns-search example.com 指定容器DNS搜索域名，默认和宿主一致 -h &quot;jenkins-01&quot; 指定容器的hostname -e username=&quot;ritchie&quot; 设置环境变量 --env-file=[] 从指定文件读入环境变量 --cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot; 绑定容器到指定CPU运行 -m 设置容器使用内存最大值 --net=&quot;bridge&quot; 指定容器的网络连接类型，支持 bridge/host/none/container 四种类型 --link=[] 添加链接到另一个容器 --expose=[] 开放一个端口或一组端口 $ sudo docker run --name contos_python_version centos python --version Python 2.7.5 $ sudo docker run --name myblog -p 8888:80 -v /home/mingguilu/helloworld/blog/blog_mingguilu_com/public/:/usr/share/nginx/html/ -d nginx 84da58fef876dd1b7d06190faedf549412c64e51b77306757abe31902727e089 $ sudo docker run -it --name ubuntu_test -h srv-ubuntu-01 ubuntu root@srv-ubuntu-01:/# hostname srv-ubuntu-01 root@srv-ubuntu-01:/# cat /etc/issue Ubuntu 16.04.4 LTS \n \l root@srv-ubuntu-01:/# exit docker start|stop|restart启动一个或多少已经被停止的容器： docker start [OPTIONS] CONTAINER [CONTAINER...] Options: -a, --attach --detach-keys string -i, --interactive 停止一个或多个正在运行的容器： docker stop [OPTIONS] CONTAINER [CONTAINER...] Options: -t, --time int 停止容器前等待秒数(默认10秒) 重启一个或多个容器： docker restart [OPTIONS] CONTAINER [CONTAINER...] Options: -t, --time int 停止容器前等待秒数(默认10秒) $ sudo docker stop nginx_01 nginx_01 $ sudo docker start nginx_01 nginx_01 $ sudo docker restart nginx_01 nginx_01 docker kill杀掉一个或多个运行中的容器： docker kill [OPTIONS] CONTAINER [CONTAINER...] Options: -s, --signal string 向容器发送一个信号(默认是KILL) $ sudo docker kill nginx_01 blog nginx_01 blog docker rm删除一个或多个容器： docker rm [OPTIONS] CONTAINER [CONTAINER...] Options: -f, --force 通过SIGKILL信号强制删除一个运行中的容器 -l, --link 移除容器间的网络连接，而非容器本身 -v, --volumes 删除与容器关联的卷 $ sudo docker rm nginx_01 Error response from daemon: You cannot remove a running container a3e3652e596307a45c31e93e33eee28756ea9bfc2ca78e3a41cde7638c65d4dd. Stop the container before attempting removal or force remove $ sudo docker rm -f nginx_01 nginx_01 docker pause|unpause暂停容器中的所有进程： docker pause CONTAINER [CONTAINER...] 恢复容器中的所有进程： docker unpause CONTAINER [CONTAINER...] $ sudo docker run --name nginx_01 -p 8080:80 -d nginx 8392aaad023227a17dfa01a84782fa371b57995c5ad4ad457a8252b3ebcedc98 在浏览器中访问 http://localhost:8080 可访问到“Welcome to nginx ！” $ sudo docker pause nginx_01 nginx_01 http://localhost:8080 访问失败 $ sudo docker unpause nginx_01 nginx_01 http://localhost:8080 恢复正常访问 docker create创建一个新的容器但不启动它 docker create [OPTIONS] IMAGE [COMMAND] [ARG...] Options： 选项同 docker run docker exec在运行的容器中执行命令： docker exec [OPTIONS] CONTAINER COMMAND [ARG...] Options: -d, --detach 在后台运行 --detach-keys string ？ -e, --env list ？ -i, --interactive 即使没有附加也保持STDIN 打开 --privileged ？ -t, --tty 分配一个伪终端 -u, --user string 用户名或用户ID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]) -w, --workdir string ？ $ sudo docker exec -it nginx_01 /bin/bash root@8392aaad0232:/# ls /usr/share/nginx/html/ 50x.html index.html root@8392aaad0232:/# root@8392aaad0232:/# echo $HOSTNAME 8392aaad0232 root@8392aaad0232:/# echo $SHELL /bin/bash root@8392aaad0232:/# cat /etc/issue Debian GNU/Linux 9 \n \l 容器操作docker ps列出容器： docker ps [OPTIONS] Options: -a, --all 显示所有容器，包括未运行的(默认只显示正在运行的) -f, --filter filter 根据条件过滤显示的内容 --format string ？ -n, --last int 列出最近创建的n个容器 -l, --latest 显示最近创建的容器 --no-trunc 显示完整的描述信息 -q, --quiet 静默模式，只显示容器编号 -s, --size 显示总的文件大小 $ sudo docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8392aaad0232 nginx &quot;nginx -g &apos;daemon of…&quot; About an hour ago Up About an hour 0.0.0.0:8080-&gt;80/tcp nginx_01 ab11f19d41e2 centos &quot;python --version&quot; 2 hours ago Exited (0) About an hour ago contos_python_version docker inspect获取容器/镜像的元数据: docker inspect [OPTIONS] NAME|ID [NAME|ID...] Options: -f, --format string 指定返回值的模板文件 -s, --size 显示总的文件大小 --type string 为指定类型返回JSON $ sudo docker inspect nginx_01 [ { &quot;Id&quot;: &quot;8392aaad023227a17dfa01a84782fa371b57995c5ad4ad457a8252b3ebcedc98&quot;, &quot;Created&quot;: &quot;2018-04-07T15:42:23.457108312Z&quot;, &quot;Path&quot;: &quot;nginx&quot;, &quot;Args&quot;: [ &quot;-g&quot;, &quot;daemon off;&quot; ], &quot;State&quot;: { &quot;Status&quot;: &quot;running&quot;, &quot;Running&quot;: true, &quot;Paused&quot;: false, &quot;Restarting&quot;: false, &quot;OOMKilled&quot;: false, &quot;Dead&quot;: false, &quot;Pid&quot;: 20734, &quot;ExitCode&quot;: 0, &quot;Error&quot;: &quot;&quot;, &quot;StartedAt&quot;: &quot;2018-04-07T15:42:25.014574543Z&quot;, &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot; }, &quot;Image&quot;: &quot;sha256:c5c4e8fa2cf7d87545ed017b60a4b71e047e26c4ebc71eb1709d9e5289f9176f&quot;, ...... &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;, &quot;Networks&quot;: { &quot;bridge&quot;: { &quot;IPAMConfig&quot;: null, &quot;Links&quot;: null, &quot;Aliases&quot;: null, &quot;NetworkID&quot;: &quot;676ba707a1c7a0d1ad85ba67ec496848c267b1e89f18bccbabd0036534daf0e9&quot;, &quot;EndpointID&quot;: &quot;d1112dc2ede132a1447b4265402995328004c9e808ea8bcb47a18d958046ebb7&quot;, &quot;Gateway&quot;: &quot;172.17.0.1&quot;, &quot;IPAddress&quot;: &quot;172.17.0.2&quot;, &quot;IPPrefixLen&quot;: 16, &quot;IPv6Gateway&quot;: &quot;&quot;, &quot;GlobalIPv6Address&quot;: &quot;&quot;, &quot;GlobalIPv6PrefixLen&quot;: 0, &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;, &quot;DriverOpts&quot;: null } } } } ] 获取正在运行的容器nginx_01的IP地址： $ sudo docker inspect --format=&apos;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&apos; nginx_01 172.17.0.2 docker top查看容器中运行的进程信息，支持ps命令参数: docker top CONTAINER [ps OPTIONS] $ sudo docker top nginx_01 UID PID PPID C STIME TTY TIME CMD root 20734 20716 0 4月07 ? 00:00:00 nginx: master process nginx -g daemon off; 101 20778 20734 0 4月07 ? 00:00:00 nginx: worker process docker events从服务器获取实时事件： docker events [OPTIONS] Options: -f, --filter filter 根据条件过滤事件 --format string --since string 从指定的时间戳后显示所有事件 --until string 流水时间显示到指定的时间为止 $ sudo docker events -f &quot;image&quot;=&quot;nginx&quot; --since=&quot;1467302400&quot; 2018-04-07T22:35:43.908389121+08:00 container create 7054f2265ba8fc5852666b4ecf53b4e3b670157476f86c99c83136a2f8d382ea (image=nginx, maintainer=NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;, name=nginx_01) 2018-04-07T22:35:43.909712905+08:00 container attach 7054f2265ba8fc5852666b4ecf53b4e3b670157476f86c99c83136a2f8d382ea (image=nginx, maintainer=NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;, name=nginx_01) 2018-04-07T22:35:45.509956611+08:00 container start 7054f2265ba8fc5852666b4ecf53b4e3b670157476f86c99c83136a2f8d382ea (image=nginx, maintainer=NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;, name=nginx_01) ...... docker logs获取容器的日志： docker logs [OPTIONS] CONTAINER Options: --details 显示额外的详细信息 -f, --follow 跟踪日志输出 --since string 显示某个开始时间的所有日志(e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes) --tail string 仅列出最新N条容器日志(默认全部) -t, --timestamps 显示时间戳 --until string 显示到指定的时间为止(e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes) $ sudo docker logs -f nginx_01 172.17.0.1 - - [07/Apr/2018:15:42:36 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot; &quot;-&quot; 172.17.0.1 - - [07/Apr/2018:15:43:26 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot; &quot;-&quot; 172.17.0.1 - - [07/Apr/2018:15:43:26 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot; &quot;-&quot; 172.17.0.1 - - [07/Apr/2018:15:43:26 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot; &quot;-&quot; ...... $ sudo docker logs --tail 3 nginx_01 172.17.0.1 - - [07/Apr/2018:16:46:07 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot; &quot;-&quot; 2018/04/07 16:46:12 [error] 8#8: *14 open() &quot;/usr/share/nginx/html/index.jsp&quot; failed (2: No such file or directory), client: 172.17.0.1, server: localhost, request: &quot;GET /index.jsp HTTP/1.1&quot;, host: &quot;localhost:8080&quot; 172.17.0.1 - - [07/Apr/2018:16:46:12 +0000] &quot;GET /index.jsp HTTP/1.1&quot; 404 572 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot; &quot;-&quot; docker wait阻塞运行直到容器停止，然后打印出它的退出代码 docker wait CONTAINER [CONTAINER...] 先在一个终端运行docker wait … $ sudo docker wait nginx_01 然后在另一个终端停止容器 $ sudo docker stop nginx_01 nginx_01 在第一个终端看到推出代码 0 $ sudo docker wait nginx_01 0 docker export将容器作为打包成一个tar归档文件： docker export [OPTIONS] CONTAINER Export a container&apos;s filesystem as a tar archive Options: -o, --output string 输入到一个文件 $ sudo docker export -o nginx-01.tar nginx_01 $ ll -rw------- 1 root root 106M 4月 8 01:17 nginx-01.tar 注意： docker save 是将镜像打包成文件，docker export 是将容器打包成文件 docker port列出指定的容器的端口映射： docker port CONTAINER [PRIVATE_PORT[/PROTO]] $ sudo docker port blog.mingguilu.com 80/tcp -&gt; 0.0.0.0:8888 容器rootfs命令docker commit从容器创建一个新的镜像： docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]] Options: -a, --author string 作者 (e.g., &quot;John Hannibal Smith &lt;hannibal@a-team.com&gt;&quot;) -c, --change list 使用Dockerfile指令来创建镜像 -m, --message string 提交时的说明文字 -p, --pause 在提交时，将容器暂停(默认会暂停) $ sudo docker commit -a &quot;Minguilu &lt;luminggui0214@gmail.com&gt;&quot; -m &quot;MingguiLu&apos;s blog page&quot; blog.mingguilu.com myblog:v1 sha256:793f080e94e00249b6c7b1c62c0ccdd2818b1c14f986fdcd7c35ab45064e056d $ sudo docker images myblog:v1 REPOSITORY TAG IMAGE ID CREATED SIZE myblog v1 793f080e94e0 9 seconds ago 109MB docker cp用户容器与主机之间的数据拷贝： docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|- docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH Options: -a, --archive 归档模式(拷贝全被的用户或用户ID的信息) -L, --follow-link 保持源目标中的链接 $ sudo docker cp helloworld/html/index.html blog.mingguilu.com:/usr/share/nginx/html/ docker diff检查容器里文件结构的更改： docker diff CONTAINER $ sudo docker diff blog.mingguilu.com C /run A /run/nginx.pid C /var C /var/cache C /var/cache/nginx A /var/cache/nginx/client_temp A /var/cache/nginx/fastcgi_temp A /var/cache/nginx/proxy_temp A /var/cache/nginx/scgi_temp A /var/cache/nginx/uwsgi_temp 参考文档 《Docker 命令大全》 http://www.runoob.com/docker/docker-command-manual.html]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>container</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker入门]]></title>
    <url>%2F2018%2F03%2F01%2FDocker%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Docker简介Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台器 安装Docker我当前使用的系统版本是： Linux Mint 18.2 Cinnamon 64-bit 可以参考官方文档使用apt-get安装：Get Docker CE for Ubuntu ,也可通过下面命令安装 使用命令安装最新版Docker：mingguilu@Brick ~ $ sudo wget -qO- https://get.docker.com | sh [sudo] mingguilu 的密码： # Executing docker install script, commit: 5f7af95 + sudo -E sh -c apt-get update -qq &gt;/dev/null + sudo -E sh -c apt-get install -y -qq apt-transport-https ca-certificates curl &gt;/dev/null + sudo -E sh -c curl -fsSL &quot;https://download.docker.com/linux/debian/gpg&quot; | apt-key add -qq - &gt;/dev/null + sudo -E sh -c echo &quot;deb [arch=amd64] https://download.docker.com/linux/debian stretch edge&quot; &gt; /etc/apt/sources.list.d/docker.list + [ debian = debian ] + [ stretch = wheezy ] + sudo -E sh -c apt-get update -qq &gt;/dev/null + sudo -E sh -c apt-get install -y -qq --no-install-recommends docker-ce &gt;/dev/null + sudo -E sh -c docker version Client: Version: 18.02.0-ce API version: 1.36 Go version: go1.9.3 Git commit: fc4de44 Built: Wed Feb 7 21:16:25 2018 OS/Arch: linux/amd64 Experimental: false Orchestrator: swarm Server: Engine: Version: 18.02.0-ce API version: 1.36 (minimum version 1.12) Go version: go1.9.3 Git commit: fc4de44 Built: Wed Feb 7 21:14:59 2018 OS/Arch: linux/amd64 Experimental: false If you would like to use Docker as a non-root user, you should now consider adding your user to the &quot;docker&quot; group with something like: sudo usermod -aG docker mingguilu Remember that you will have to log out and back in for this to take effect! WARNING: Adding a user to the &quot;docker&quot; group will grant the ability to run containers which can be used to obtain root privileges on the docker host. Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface for more information. 注意安装完后提示需要将非root权限用户添加到docker组，这样运行docker命令前不需要sudo了 添加用户到docker组sudo usermod -aG docker mingguilu 查看已安装的Docker信息mingguilu@Brick ~ $ docker info Containers: 0 Running: 0 Paused: 0 Stopped: 0 Images: 0 Server Version: 18.02.0-ce Storage Driver: overlay2 Backing Filesystem: extfs Supports d_type: true Native Overlay Diff: true Logging Driver: json-file Cgroup Driver: cgroupfs Plugins: Volume: local Network: bridge host macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog Swarm: inactive Runtimes: runc Default Runtime: runc Init Binary: docker-init containerd version: 9b55aab90508bd389d7654c4baf173a981477d55 runc version: 9f9c96235cc97674e935002fc3d78361b696a69e init version: 949e6fa Security Options: apparmor seccomp Profile: default Kernel Version: 4.8.0-53-generic Operating System: Linux Mint 18.2 OSType: linux Architecture: x86_64 CPUs: 4 Total Memory: 11.46GiB Name: Brick ID: 2NP7:D6CP:UHT4:PJP2:IXBT:LTP6:PL3N:EXVB:TA4O:C2WR:IP6N:AYQM Docker Root Dir: /var/lib/docker Debug Mode (client): false Debug Mode (server): false Registry: https://index.docker.io/v1/ Labels: Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false WARNING: No swap limit support Docker的基本架构和常用命令Docker的基本架构 Docer的常用命令 docker pull 拉取image(镜像) docker build 创建image docker images 列出image docker run 运行container(容器) docker ps 列出正在运行的container docker ps -a 列出包括停止的container docker rm 删除已经停止的container docker rmi 删除image docker cp 在host和container之间拷贝文件 docker commit 保存改动为新的image 更多的docker命令可执行docker或docker –help查看 Docker命令实战Docker安装完成时host上还没有任何的镜像和容器mingguilu@Brick ~/helloworld/docker $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE mingguilu@Brick ~/helloworld/docker $ mingguilu@Brick ~/helloworld/docker $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES mingguilu@Brick ~/helloworld/docker $ 使用ubuntu的镜像运行一个容器，用来打印一句”hello docker”mingguilu@Brick ~/helloworld/docker $ docker run ubuntu echo hello docker Unable to find image &apos;ubuntu:latest&apos; locally latest: Pulling from library/ubuntu 1be7f2b886e8: Pull complete 6fbc4a21b806: Pull complete c71a6f8e1378: Pull complete 4be3072e5a37: Pull complete 06c6d2f59700: Pull complete Digest: sha256:e46251ecd3548065ca203df31bdcf25e53b530b9b39bd3a86ac8147b347bb7ac Status: Downloaded newer image for ubuntu:latest hello docker 由于本地host上并没有ubuntu的镜像，Docker会自动在线上镜像仓库拉取一个最新版的到本地host，并运行一个打印”hello docker”的容器，在最后一行可以看到”hello world”被打印出来 再查看一下镜像和容器mingguilu@Brick ~/helloworld/docker $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu latest 0458a4468cbc 4 weeks ago 112MB mingguilu@Brick ~/helloworld/docker $ mingguilu@Brick ~/helloworld/docker $ docker ps mingguilu@Brick ~/helloworld/docker $ mingguilu@Brick ~/helloworld/docker $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8528c567160 ubuntu &quot;echo hello docker&quot; 8 minutes ago Exited (0) 8 minutes ago nostalgic_hawking mingguilu@Brick ~/helloworld/docker $ 可以看一个刚拉取的镜像：名称为ubuntu，标签为latest，镜像ID号为0458a4468cbc，创建于4周前，大小为112M 执行docker ps没有返回信息，这是因为Docker ps只能查看运行中的容器，上面运行的容器在打印出”hello docker”之后就自动停止了 执行docker ps -a就可以看到当前停止状态的容器：容器ID号为0458a4468cbc,运行在镜像ubuntu上，执行一条echo hello docker的命令，创建并停止于8分钟之前，没有端口映射信息，（NAMES=nostalgic_hawking 我暂时还不明白） 删除镜像ubuntumingguilu@Brick ~/helloworld/docker $ docker rmi 0458a4468cbc Error response from daemon: conflict: unable to delete 0458a4468cbc (must be forced) - image is being used by stopped container 8528c5671605 删除时报错了：无法删除镜像0458a4468cbc,因为停止中的容器0458a4468cbc正在使用；此时必须先删除容器，才能删除镜像 mingguilu@Brick ~/helloworld/docker $ docker rm 8528c5671605 8528c5671605 mingguilu@Brick ~/helloworld/docker $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES mingguilu@Brick ~/helloworld/docker $ docker rmi 0458a4468cbc Untagged: ubuntu:latest Untagged: ubuntu@sha256:e46251ecd3548065ca203df31bdcf25e53b530b9b39bd3a86ac8147b347bb7ac Deleted: sha256:0458a4468cbceea0c304de953305b059803f67693bad463dcbe7cce2c91ba670 Deleted: sha256:77e6ddba346d8ad1e436256f6373dede5af4002006981b7d4116c561c759cefa Deleted: sha256:8db758ab2fdb54da0aec53aeac876934337e6170f5a8c8872b3d4171e3d465b7 Deleted: sha256:a7fc6b405fe8ef71edfa6163d1dc9f1cb1df426049eefaa7d388e9df21a061ad Deleted: sha256:5a3e35538f7f2e2727c8ac92f08c30002b9e8a77737de0dab91244344d59f69b Deleted: sha256:ff986b10a018b48074e6d3a68b39aad8ccc002cdad912d4148c0f92b3729323e mingguilu@Brick ~/helloworld/docker $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE mingguilu@Brick ~/helloworld/docker $ 使用Dockerfile创建docker镜像创建一个目录，目录名随意mingguilu@Brick ~/helloworld/docker $ mkdir image01 mingguilu@Brick ~/helloworld/docker $ cd image01/ 创建一个名称为Dockerfile的文件mingguilu@Brick ~/helloworld/docker/image01 $ touch Dockerfile mingguilu@Brick ~/helloworld/docker/image01 $ vim Dockerfile mingguilu@Brick ~/helloworld/docker/image01 $ mingguilu@Brick ~/helloworld/docker/image01 $ cat Dockerfile # 指定基础镜像 FROM alpine:latest # 指定镜像的创作者 MAINTAINER MingguiLu # 指定要执行的命令 CMD echo &quot;hello docker&quot; 使用Dockerfile文件生成一个镜像docker build -t hello_docker:v1.0 . -t 可以指定镜像的Name:Tag，如果不指定Tag，缺省为latest . 表示把当前路径下的所有内容都提供给docker创建镜像 mingguilu@Brick ~/helloworld/docker/image01 $ docker build -t hello_docker:v1.0 . Sending build context to Docker daemon 2.048kB Step 1/3 : FROM alpine:latest latest: Pulling from library/alpine ff3a5c916c92: Pull complete Digest: sha256:ed8059bd90dd8cd6b7bfddedc7bba0f7555f766a00daf6a6efc86fa3339c09ef Status: Downloaded newer image for alpine:latest ---&gt; 3fd9065eaf02 Step 2/3 : MAINTAINER MingguiLu ---&gt; Running in 2325cc668fe9 Removing intermediate container 2325cc668fe9 ---&gt; ed63ade16825 Step 3/3 : CMD echo &quot;hello docker&quot; ---&gt; Running in 3560d853a35f Removing intermediate container 3560d853a35f ---&gt; 5fb36ba2abe8 Successfully built 5fb36ba2abe8 Successfully tagged hello_docker:v1.0 运行创建的镜像如果镜像标签不是缺省的latest，需要同时指定Name:Tag，或直接使用镜像ID号 mingguilu@Brick ~/helloworld/docker $ docker run hello_docker Unable to find image &apos;hello_docker:latest&apos; locally docker: Error response from daemon: pull access denied for hello_docker, repository does not exist or may require &apos;docker login&apos;. See &apos;docker run --help&apos;. mingguilu@Brick ~/helloworld/docker/image01 $ mingguilu@Brick ~/helloworld/docker/image01 $ docker run hello_docker:v1.0 hello docker mingguilu@Brick ~/helloworld/docker/image01 $ docker run 5fb36ba2abe8 hello docker 使用Docker快速搭建一个Nginx网站服务器拉取一个nginx镜像mingguilu@Brick ~/helloworld/docker $ docker pull nginx Using default tag: latest latest: Pulling from library/nginx 8176e34d5d92: Pull complete 5b19c1bdd74b: Pull complete 4e9f6296fa34: Pull complete Digest: sha256:c8db985772160427261dc443e62cab3e07212f7d52a18093d29f561b767bccb2 Status: Downloaded newer image for nginx:latest mingguilu@Brick ~/helloworld/docker $ mingguilu@Brick ~/helloworld/docker $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE hello_docker v1.0 5fb36ba2abe8 37 minutes ago 4.15MB nginx latest e548f1a579cf 8 days ago 109MB alpine latest 3fd9065eaf02 7 weeks ago 4.15MB 运行nginx镜像（实际是运行一个基于nginx镜像的容器）mingguilu@Brick ~/helloworld/docker $ docker run -p 8080:80 -d nginx d0dc27c2df7dc531db13407f43f4a98f860f1862e810353073529d14646a0dfe mingguilu@Brick ~/helloworld/docker $ mingguilu@Brick ~/helloworld/docker $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d0dc27c2df7d nginx &quot;nginx -g &apos;daemon of…&quot; 8 seconds ago Up 7 seconds 0.0.0.0:8080-&gt;80/tcp suspicious_williams 打开浏览器，访问http://localhost:8080 将host上的网页文件拷贝到容器里创建一个简单的网页文件 mingguilu@Brick ~/helloworld/docker $ touch index.htm mingguilu@Brick ~/helloworld/docker $ vim index.html mingguilu@Brick ~/helloworld/docker $ mingguilu@Brick ~/helloworld/docker $ cat index.html &lt;html&gt; &lt;h1&gt;Docker is fun !&lt;/h1&gt; &lt;/html&gt; 拷贝网页文件到容器的内部 mingguilu@Brick ~/helloworld/docker $ docker cp index.html d0dc27c2df7d:/usr/share/nginx/html 在浏览器刷新页面 此时如果将当前容器停止运行后再重新运行，之前改动过的网页文件就没有了 将改动了网页文件的容器保存为一个新的镜像mingguilu@Brick ~/helloworld/docker $ docker commit -m &apos;fun&apos; d0dc27c2df7d nginx-docker-fun sha256:fdf410b966035c9b05ed8dc1167d1ddd7ecc0c269e610672c40e7e399bb2d01b mingguilu@Brick ~/helloworld/docker $ mingguilu@Brick ~/helloworld/docker $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE nginx-docker-fun latest fdf410b96603 21 seconds ago 109MB hello_docker v1.0 5fb36ba2abe8 About an hour ago 4.15MB nginx latest e548f1a579cf 8 days ago 109MB alpine latest 3fd9065eaf02 7 weeks ago 4.15MB 停止运行当前容器，运行保存的新镜像mingguilu@Brick ~/helloworld/docker $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d0dc27c2df7d nginx &quot;nginx -g &apos;daemon of…&quot; 28 minutes ago Up 28 minutes 0.0.0.0:8080-&gt;80/tcp suspicious_williams mingguilu@Brick ~/helloworld/docker $ mingguilu@Brick ~/helloworld/docker $ docker stop d0dc27c2df7d d0dc27c2df7d mingguilu@Brick ~/helloworld/docker $ mingguilu@Brick ~/helloworld/docker $ docker run -p 8080:80 -d nginx-docker-fun ac52de709f13d7aaa96d8e67ad7bb60c2bbdd7624acb2ab0d9327547ecff1b02 刷新浏览器，依然可以看到”Docker is fun !” 《Docker入门》课程学习地址： https://www.imooc.com/learn/867 Docker中文社区：http://www.docker.org.cn/index.html]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>container</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下的git_clone问题]]></title>
    <url>%2F2017%2F08%2F10%2FWindows%E4%B8%8B%E7%9A%84git_clone%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[近期为了方便学习数据挖掘与数据分析，将系统由Linux Mint换回windows10开发者预览版，并安装了Ubuntu on Windows 10，由于硬盘格式化了，需要从Github上克隆博客代码，却遇到了问题。 Windows10的分区挂载在Ubuntu on Windows 10的/mnt目录下，ls可以看到Windows的C、D两个分区 mingguilu@DESKTOP-KME2TBI:~$ cd /mnt/ mingguilu@DESKTOP-KME2TBI:/mnt$ ls c d mingguilu@DESKTOP-KME2TBI:/mnt$ 准备将博客代码克隆到D盘下，便于Windows和Ubuntu都能操作，但是克隆时却报错了： mingguilu@DESKTOP-KME2TBI:/mnt/d/helloworld/hugo$ git clone git@github.com:mingguilu/blog_mingguilu_com.git Cloning into &apos;blog_mingguilu_com&apos;... remote: Counting objects: 522, done. remote: Compressing objects: 100% (5/5), done. remote: Total 522 (delta 0), reused 1 (delta 0), pack-reused 517 Receiving objects: 100% (522/522), 16.24 MiB | 1.36 MiB/s, done. Resolving deltas: 100% (188/188), done. Checking connectivity... done. error: unable to create file content/猿/AutoIT3开发Helpdesk自动化工具之一:简介.md (Invalid argument) error: unable to create file content/猿/AutoIt3开发Helpdesk自动化工具之三:系统配置.md (Invalid argument) error: unable to create file content/猿/AutoIt3开发Helpdesk自动化工具之二:常用语法.md (Invalid argument) error: unable to create file content/猿/AutoIt3开发Helpdesk自动化工具之五:多任务组合.md (Invalid argument) error: unable to create file content/猿/AutoIt3开发Helpdesk自动化工具之四:软件安装.md (Invalid argument) fatal: unable to checkout working tree warning: Clone succeeded, but checkout failed. You can inspect what was checked out with &apos;git status&apos; and retry the checkout with &apos;git checkout -f HEAD&apos; 博客代码克隆成功了，但是content下多篇博文检出失败，为了排除Ubuntu on Windows 10的问题，在windows端Git bash上尝试克隆还是报错了…… 一番折腾问题依旧，只好Google一下才大概明白是怎么回事，部分博文的文件名中含有冒号，之前都是在linux中创建的没有问题，但是Windows不支持文件名中包含特殊符号。 Git can’t checkout a repo from github Git pull error: unable to create file (Invalid argument) 在Ubuntu on Windows 10上切换到家目录中，顺利克隆成功 mingguilu@DESKTOP-KME2TBI:~$ git clone git@github.com:mingguilu/blog_mingguilu_com.git Cloning into &apos;blog_mingguilu_com&apos;... remote: Counting objects: 522, done. remote: Compressing objects: 100% (5/5), done. remote: Total 522 (delta 0), reused 1 (delta 0), pack-reused 517 Receiving objects: 100% (522/522), 16.24 MiB | 3.31 MiB/s, done. Resolving deltas: 100% (188/188), done. Checking connectivity... done.]]></content>
      <categories>
        <category>编程之路</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>git clone</tag>
        <tag>warning: Clone succeeded, but checkout failed.</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AutoIt3开发Helpdesk自动化工具之六:图形用户界面]]></title>
    <url>%2F2017%2F05%2F02%2FAutoIt3%E5%BC%80%E5%8F%91Helpdesk%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%E4%B9%8B%E5%85%AD%2F</url>
    <content type="text"><![CDATA[在持续的编写和测试AutoIt3脚本过程中，对AutoIt的理解更深入了，我意识到可以使用AutoIt3 GUI编写一个图形用户界面，从而增强对每个自定义函数的复用，最终大幅提高运行效率。 参考文档 AutoIt3安装目录中的官方英文手册 v3.3.14.2 - GUI相关 ： AutoIt.chm AutoIt 在线手册中文版_脚本之家 v3.1.1 - GUI相关 : http://www.jb51.net/shouce/autoit/ GUI的概念AutoIt 脚本可创建（由窗口及其控件组成的）简单的图形用户界面（GUI） GUI 可由一个或多个 窗口 组成，这些窗口又带有一个或多个控件。GUI是靠“事件驱动”实现与用户的交互的，比如像点击按钮这样的动作就会引发一个事件。程序在空闲状态时等待事件的发生，捕捉到事件时则根据事件执行相关操作。 用GUI创建的图形用户界面确实很简单，类似的xp或更早风格的窗口，或许有方法可以美化，但是好看显然不是我关注的地方，我希望它稳定可靠地执行脚本就够了。GUI创建的窗口就如同每个我们所操作的软件操作，有文字，有按钮，可鼠标点击，可键盘输入…… GUI事件模式 消息循环模式（默认） OnEvent（事件驱动） 模式 这两种模式我以地铁站为例来理解，消息循环模式就像地铁站外临街出入口，在运营时间内无论是否有人进出每时每刻都开着；OnEvent(事件驱动)模式就像地铁站内的进出闸门，只有当乘客刷卡时才会打开，行人通过后，又回到关闭等待状态； 所以这两种模式各有适用的场景，自动化helpdesk工具可以在GUI上进行键鼠操作来命令脚本开始执行，更适合用OnEvent(事件驱动)模式。 为Helpdesk自动化工具创建GUI在脚本开头调用 GUIConstants.au3文件;;包含了在编写GUI程序时要用到的所有变量和常量 #include &lt;GUIConstants.au3&gt; ;;包含了在编写GUI程序时使用复选框所需的变量和常量 #include &lt;GuiButton.au3&gt; 将默认的 消息循环模式 切换为 OnEvent(事件驱动) 模式Opt(&quot;GUIOnEventMode&quot;, 1) 创建窗口和控件为了方便后期的维护，可以将这部分脚本包含到一个自定义函数中，并在脚本开头适当位置调用 _mainWindow() ;;窗口创建后是处于隐藏状态的，必须使用本函数来显示 GUISetState() Func _mainWindow() ;;声明变量 $Checkbox[] Global $Checkbox[53] ;;AutoIt GUI的控件定位方式类似于前端CSS中的固定定位，即所有控件定位都以窗口左上角为原点 ;;将窗口的长度和宽度定义为变量 Global $gui_width = 490 Global $gui_height = 500 ;;将控件左侧和上方的定位参数定义为变量，当后期需要调整窗口大小和控件位置时，修改相应的变量值即可 Global $checkbox_left = 5 Global $sysconf_top = 10 Global $install_top = 155 Global $user_top = 375 Global $checkbox_width = 150 Global $checkbox_height = 20 Global $select_left = 5 Global $select_top = 300 Global $select_width = 50 Global $select_height = 30 ;;创建一个窗口，语法：GUICreate ( &quot;窗口标题&quot; [, 宽度 [, 高度 [, 左侧 [, 上方 [, 风格 [, 扩展风格 [, 父窗口]]]]]]] ) GUICreate(&quot;自动化配置工具 V0.5 - By MingguiLu&quot;, $gui_width, $gui_height) ;;创建一个组框，语法：GUICtrlCreateGroup ( &quot;文本&quot;, 左侧, 上方 [, 宽度 [, 高度 [, 风格 [, 扩展风格]]]] ) GUICtrlCreateGroup(&quot;系统配置&quot;, $checkbox_left, $sysconf_top, $gui_width-10, $gui_height/3-30) ;;创建一个复选框，语法：GUICtrlCreateCheckbox ( &quot;文本&quot;, 左侧, 上方 [, 宽度 [, 高度 [, 风格 [, 扩展风格]]]] ) $Checkbox[1] = GUICtrlCreateCheckbox(&quot;修改计算机名并加域&quot;, $checkbox_left+5, $sysconf_top+20, $checkbox_width, $checkbox_height) $Checkbox[2] = GUICtrlCreateCheckbox(&quot;修改管理员密码&quot;, $checkbox_left+160, $sysconf_top+20, $checkbox_width, $checkbox_height) $Checkbox[3] = GUICtrlCreateCheckbox(&quot;创建Admin用户&quot;, $checkbox_left+320, $sysconf_top+20, $checkbox_width, $checkbox_height) $Checkbox[4] = GUICtrlCreateCheckbox(&quot;添加IT服务台&quot;, $checkbox_left+5, $sysconf_top+50, $checkbox_width, $checkbox_height) $Checkbox[5] = GUICtrlCreateCheckbox(&quot;开启远程桌面&quot;, $checkbox_left+160, $sysconf_top+50, $checkbox_width, $checkbox_height) $Checkbox[6] = GUICtrlCreateCheckbox(&quot;安装AD证书&quot;, $checkbox_left+320, $sysconf_top+50, $checkbox_width, $checkbox_height) $Checkbox[7] = GUICtrlCreateCheckbox(&quot;关闭防火墙&quot;, $checkbox_left+5, $sysconf_top+80, $checkbox_width, $checkbox_height) $Checkbox[8] = GUICtrlCreateCheckbox(&quot;降低UAC等级&quot;, $checkbox_left+160, $sysconf_top+80, $checkbox_width, $checkbox_height) GUICtrlCreateGroup(&quot;软件安装&quot;, $checkbox_left, $install_top, $gui_width-10, $gui_height/3-30) $Checkbox[21] = GUICtrlCreateCheckbox(&quot;Adobe Flash Player&quot;, $checkbox_left+5, $install_top+20, $checkbox_width, $checkbox_height) $Checkbox[22] = GUICtrlCreateCheckbox(&quot;Google Chrome&quot;, $checkbox_left+160, $install_top+20, $checkbox_width, $checkbox_height) $Checkbox[23] = GUICtrlCreateCheckbox(&quot;LinPhone for Windows&quot;, $checkbox_left+320, $install_top+20, $checkbox_width, $checkbox_height) $Checkbox[24] = GUICtrlCreateCheckbox(&quot;Cisco VPN Client&quot;, $checkbox_left+5, $install_top+50, $checkbox_width, $checkbox_height) $Checkbox[25] = GUICtrlCreateCheckbox(&quot;CRM Pro&quot;, $checkbox_left+160, $install_top+50, $checkbox_width, $checkbox_height) $Checkbox[26] = GUICtrlCreateCheckbox(&quot;Avaya one-X&quot;, $checkbox_left+320, $install_top+50, $checkbox_width, $checkbox_height) $Checkbox[27] = GUICtrlCreateCheckbox(&quot;Teamviewer11to10&quot;, $checkbox_left+5, $install_top+80, $checkbox_width, $checkbox_height) $Checkbox[28] = GUICtrlCreateCheckbox(&quot;Teamviewer10&quot;, $checkbox_left+160, $install_top+80, $checkbox_width, $checkbox_height) GUICtrlCreateGroup(&quot;操作选项&quot;,$select_left, $select_top, $gui_width-10, $gui_height/3-100) ;;创建一个单选框，语法：GUICtrlCreateRadio ( &quot;文本&quot;, 左侧, 上方 [, 宽度 [, 高度 [, 风格 [, 扩展风格]]]] ) Global $Radio1 = GUICtrlCreateRadio(&quot;驻地&quot;, $select_left+5, $select_top+20, $select_width, $select_height) Global $Radio2 = GUICtrlCreateRadio(&quot;驻地(含VPN)&quot;, $select_left+55, $select_top+20, $select_width+40, $select_height) Global $Radio3 = GUICtrlCreateRadio(&quot;销售&quot;, $select_left+150, $select_top+20, $select_width, $select_height) Global $Radio4 = GUICtrlCreateRadio(&quot;客服&quot;, $select_left+200, $select_top+20, $select_width, $select_height) GUICtrlCreateGroup(&quot;用户选项&quot;,$select_left, $user_top, $gui_width-10, $gui_height/3-100) $Checkbox[43] = GUICtrlCreateCheckbox(&quot;驻地&quot;, $checkbox_left+5, $user_top+20, $checkbox_width-100, $checkbox_height+10) $Checkbox[44] = GUICtrlCreateCheckbox(&quot;销售&quot;, $checkbox_left+65, $user_top+20, $checkbox_width-100, $checkbox_height+10) $Checkbox[45] = GUICtrlCreateCheckbox(&quot;客服&quot;, $checkbox_left+135, $user_top+20, $checkbox_width-100, $checkbox_height+10) $Checkbox[41] = GUICtrlCreateCheckbox(&quot;取消自动登录&quot;, $checkbox_left+205, $user_top+20, $checkbox_width-50, $checkbox_height+10) $Checkbox[42] = GUICtrlCreateCheckbox(&quot;取消管理员权限&quot;, $checkbox_left+305, $user_top+20, $checkbox_width-50, $checkbox_height+10) $Checkbox[51] = GUICtrlCreateCheckbox(&quot;自动重启系统+登录账户&quot;, $select_left+90, $user_top+85, $select_width+100, $select_height) Global $Radio11 = GUICtrlCreateRadio(&quot;全选&quot;, $select_left+260, $user_top+85, $select_width, $select_height) Global $Radio12 = GUICtrlCreateRadio(&quot;全不选&quot;, $select_left+320, $user_top+85, $select_width+10, $select_height) ;;创建一个按钮，语法：GUICtrlCreateButton ( &quot;文本&quot;, 左侧, 上方 [, 宽度 [, 高度 [, 风格 [, 扩展风格]]]] ) Global $Button1 = GUICtrlCreateButton(&quot;运行 (&amp;A)&quot;, $select_left, $user_top+80, $select_width+20, $select_height) Global $Button2 = GUICtrlCreateButton(&quot;退出 (&amp;E)&quot;, $select_left+410, $user_top+80, $select_width+20, $select_height) ;;窗口关闭事件 GUISetOnEvent($GUI_EVENT_CLOSE,&quot;_exit&quot;) EndFunc ;;闲置工作，不做任何事 While 1 sleep(1000) WEnd ;;关闭程序 Func _exit() Exit EndFun 双击运行脚本，即可见创建好的GUI]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>AutoIt</tag>
        <tag>AutoIt3</tag>
        <tag>Helpdesk</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AutoIt3开发Helpdesk自动化工具之五:多任务组合]]></title>
    <url>%2F2017%2F04%2F27%2FAutoIt3%E5%BC%80%E5%8F%91Helpdesk%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%E4%B9%8B%E4%BA%94%2F</url>
    <content type="text"><![CDATA[前两篇示例中，分别创建了系统配置和软件安装的3个脚本，通过“Compile Script to .exe (x86/x64)”将.au3脚本转换为.exe可执行程序，之后运行对应程序即可进行自动安装配置。 ├── 修改administrator密码.au3 ├── 创建admin用户.au3 ├── 修改计算机名并加域.au3 ├── Cisco VPN Client.au3 ├── Adobe Flash.au3 └── Linphone.au3 但是单独使用某一个脚本的场景并不多，通常我们根据不同需要自动完成多个任务，例如 呼叫中心的电话销售： 修改administrator密码 + 修改计算机名并加域 + Adobe Flash + Linphone 各城市门店的业务员： 修改administrator密码 + 创建admin用户 + 修改计算机名并加域 + Adobe Flash + Cisco VPN Client 可以通过AutoIt3的用户自定义函数实现多个任务的组合 将每个功能脚本定义为一个函数 将所有的自定义函数放在同一个脚本 通过依次调用多个函数实现多个自动化任务 下面看一下脚本模型 #cs ---------------------------------------------------------------------------- AutoIt Version: 3.3.14.2 Author: MingguiLu Script Function: Helpdesk自动化配置脚本. #ce ---------------------------------------------------------------------------- ; Script Start - Add your code below here _changePassword() ;;调用函数 _changePassword()，即执行“修改administrator密码”的脚本 ;_createAdmin() ;;添加了注释符号，不会调用函数 _createAdmin()，即不执行“创建admin用户”的脚本 _joinDomain() ;;调用函数 _joinDomain()，即执行“修改计算机名并加域”的脚本 _adobeFlash() ;;调用函数 _adobeFlash()，即执行“Adobe Flash”的脚本 ;_linPhone() ;;添加了注释符号，不会调用函数 _linPhone()，即不执行 “Linphone”的脚本 _ciscoVpnClient() ;;调用函数 _ciscoVpnClient()，即执行“Cisco VPN Client”的脚本 Func _changePassword() ;;创建一个自定义函数 _changePassword() ;;Script “修改administrator密码”的脚本 EndFunc Func _createAdmin() ;;Script “创建admin用户”的脚本 EndFunc Func _joinDomain() ;;Script “修改计算机名并加域”的脚本 EndFunc Func _adobeFlash() ;;Script “Adobe Flash”的脚本 EndFunc Func _linPhone() ;;Script “Linphone”的脚本 EndFunc Func _ciscoVpnClient() ;;Script “Cisco VPN Client”的脚本 EndFunc ; Script End 使用以上的脚本模型，我们可以持续维护一份脚本，优化现有的函数或者添加新的函数，需要执行不同任务组合时，拷贝一份脚本并调用相应的函数即可。]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>AutoIt</tag>
        <tag>AutoIt3</tag>
        <tag>Helpdesk</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AutoIt3开发Helpdesk自动化工具之四:软件安装]]></title>
    <url>%2F2017%2F04%2F25%2FAutoIt3%E5%BC%80%E5%8F%91Helpdesk%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%E4%B9%8B%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[本章将结合示例，演示如何编写自动安装软件的脚本 为了便于访问软件安装程序，我将所需的软件放置在共享文件夹中，并设置共享和NTFS权限为everyone可读 一、安装Adobe Flash Player由于Adobe Flash Player的更新升级非常频繁，安装文件名称随着每次升级变更，所以将安装文件名称修改为“Adobe_flashplayer_installer.exe”，这样每当更新安装文件之后，无需修改脚本内容。 #cs ---------------------------------------------------------------------------- AutoIt Version: 3.3.14.2 Author: MingguiLu Script Function: Adobe Flash Player #ce ---------------------------------------------------------------------------- ; Script Start - Add your code below here WinMinimizeAll() Global $administratorUserName = &quot;administrator&quot; Global $administratorPassword = &quot;Root@1024&quot; If IsAdmin() Then Run(&quot;\\wh-filesrv-01\Software\Adobe\Adobe_flashplayer_installer.exe&quot;) Else ;;以管理员账户运行安装软件 RunAs($administratorUserName,@ComputerName,$administratorPassword,0,&quot;\\wh-filesrv-01\Software\Adobe\Adobe_flashplayer_installer.exe&quot;,&quot;&quot;) EndIf ;; “”表示当前活动窗口 WinWaitActive(&quot;&quot;) ;;获取当前活动窗口的标题，存储到变量tempFlashTitle中 Local $tempFlashTitle = WinGetTitle(&quot;&quot;) WinWaitActive($tempFlashTitle,&quot;我已经阅读并同意&quot;) SLEEP(500) ;;勾选“我已经阅读并同意Flash Player 许可协议的条款。” ControlCommand($tempFlashTitle,&quot;我已经阅读并同意&quot;,&quot;Button4&quot;,&quot;Check&quot;,&quot;&quot;) SLEEP(500) ;;点击“安装” ControlClick($tempFlashTitle,&quot;我已经阅读并同意&quot;,&quot;Button2&quot;,&quot;left&quot;,1) Adobe Flash Player安装程序和IE浏览器会冲突，导致安装过程中会报错，需要使用if条件判断语句处理报错窗口 WinWaitActive(&quot;&quot;) ;;获取当前活动窗口的文本，存储到变量tempFlashText中 Local $tempFlashText = WinGetText(&quot;&quot;) ;;如果窗口文本中包含“下列发生冲突的应用程序”字段，则点击“确定”关闭窗口 If StringInStr($tempFlashText,&quot;下列发生冲突的应用程序&quot;) Then SLEEP(500) ControlClick($tempFlashTitle,&quot;下列发生冲突的应用程序&quot;,&quot;Button1&quot;,&quot;left&quot;,1) ;;弹出消息框提示用户，2秒后自动消失 MsgBox(64,&quot;提示&quot;,&quot;请关闭IE浏览器后再尝试运行安装程序！&quot;,2) Else ;;等待安装完成 WinWaitActive($tempFlashTitle,&quot;Flash Player&quot;) SLEEP(500) ;;点击“确定”关闭窗口 ControlClick($tempFlashTitle,&quot;Flash Player&quot;,&quot;Button2&quot;,&quot;left&quot;,1) WinWaitClose($tempFlashTitle,&quot;Flash Player&quot;) EndIf ; Script End 二、安装linphone#cs ---------------------------------------------------------------------------- AutoIt Version: 3.3.14.2 Author: MingguiLu Script Function: Linphone #ce ---------------------------------------------------------------------------- ; Script Start - Add your code below here WinMinimizeAll() Global $administratorUserName = &quot;administrator&quot; Global $administratorPassword = &quot;Root@1024&quot; If IsAdmin() Then Run(&quot;\\wh-filesrv-01\Software\Linphone\Linphone-3.10.2-win32.exe&quot;) Else RunAs($administratorUserName,@ComputerName,$administratorPassword,0,&quot;\\wh-filesrv-01\Software\Linphone\Linphone-3.10.2-win32.exe&quot;,&quot;&quot;) EndIf WinWaitActive(&quot;&quot;) ;;获取当前活动窗口的文本，存储到变量tempLinphoneText中 Local $tempLinphoneText = WinGetText(&quot;&quot;) ;;判断字符“installed”是否包含在当前活动窗口文本中，并将结果存储在变量tempResult中 Local $tempResult = StringInStr($tempLinphoneText,&quot;installed&quot;,0,1) ;;如果tempResult为True，表示Linphone已安装，可结束安装程序 If $tempResult Then WinActivate(&quot;Linphone 3.10.2 安装&quot;,&quot;Linphone is already installed&quot;) WinWaitActive(&quot;Linphone 3.10.2 安装&quot;,&quot;Linphone is already installed&quot;) SLEEP(500) ;;点击“取消” ControlClick(&quot;Linphone 3.10.2 安装&quot;,&quot;Linphone is already installed&quot;,&quot;Button2&quot;,&quot;left&quot;,1) WinWaitClose(&quot;Linphone 3.10.2 安装&quot;,&quot;Linphone is already installed&quot;) ;;如果tempResult为False，表示Linphone未安装，可继续完成安装 Else WinActivate(&quot;Linphone 3.10.2 安装&quot;,&quot;欢迎使用“Linphone 3.10.2”安装向导&quot;) WinWaitActive(&quot;Linphone 3.10.2 安装&quot;,&quot;欢迎使用“Linphone 3.10.2”安装向导&quot;) SLEEP(500) ;;点击“下一步（N）” Send(&quot;!n&quot;) SLEEP(500) WinWaitActive(&quot;Linphone 3.10.2 安装&quot;,&quot;许可证协议&quot;) SLEEP(500) ;;点击“我接受（I）” Send(&quot;!i&quot;) SLEEP(500) WinWaitActive(&quot;Linphone 3.10.2 安装&quot;,&quot;选择安装位置&quot;) SLEEP(500) ;;点击“下一步（N）” Send(&quot;!n&quot;) SLEEP(500) WinWaitActive(&quot;Linphone 3.10.2 安装&quot;,&apos;选择“开始菜单”文件夹&apos;) SLEEP(500) ;;点击“下一步（N）” Send(&quot;!n&quot;) SLEEP(500) WinWaitActive(&quot;Linphone 3.10.2 安装&quot;,&quot;选择组件&quot;) SLEEP(500) ;;按下方向键下 Send(&quot;{DOWN}&quot;) SLEEP(500) ;;按下空格键，选中“Cisco&apos;S OpenH264 Codec” Send(&quot;{SPACE}&quot;) SLEEP(500) ;;点击“安装（I）” Send(&quot;!i&quot;) WinWaitActive(&quot;Linphone 3.10.2 安装&quot;,&apos;正在完成“Linphone 3.10.2”安装向导&apos;) SLEEP(1000) ;;点击“完成（F）” Send(&quot;!f&quot;) WinWaitClose(&quot;Linphone 3.10.2 安装&quot;,&apos;正在完成“Linphone 3.10.2”安装向导&apos;) EndIf ; Script End 三、安装Cisco VPN Client#cs ---------------------------------------------------------------------------- AutoIt Version: 3.3.14.2 Author: MingguiLu Script Function: Cisco VPN Client #ce ---------------------------------------------------------------------------- ; Script Start - Add your code below here ;;最小化所有窗口 WinMinimizeAll() Global $administratorUserName = &quot;administrator&quot; Global $administratorPassword = &quot;Root@1024&quot; If IsAdmin() Then Run(&quot;\\wh-filesrv-01\Software\Cisco\Cisco.VPN.Client.v5.0.07.0290.x64\setup.exe&quot;) Else RunAs($administratorUserName,@ComputerName,$administratorPassword,0,&quot;\\wh-filesrv-01\Software\Cisco\Cisco.VPN.Client.v5.0.07.0290.x64\setup.exe&quot;,&quot;&quot;) EndIf WinWaitActive(&quot;WinZip Self-Extractor - setup.exe&quot;,&quot;To unzip all files in setup.exe&quot;) SLEEP(500) ControlClick(&quot;WinZip Self-Extractor - setup.exe&quot;,&quot;To unzip all files in setup.exe&quot;,&quot;Button4&quot;,&quot;left&quot;,1) WinWaitActive(&quot;WinZip Self-Extractor&quot;,&quot;确定&quot;) SLEEP(500) ControlClick(&quot;WinZip Self-Extractor&quot;,&quot;确定&quot;,&quot;Button1&quot;,&quot;left&quot;,1) WinWaitActive(&quot;Cisco Systems VPN Client 5.0.07.0290&quot;,&quot;This installation can be displayed in multiple languages&quot;) SLEEP(500) ControlClick(&quot;Cisco Systems VPN Client 5.0.07.0290&quot;,&quot;This installation can be displayed in multiple languages&quot;,&quot;Button1&quot;,&quot;left&quot;,1) SLEEP(1000) 如果已安装过Cisco VPN Client软件，再重复安装，将会有下图所示的报错窗口，需要使用if条件判断语句处理报错窗口 ;;如果存在标题为“Installer informaton”,文本内容包含&quot;Error 28000:&quot;的活动窗口，说明该软件已安装，可结束安装程序 If WinExists(&quot;Installer Information&quot;,&quot;Error 28000:&quot;) Then WinActivate(&quot;Installer Information&quot;,&quot;Error 28000: Before installing the Cisco Systems VPN Client 5.0.07.0290&quot;) WinWaitActive(&quot;Installer Information&quot;,&quot;Error 28000: Before installing the Cisco Systems VPN Client 5.0.07.0290&quot;) SLEEP(500) ControlClick(&quot;Installer Information&quot;,&quot;Error 28000: Before installing the Cisco Systems VPN Client 5.0.07.0290&quot;,&quot;Button1&quot;,&quot;left&quot;,1) WinWaitActive(&quot;Fatal Error&quot;,&quot;Installation ended prematurely because of an error&quot;) SLEEP(500) ControlClick(&quot;Fatal Error&quot;,&quot;Installation ended prematurely because of an error&quot;,&quot;Button1&quot;,&quot;left&quot;,1) WinWaitClose(&quot;Fatal Error&quot;,&quot;Installation ended prematurely because of an error&quot;) Else WinWaitActive(&quot;Cisco Systems VPN Client 5.0.07.0290 Setup&quot;,&quot;Welcome to the Cisco Systems VPN Client&quot;) SLEEP(500) Send(&quot;!n&quot;) WinWaitActive(&quot;Cisco Systems VPN Client 5.0.07.0290 Setup&quot;,&quot;License Agreemen&quot;) SLEEP(500) Send(&quot;!a&quot;) SLEEP(500) Send(&quot;!n&quot;) WinWaitActive(&quot;Cisco Systems VPN Client 5.0.07.0290 Setup&quot;,&quot;Destination Folder&quot;) SLEEP(500) Send(&quot;!n&quot;) WinWaitActive(&quot;Cisco Systems VPN Client 5.0.07.0290 Setup&quot;,&quot;Ready to Install the Application&quot;) SLEEP(500) Send(&quot;!n&quot;) SLEEP(500) WinWaitActive(&quot;Cisco Systems VPN Client 5.0.07.0290 Setup&quot;,&quot;successfully installed&quot;) ;;将vpn客户端配置文件拷贝到“C:\Program Files (x86)\Cisco Systems\VPN Client\Profiles”下 FileCopy(&quot;\\wh-mingguilu-01\Installers\Cisco\Cisco.VPN.Client.v5.0.07.0290.x64\quark-IDC.pcf&quot;,&quot;C:\Program Files (x86)\Cisco Systems\VPN Client\Profiles&quot;,1) SLEEP(500) ;;点击“Finish”关闭窗口 ControlClick(&quot;Cisco Systems VPN Client 5.0.07.0290 Setup&quot;,&quot;successfully installed&quot;,&quot;Button1&quot;,&quot;left&quot;,1) ;;点击“Finish”关闭窗口可能弹出标题为“Installer Information”的提示框口，也可能没有，需要使用if条件判断语句处理报错窗口 If WinExists(&quot;Installer Information&quot;) Then WinActivate(&quot;Installer Information&quot;,&quot;You must restart your system&quot;) WinWaitActive(&quot;Installer Information&quot;,&quot;You must restart your system&quot;) SLEEP(500) ControlClick(&quot;Installer Information&quot;,&quot;You must restart your system&quot;,&quot;Button2&quot;,&quot;left&quot;,1) WinWaitClose(&quot;Installer Information&quot;,&quot;You must restart your system&quot;) Else WinWaitClose(&quot;Cisco Systems VPN Client 5.0.07.0290 Setup&quot;,&quot;successfully installed&quot;) EndIf EndIf ; Script End]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>AutoIt</tag>
        <tag>AutoIt3</tag>
        <tag>Helpdesk</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AutoIt3开发Helpdesk自动化工具之三:系统配置]]></title>
    <url>%2F2017%2F04%2F23%2FAutoIt3%E5%BC%80%E5%8F%91Helpdesk%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%E4%B9%8B%E4%B8%89%2F</url>
    <content type="text"><![CDATA[本章将结合示例，演示如何编写自动配置系统的脚本 一、修改administrator密码#cs ---------------------------------------------------------------------------- AutoIt Version: 3.3.14.2 Author: MingguiLu Script Function: 修改Administrator密码. #ce ---------------------------------------------------------------------------- ; Script Start - Add your code below here ;;最小化所有窗口 WinMinimizeAll() ;;定义变量用于存储administrator的密码 Global $administratorPassword = &quot;Root@1024&quot; ;;如果当前为管理员即可重设密码，如果为普通用户弹出警告提示 If IsAdmin() Then Run(&quot;net user administrator &quot; &amp; $administratorPassword) SLEEP(500) Else MsgBox(64,&quot;警告&quot;,&quot;当前用户无权操作administrator密码，请切换其它管理员帐户操作！&quot;) SLEEP(500) EndIf ; Script End 二、创建普通用户Admin当电脑在外网或脱域、administrator密码被篡改或不便告知用户、用户忘记了域账户的登录密码等极端情况下，无法登录到桌面时，可使用admin用户登录到桌面后运行远程协助软件 #cs ---------------------------------------------------------------------------- AutoIt Version: 3.3.14.2 Author: MingguiLu Script Function: 创建普通用户admin #ce ---------------------------------------------------------------------------- ; Script Start - Add your code below here ;;最小化所有窗口 WinMinimizeAll() If IsAdmin() Then ;;创建用户admin,密码设置为:abc@123 Run(&quot;net user admin abc@123 /add&quot;) ;;将用户admin添加到本地组users中 Run(&quot;net localgroup users admin /add&quot;) ;;打开计算机管理控制台 ShellExecute(@SystemDir &amp; &quot;\compmgmt.msc&quot;) WinWaitActive(&quot;计算机管理&quot;,&quot;计算机管理(本地)&quot;) ;;暂停脚本半秒钟 SLEEP(500) ;;按下方向键下键 Send(&quot;{DOWN}&quot;,5) SLEEP(500) Send(&quot;{DOWN}&quot;) SLEEP(500) Send(&quot;{DOWN}&quot;) SLEEP(500) Send(&quot;{DOWN}&quot;) SLEEP(500) Send(&quot;{DOWN}&quot;) SLEEP(500) ;;按下方向键右键 Send(&quot;{RIGHT}&quot;) SLEEP(500) Send(&quot;{DOWN}&quot;) SLEEP(500) ;;按下Tab键 Send(&quot;{TAB}&quot;) SLEEP(500) ;;按下回车键 Send(&quot;{ENTER}&quot;) WinWaitActive(&quot;admin 属性&quot;,&quot;常规&quot;) SLEEP(500) ;;选中“用户不能更改密码” ControlCommand(&quot;admin 属性&quot;,&quot;常规&quot;,&quot;Button2&quot;,&quot;Check&quot;,&quot;&quot;) SLEEP(500) ;;选中“密码永不过期” ControlCommand(&quot;admin 属性&quot;,&quot;常规&quot;,&quot;Button3&quot;,&quot;Check&quot;,&quot;&quot;) SLEEP(500) ;;点击“确定” ControlClick(&quot;admin 属性&quot;,&quot;常规&quot;,&quot;Button6&quot;,&quot;left&quot;,1) WinActivate(&quot;计算机管理&quot;,&quot;计算机管理(本地)&quot;) WinWaitActive(&quot;计算机管理&quot;,&quot;计算机管理(本地)&quot;) SLEEP(500) WinClose(&quot;计算机管理&quot;,&quot;计算机管理(本地)&quot;) WinWaitClose(&quot;计算机管理&quot;,&quot;计算机管理(本地)&quot;) Else MsgBox(64,&quot;警告&quot;,&quot;当前用户无权操作用户和组，请切换其它管理员帐户操作！&quot;) EndIf ; Script End 三、修改计算机名并加域当开始运行脚本时，弹出一个交互窗口用于输入计算机名，并存储到变量中以便之后调用。 #cs ---------------------------------------------------------------------------- AutoIt Version: 3.3.14.2 Author: MingguiLu Script Function: 修改计算机名并加域. #ce ---------------------------------------------------------------------------- ; Script Start - Add your code below here ;;最小化所有窗口 WinMinimizeAll() Global $administratorUserName = &quot;administrator&quot; Global $administratorPassword = &quot;Root@1024&quot; ;;定义变量$domainName存储域名 Global $domainName = &quot;awesomeit.com&quot; ;;定义变量$itUserName存储IT的账户 Global $itUserName = &quot;mingguilu&quot; ;;定义变量$itPassword存储IT的密码 Global $itPassword = &quot;Password@1024&quot; ;;定义变量$hostName存储用户交互中输入的计算机名 Global $hostName Global $hostName = InputBox(&quot;输入&quot;,&quot;请输入计算机名：&quot;,&quot;&quot;) If IsAdmin() Then ;;打开系统属性控制台 Run(&quot;control sysdm.cpl&quot;) Else ;;以管理员模式打开系统属性控制台 RunAs($administratorUserName,@ComputerName,$administratorPassword,0,&quot;control sysdm.cpl&quot;) EndIf WinWaitActive(&quot;系统属性&quot;,&quot;计算机名&quot;) SLEEP(500) ;;进入“更改” Send(&quot;!c&quot;) WinWaitActive(&quot;计算机名/域更改&quot;,&quot;计算机名(&amp;C):&quot;) SLEEP(500) WinActivate(&quot;计算机名/域更改&quot;,&quot;计算机名(&amp;C):&quot;) ;;自动填写计算机名 ControlSetText(&quot;计算机名/域更改&quot;,&quot;计算机名(&amp;C):&quot;,&quot;Edit1&quot;,$hostName) SLEEP(500) ;;选中“域（D）” ControlCommand(&quot;计算机名/域更改&quot;,&quot;计算机名(&amp;C):&quot;,&quot;Button3&quot;,&quot;Check&quot;) SLEEP(500) ;;自动填写域名 ControlSetText(&quot;计算机名/域更改&quot;,&quot;计算机名(&amp;C):&quot;,&quot;Edit3&quot;,$domainName) SLEEP(500) ;;点击“确定” ControlClick(&quot;计算机名/域更改&quot;,&quot;计算机名(&amp;C):&quot;,&quot;Button6&quot;,&quot;left&quot;,1) WinWaitActive(&quot;Windows 安全&quot;) SLEEP(500) ;;自动填写IT人员账号 ControlSetText(&quot;Windows 安全&quot;,&quot;&quot;,&quot;Edit1&quot;,$itUserName) SLEEP(500) ;;自动填写IT人员密码 ControlSetText(&quot;Windows 安全&quot;,&quot;&quot;,&quot;Edit2&quot;,$itPassword) SLEEP(500) ;;点击“确定” ControlClick(&quot;Windows 安全&quot;,&quot;&quot;,&quot;Button2&quot;,&quot;left&quot;,1) WinWaitActive(&quot;计算机名/域更改&quot;,&quot;欢迎加入 awesomeit.com 域&quot;) SLEEP(500) ControlClick(&quot;计算机名/域更改&quot;,&quot;欢迎加入 awesomeit.com 域&quot;,&quot;Button1&quot;,&quot;left&quot;,1) 为了兼容可能弹出的提示框，使用while循环结合if条件判断，做应对的操作：如果8秒钟之内弹出“帐户名与安全标识间无任何映射完成”的提示框，则按下回车键关闭提示框并跳出循环；如果没有弹出这个提示框，则8秒之后结束循环 Local $i = 0 While $i &lt;= 8000 If WinExists(&quot;计算机名/域更改&quot;,&quot;帐户名与安全标识间无任何映射完成&quot;) Then WinActivate(&quot;计算机名/域更改&quot;,&quot;帐户名与安全标识间无任何映射完成&quot;) WinWaitActive(&quot;计算机名/域更改&quot;,&quot;帐户名与安全标识间无任何映射完成&quot;) SLEEP(500) Send(&quot;{ENTER}&quot;) ExitLoop Else SLEEP(1000) $i = $i + 1000 EndIf WEnd WinWaitActive(&quot;计算机名/域更改&quot;,&quot;确定&quot;) SLEEP(500) Send(&quot;{ENTER}&quot;) WinWaitActive(&quot;系统属性&quot;,&quot;计算机名&quot;) SLEEP(500) ControlClick(&quot;系统属性&quot;,&quot;计算机名&quot;,&quot;Button3&quot;,&quot;left&quot;,1) WinWaitActive(&quot;Microsoft Windows&quot;) SLEEP(500) Send(&quot;!l&quot;) WinWaitClose(&quot;Microsoft Windows&quot;) ; Script End]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>AutoIt</tag>
        <tag>AutoIt3</tag>
        <tag>Helpdesk</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AutoIt3开发Helpdesk自动化工具之二:常用语法]]></title>
    <url>%2F2017%2F04%2F21%2FAutoIt3%E5%BC%80%E5%8F%91Helpdesk%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%E4%B9%8B%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[在正式开始脚本工具编写之前，先熟悉一下AutoIt3常用的语法 参考文档： AutoIt3安装目录中的官方英文手册 v3.3.14.2 ： AutoIt.chm AutoIt 在线手册中文版_脚本之家 v3.1.1 : http://www.jb51.net/shouce/autoit/ 编辑器自带的编辑器是SciTe，带有所有的语法高亮功能，同时还整合了很多AutoIt的第三方工具（比如语法错误检查和脚本整理等） AutoIt3脚本文件的后缀名是.au3，在安装AutoIt软件的系统上可直接运行，在未安装的系统上需编译为.exe程序。创建.au3格式的脚本文件方法： 右键 ——&gt; 新建 ——&gt; AutoIt v3 Script 建议使用这种方法，优势在于脚本会自动添加一段头注释模板： #cs ---------------------------------------------------------------------------- AutoIt Version: 3.3.14.2 Author: myName Script Function: Template AutoIt script. #ce ---------------------------------------------------------------------------- ; Script Start - Add your code below here 在编辑器上 File ——&gt; New、直接点击New图标、或者使用快捷键 Ctrl + N，这些不会自动添加头注释 注释 单行注释 分号“;”之后的内容作为注释内容 多行注释 #comments-start 注释开始，可简写为：#cs ;code 脚本代码 #comments-end 注释结束，可简写为：#ce 暂停执行脚本Sleep ( 暂停时间 ) ;暂停执行的时间以毫秒为单位，1000毫秒 = 1秒 Sleep(500) ;推荐在每次等待窗口出现之后和模拟键鼠操作控件时使用Sleep暂停执行脚本半秒钟，以优化自动任务的可视效果 运行外部程序Run ( &quot;文件名&quot; [, &quot;工作目录&quot; [, 标志]] ) .exe 可执行程序 Run(“notepad.exe”) Run(“C:\Program Files\Microsoft Office\Office16\OUTLOOK.EXE”) ;绝对路径 Run(“\\wh-filesrv-01\Installers\LinPhone\Linphone-3.10.2-win32.exe”) ;网络共享路径 .msi 微软格式的安装包 Run(“msiexec /i \\wh-filesrv-01\Installers\Synjones\二代证读验机具USB驱动\USBDrv3.0-x64.msi”) ;调用系统程序msiexec.exe操作.msi程序， /i参数表示安装 .cpl 控制面板项 Run(“control sysdm.cpl”) ;打开系统属性窗口 .cer 证书文件 Run(“explorer \\wh-filesrv-01\Installers\AD\CA.cer”) ;打开安装证书窗口 DOS命令 Run(“net user admin abc@123 /add”) ;创建本地用户admin，密码为abc@123 Run(“net localgroup users admin /add”) ;将本地用户admin加入users组 系统目录 Run(“explorer “ &amp; @ProgramFilesDir) ;打开C:\Program Files (x86) 以其它用户运行外部程序RunAs ( &quot;用户名&quot;, &quot;域&quot;, &quot;密码&quot;, 注册标志, &quot;程序&quot; [, &quot;工作目录&quot; [, 显示标志 [, 选项标志 ]]] ) ;注册标志：0 - 不加载配置文件的交互式登录. 1 - 加载配置文件的交互式登录. 2 - 使用网络证书. 4 - 继承调用进程的环境, 而不是用户环境 以本地管理员Administrator运行 Global $rootUserName = “administrator” Global $rootPassword = “password@123456” Local $tempUserName = @UserName RunAs($rootUserName,@ComputerName,$rootPassWord,0,&quot;\\\\wh-filesrv-01\Installers\LinPhone\Linphone-3.10.2-win32.exe&quot;,&quot;&quot;) RunAs($rootUserName,@ComputerName,$rootPassword,0,”net localgroup /delete administrators “ &amp; $tempUserName,””) RunAs($rootUserName,@ComputerName,$rootPassWord,0,”certutil -addstore -f Root \\wh-filesrv-01\Installers\AD\CA.cer”,””) 使用ShellExecute运行外部程序ShellExecute ( &quot;文件名&quot; [, &quot;参数&quot; [, &quot;工作目录&quot; [, &quot;动作&quot; [, 显示标志]]]] ) ;理论上windows能识别的文件，即双击能打开的文件，使用ShellExecute也能打开 .msi 微软格式的安装包 ShellExecute(“\\wh-filesrv-01\Installers\Synjones\二代证读验机具USB驱动\USBDrv3.0-x64.msi”) ;安装共享目录的.msi程序 .msc 微软管理控制台窗口 ShellExecute(@SystemDir &amp; “\compmgmt.msc”) ;打开计算机管理 .docx、.xlsx、.pptx Office文档 ShellExecute(“test.docx”) ;打开当前目录中的Word文件 ShellExecute(“test.xlsx”) ;打开当前目录中的Excel文件 ShellExecute(“test.pptx”) ;打开当前目录中的PPT文件 .lnk 快捷方式 ShellExecute(@UserProfileDir &amp; “\desktop\微信.lnk”) ;通过快捷方式运行微信 窗口操作 最小化所有窗口 WinMinimizeAll() ;我习惯在每个任务开头加上这个函数，以便仅显示任务的活动窗口 等待指定窗口出现 WinWait ( “窗口标题” [, “窗口文本” [, 超时时间]] ) 激活指定的窗口 WinActivate ( “窗口标题” [, “窗口文本”] ) 等待指定的窗口被激活 WinWaitActive ( “窗口标题”, [“窗口文本”], [超时时间] ) 关闭指定的窗口 WinClose ( “窗口标题” [, “窗口文本”] ) 等待指定的窗口被关闭 WinWaitClose ( “窗口标题” [, “窗口文本” [, 超时时间]] ) 检查指定的窗口是否存在 WinExists ( “窗口标题” [, “窗口文本”] ) ;返回值：若目标窗口确实存在则返回值为1，否则返回值为0 检查指定的窗口是否存在且当前被激活 WinActive ( “窗口标题” [, “窗口文本”] ) ;返回值：若目标窗口确实存在并被激活了则返回1，否则返回值为0 获取指定窗口的完整标题名 WinGetTitle ( “窗口标题” [, “窗口文本”] ) ;返回值：返回一个含有目标窗口的完整标题的字符串。若无匹配窗口则返回值为1 获取指定窗口中的文本 WinGetText ( “窗口标题” [, “窗口文本”] ) ;返回值：返回一个含有获得的窗口文本的字符串。若无匹配窗口则返回值为1 控件操作 向指定控件发送鼠标点击命令 ControlClick ( “窗口标题”, “窗口文本”, “控件ID” [, 按钮] [, 点击次数]] ) ;按钮：默认“left”，还可以是“right”、“middle”；点击次数：默认“1” 选中或撤销选中指定的复选/单选框 ControlCommand ( “窗口标题”, “窗口文本”, 控件ID, “命令”, “选项” ) ;命令：“Check”使目标按钮（复选框/单选框）变为选中状态 ;“UnCheck”撤销目标按钮（复选框/单选框）的选中状态 向指定的控件发送字符串 ControlSend ( “窗口标题”, “窗口文本”, 控件ID, “字符串” [, 标志] ) ;向控件发送指定的字符串，并追加到原有字符串后面 修改指定控件的文本 ControlSetText( “窗口标题”, “窗口文本”, 控件ID, “新文本” ) ;向控件发送指定的字符串，并替换原有的字符串 模拟键击操作参考文档：Send - AutoIt 在线手册中文版_脚本之家 Send ( &quot;按键&quot; [, 标志] ) ;向激活窗口发送模拟键击操作 ! 表示 Alt + 表示 Shift ^ 表示 Ctrl # 表示 Windows Send(&quot;!y&quot;) ;按下Alt+Y键 Send(&quot;^s&quot;) ;按下Ctrl+S键 Send(&quot;#r&quot;) ;按下Win+R键，打开运行 Send(&quot;{TAB}&quot;) ;按下Tab键 Send(&quot;+{TAB 4}&quot;) ;连续按下4次Shift+Tab键 Send(&quot;{ENTER}&quot;) ;按下回车键 Send(&quot;{SPACE}&quot;) ;按下空格键 Send(&quot;{UP}&quot;) ;方向键上 Send(&quot;{DOWN 3}&quot;) ;连续按3次方向键下 Send(&quot;{LEFT}&quot;) ;方向键左 Send(&quot;{RIGHT 5}&quot;) ;连续按5次方向键右 消息框MsgBox ( 标志, &quot;标题&quot;, &quot;文本&quot; [, 超时时间] ) ;显示一个简单的对话框（可设置超时属性） $i = 5 While $i &gt; 0 MsgBox(64, &quot;测试&quot;, &quot;此对话框将会在&quot; &amp; $i &amp; &quot;秒后自动消失&quot;,1) Sleep(1000) $i = $i - 1 WEnd 输入框InputBox ( &quot;标题&quot;, &quot;提示信息&quot; [, &quot;默认数据&quot; [, &quot;密码字符&quot; [, 宽度, 高度 [, 左边, 上边 [, 超时时间]]]]] ) ;显示一个输入框以供用户输入数据 $yourName = InputBox(&quot;提问&quot;,&quot;请输入你的姓名：&quot;,&quot;Please enter your name&quot;) MsgBox(64,&quot;欢迎&quot;,&quot;Wellcome, &quot; &amp; $yourName &amp; &quot; !&quot;) 检查当前用户是否拥有管理员权限IsAdmin() ; 返回值为 1，说明当前用户拥有管理员权限 ;返回值为0，说明用户不是管理员 If IsAdmin() Then MsgBox(64,&quot;提示&quot;,&quot;当前用户为系统管理员！请继续操作！&quot;) Else MsgBox(64,&quot;提示&quot;,&quot;当前用户非系统管理员！请切换管理员操作！&quot;) EndIf 检查某个字符串是否含有给定的子串StringInStr ( &quot;字符串&quot;, &quot;子串&quot; [, 区分大小写 [, 出现次序]] ) ;成功：返回子串的位置 ;失败：返回值为0，说明未发现匹配子串 尝试运行2次下面的脚本示例： WinMinimizeAll() Run(&quot;notepad.exe&quot;) WinWaitActive(&quot;无标题 - 记事本&quot;) Sleep(500) ControlSend(&quot;无标题 - 记事本&quot;,&quot;&quot;,&quot;Edit1&quot;,&quot;写入一段演示的文本内容！&quot;) Sleep(500) $tempText = WinGetText(&quot;&quot;) If StringInStr($tempText,&quot;一段演示&quot;) Then MsgBox(64,&quot;提示&quot;,&quot;文本写入成功&quot;,1) EndIf Sleep(500) WinClose(&quot;无标题 - 记事本&quot;) WinWaitActive(&quot;记事本&quot;,&quot;保存(&amp;S)&quot;) Sleep(500) Send(&quot;!s&quot;) WinWaitActive(&quot;另存为&quot;,&quot;命名空间树控件&quot;) Sleep(500) ControlSetText(&quot;另存为&quot;,&quot;命名空间树控件&quot;,&quot;Edit1&quot;,&quot;test.txt&quot;) Sleep(500) Send(&quot;!s&quot;) Sleep(500) If WinExists(&quot;确认另存为&quot;) Then ;WinActivate(&quot;确认另存为&quot;) ;WinWaitActive(&quot;确认另存为&quot;) Send(&quot;!y&quot;) EndIf 操作注册表 读取注册表指定的值 RegRead ( “键名”, “值项” ) 创建一个主键、子键或值项 RegWrite ( “键名” [,”值项”, “类型”, 数据] ) 从注册表中删除指定键值 RegDelete ( “键名” [, “值项”] ) ;修改注册表实现开机自动登录： RegWrite(“HKEY_LOCAL_MACHINE64\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon”, “AutoAdminLogon”, “REG_SZ”, “1”) RegWrite(“HKEY_LOCAL_MACHINE64\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon”, “DefaultDomainName”, “REG_SZ”, $domainName) RegWrite(“HKEY_LOCAL_MACHINE64\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon”, “DefaultUserName”, “REG_SZ”, $userName) RegWrite(“HKEY_LOCAL_MACHINE64\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon”, “DefaultPassword”, “REG_SZ”, $userPassword) ;修改注册表取消开机自动登录： RegWrite(“HKEY_LOCAL_MACHINE64\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon”, “AutoAdminLogon”, “REG_SZ”, “0”) RegWrite(“HKEY_LOCAL_MACHINE64\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon”, “DefaultDomainName”, “REG_SZ”, “.”) RegWrite(“HKEY_LOCAL_MACHINE64\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon”, “DefaultUserName”, “REG_SZ”,”administrator”) RegDelete(“HKEY_LOCAL_MACHINE64\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon”, “DefaultPassword”) 注意！操作注册表有一个技巧十分重要，如果是Windows x64系统，需在“HKEY_LOCAL_MACHINE”后加上“64”，否则操作会被重定向至 “HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node” 关机Shutdown ( 代码 ) 0 = Logoff（注销） 1 = Shutdown（关机） 2 = Reboot（重启） 4 = Force（强制执行） 8 = Power down（断电） 32= Suspend（待机） 64= Hibernate（休眠） 可按需把相应数值相加。比如，要关机并断电，则应指定数值 9 （shutdown + power down = 1 + 8 = 9）]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>AutoIt</tag>
        <tag>AutoIt3</tag>
        <tag>Helpdesk</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AutoIt3开发Helpdesk自动化工具之一:简介]]></title>
    <url>%2F2017%2F04%2F18%2FAutoIT3%E5%BC%80%E5%8F%91Helpdesk%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%E4%B9%8B%E4%B8%80%2F</url>
    <content type="text"><![CDATA[在员工数量较多的大中型公司，Hekpdesk工程师每天重复处理大量简单而繁琐的桌面软硬件请求和报障，这些工作大多在初期进行短暂的技术学习后，很快演变为经验积累，但再丰富的经验如果无法解放时间和双手，枯燥和疲惫一直如影随形。细想一下，有些工作场景中Helpdesk工程师像机器一样在每台PC上按照相同的流程，打开相同的窗口，安装相同的软件，设置相同的选项…….听起来让人很不安？但这样的情景时常上演，比如需要给30名新员工配置办公电脑、部门需要统一安装某几款软件并进行设置、或者反过来要卸载某款软件……那么何必把自己当做机器呢，电脑本身不就是一台聪明的机器吗！ 接下来，我们将使用AutoIt3来开发一个让电脑自己执行重复任务的自动化脚本工具，并打造一个简洁实用的图形界面。 一、AutoIt v3 简介AutoIt v3是一种免费的基于类BASIC的脚本语言，用于自动化Windows GUI和通用脚本。 它使用模拟键盘，鼠标移动和窗口/控制操作的组合，以便以其他语言（例如VBScript和SendKeys）不可能或不可靠的方式自动执行任务。 AutoIt也非常小，独立，将运行在所有版本的Windows开箱即用，不需要烦人的“runtime”要求！ AutoIt最初设计用于PC“大批量交付”情况，可靠地自动化并配置成千上万的个人电脑。 随着时间的推移，它已经成为一种强大的语言，它支持复杂的表达式，用户自定义函数，循环以及经验丰富的脚本编写期望。 AutoIt v3 的优秀特性: 简单易学的类BASIC语法 模拟按键和鼠标移动 操作窗口和进程 与所有标准的Windows控件进行交互 脚本可以编译成独立的可执行文件 创建图形用户界面（GUI） 支持COM 正则表达式 直接调用外部DLL和Windows API函数 Scriptable RunAs函数 详细的帮助文件和大型社区支持论坛 兼容Windows XP / Server 2003 / Vista / Windows 7 / Server 2008 / Server 2008 R2 / Windows 8 / Server 2012 R2 支持Unicode和x64 支持数字签名 适用于Windows Vista的用户帐户控制（UAC） 最重要的是，AutoIt将持续免费 - 但是如果你想支持在项目和网络托管上花费的时间，金钱和精力，那么你可以捐赠。 搭建AutoIt v3 脚本开发环境下载AutoIt v3 开发工具 下载时建议选择AutoIt3完全安装程序，它包含了： AutoIt 脚本运行软件、文档和实例 Aut2Exe - 将可执行脚本转换为独立的.exe文件 AutoitX - DLL/COM control。 具体作用我也不明白，安装后该目录中存放着写.dll文件 Editor - 一个删减版本的SciTE脚本编辑器 Au3Info - 用于探测指定窗口的详细信息，包括窗口大小和坐标、标题和文本、控件类型和ID等 安装时以缺省配置安装即可，安装完成即可获得我们所需的全部环境 二、项目简介接下来将使用AutoIt3开发一个“Helpdesk自动化工具”，并打造一个简洁实用的用户图形界面以便交互。 主要用途 用于新员工入职后电脑的自动化配置 功能实现 随时随地开箱即用：通过文件共享在内网每一台PC上运行本工具和软件，并兼容各种意外的情况 我们更希望完全实现无人值守，但这并不容易。由于AutoIt3通常使用标题和文本来等待、激活、操作窗口，所以意外窗口使得自动化过程很脆弱。管理员用户和普通用户下、软件重复安装时、电脑运行速度、甚至工具本身都可能造成意外窗口，这需要反复调试来使脚本兼容各种场景。 自动进行多任务的组合：在图形界面上通过点击预设的操作选项和用户选项，自动勾选所需的功能模块 如上图，点击“驻地(含VPN)”，会自动勾选上所需的系统配置、软件安装项和自动重启系统+登录域账户选项，在点击“运行”后自动配置安装，并自动重启，自动登录用户账户；当用户帐号登陆后，再次运行工具勾选对应的“用户选项”进行outlook、skype等配置 自动进行系统配置： 为了实现桌面统一规范化管理或应对之后可能面临的需求 例如：创建一个本地用户Admin、添加IT组至本地管理员组 公司在各地开设分职场，但由于员工数量较少未安排驻留的Helpdesk工程师，所有的需求和故障通过电话或远程桌面进行支持，为了应对电脑出现脱域无法登录，或本地管理员密码被爆破的情况，可以在初始配置时创建一个本地admin用户，加入users组，以便用户能顺利登录桌面提供TeamViewer远程授权；而事先将Helpdesk组加入电脑本地管理员组，可在远程到用户桌面后通过切换用户，夺回管理员权限并重置密码 自动进行软件安装：为了安装多个软件组合时，自动启动安装程序，自动配置选项直至安装完成 一般我们会将操纵系统和常用的办公软件通过MDT做统一部署，比如Office、输入法、PDF阅读器、桌面词典等，而各部门专用的业务软件则会在配置电脑时进行安装]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>AutoIt</tag>
        <tag>AutoIt3</tag>
        <tag>Helpdesk</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装matplotlib]]></title>
    <url>%2F2017%2F03%2F16%2FUbuntu%E5%AE%89%E8%A3%85matplotlib%2F</url>
    <content type="text"><![CDATA[Matplotlib是一个 Python 的 2D绘图库，它以各种硬拷贝格式和跨平台的交互式环境生成出版质量级别的图形。通过 Matplotlib，开发者可以仅需要几行代码，便可以生成绘图，直方图，功率谱，条形图，错误图，散点图等 在Ubuntu16.04安装Matplotlib1. 如果使用Ubuntu16.04系统自带Python3版本：$ pytho3 --version Python 3.5.1+ $ sudo apt install python3-matplotlib 正在读取软件包列表.. . 完成 正在分析软件包的依赖关系树 正在读取状态信息... 完成 将会同时安装下列软件： binutils blt cpp-5 fonts-lyx g++-5 gcc-5 gcc-5-base javascript-common libasan2 libatomic1 libblas-common libblas3 libcc1-0 libcilkrts5 libgcc-5-dev libgfortran3 libgomp1 libitm1 libjs-jquery libjs-jquery-ui liblapack3 liblsan0 libmpx0 libquadmath0 libstdc++-5-dev libstdc++6 libtsan0 libubsan0 python-matplotlib-data python3-cycler python3-dateutil python3-numpy python3-tk python3-tz tk8.6-blt2.5 ttf-bitstream-vera 建议安装： binutils-doc blt-demo gcc-5-locales g++-5-multilib gcc-5-doc libstdc++6-5-dbg gcc-5-multilib libgcc1-dbg libgomp1-dbg libitm1-dbg libatomic1-dbg libasan2-dbg liblsan0-dbg libtsan0-dbg libubsan0-dbg libcilkrts5-dbg libmpx0-dbg libquadmath0-dbg apache2 | lighttpd | httpd libjs-jquery-ui-docs libstdc++-5-doc dvipng ffmpeg inkscape ipython3 python-matplotlib-doc python3-cairocffi python3-gobject python3-nose python3-pyqt4 python3-scipy python3-sip python3-tornado texlive-extra-utils texlive-latex-extra ttf-staypuft gfortran python-numpy-doc python3-dev python3-numpy-dbg tix python3-tk-dbg 下列【新】软件包将被安装： blt fonts-lyx javascript-common libblas-common libblas3 libgfortran3 libjs-jquery libjs-jquery-ui liblapack3 python-matplotlib-data python3-cycler python3-dateutil python3-matplotlib python3-numpy python3-tk python3-tz tk8.6-blt2.5 ttf-bitstream-vera 下列软件包将被升级： binutils cpp-5 g++-5 gcc-5 gcc-5-base libasan2 libatomic1 libcc1-0 libcilkrts5 libgcc-5-dev libgomp1 libitm1 liblsan0 libmpx0 libquadmath0 libstdc++-5-dev libstdc++6 libtsan0 libubsan0 升级了 19 个软件包，新安装了 18 个软件包，要卸载 0 个软件包，有 480 个软件包未被升级。 2. 如果使用Python2.7$ python --version $ Python 2.7.11+ sudo apt install python-matplotlib 3. 如果安装了较新的python版本，就必须安装matplotlib依赖的一些库：$ python3 --version Python 3.5.2 $ sudo apt install python3.5-dev python3.5-tk tk-dev $ sudo apt install libfreetype6-dev g++ $ pip install --user matplotlib # 安装包时可能需要使用pip3，而不是pip。另外，如果这个命令不管用，可能需要删除标志`--user` Collecting matplotlib Downloading matplotlib-2.0.0-1-cp27-cp27mu-manylinux1_x86_64.whl (14.6MB) 100% |████████████████████████████████| 14.6MB 58kB/s Collecting numpy&gt;=1.7.1 (from matplotlib) Downloading numpy-1.12.0-cp27-cp27mu-manylinux1_x86_64.whl (16.5MB) 100% |████████████████████████████████| 16.5MB 70kB/s Collecting cycler&gt;=0.10 (from matplotlib) Downloading cycler-0.10.0-py2.py3-none-any.whl Collecting python-dateutil (from matplotlib) Downloading python_dateutil-2.6.0-py2.py3-none-any.whl (194kB) 100% |████████████████████████████████| 194kB 135kB/s Collecting functools32 (from matplotlib) Downloading functools32-3.2.3-2.zip Requirement already satisfied: six&gt;=1.10 in ./.local/lib/python2.7/site-packages (from matplotlib) Collecting pytz (from matplotlib) Downloading pytz-2016.10-py2.py3-none-any.whl (483kB) 100% |████████████████████████████████| 491kB 252kB/s Requirement already satisfied: pyparsing!=2.0.0,!=2.0.4,!=2.1.2,!=2.1.6,&gt;=1.5.6 in ./.local/lib/python2.7/site-packages (from matplotlib) Collecting subprocess32 (from matplotlib) Downloading subprocess32-3.2.7.tar.gz (54kB) 100% |████████████████████████████████| 61kB 477kB/s Building wheels for collected packages: functools32, subprocess32 Running setup.py bdist_wheel for functools32 ... done Stored in directory: /home/imkind/.cache/pip/wheels/3c/d0/09/cd78d0ff4d6cfecfbd730782a7815a4571cd2cd4d2ed6e69d9 Running setup.py bdist_wheel for subprocess32 ... done Stored in directory: /home/imkind/.cache/pip/wheels/7d/4c/a4/ce9ceb463dae01f4b95e670abd9afc8d65a45f38012f8030cc Successfully built functools32 subprocess32 Installing collected packages: numpy, cycler, python-dateutil, functools32, pytz, subprocess32, matplotlib Successfully installed cycler-0.10.0 functools32-3.2.3.post2 matplotlib-2.0.0 numpy-1.12.0 python-dateutil-2.6.0 pytz-2016.10 subprocess32-3.2.7 测试matplotlib在python中导入matplotlib，如果没有出现任何错误消息，说明matplotlib安装成功 $ python3 Python 3.5.2 (default, Nov 17 2016, 17:05:23) [GCC 5.4.0 20160609] on linux Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information. &gt;&gt;&gt; &gt;&gt;&gt; import matplotlib &gt;&gt;&gt; *参考文档* * 《Python编程从入门到实践》-- 数据可视化 15.1 安装matplotlib --p285-287]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>python3</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3从文件中读取数据]]></title>
    <url>%2F2017%2F03%2F12%2FPython3%E4%BB%8E%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[Python3有三种从文件中读取数据的方法： read() 读取整个文件内容；占用内存多 readline() 每次读取并返回一行数据；读取速度慢，每次占用内存少 readlines() 读取每一行数据，并作为元素存储在一个列表中 下面我将圆周率π的部分数值拆分为三行存储在文件pi_digits.txt中，然后使用python读取文件并拼接为完整的π：3.141592653589793238462643383279，注意得到结果是字符串，并不是数字 使用.read()读取文件pi_digits.txt的全部内容 with open(&apos;pi_digits.txt&apos;) as file_object: &apos;&apos;&apos;打开文件&apos;&apos;&apos; print(file_object.read()) &apos;&apos;&apos;打印文件内容&apos;&apos;&apos; 打印结果： 3.1415926535 8979323846 2643383279 方法一：.read()with open(&apos;pi_digits.txt&apos;) as file_object: &apos;&apos;&apos;打开文件&apos;&apos;&apos; pi = file_object.read() &apos;&apos;&apos;读取文件内容并赋给变量content&apos;&apos;&apos; print(pi.replace(&quot;\n&quot;,&quot;&quot;).replace(&quot; &quot;,&quot;&quot;)) &apos;&apos;&apos;使用.replace()将每行末尾的换行符和空格，替换为空，打印拼接完成的π&apos;&apos;&apos; 方法二：逐行读取with open(&apos;pi_digits.txt&apos;) as file_object: &apos;&apos;&apos;打开文件&apos;&apos;&apos; pi = &apos;&apos; &apos;&apos;&apos;初始化变量pi&apos;&apos;&apos; for line in file_object: &apos;&apos;&apos;逐行读取文件的每一行内容&apos;&apos;&apos; pi += line.strip() &apos;&apos;&apos;剔除元素首尾的空字符后做字符串拼接，并赋给pi&apos;&apos;&apos; # pi += &quot;&quot;.join(line.strip()) print(pi) &apos;&apos;&apos;打印拼接完成的π&apos;&apos;&apos; 方法三：.readline()with open(&apos;pi_digits.txt&apos;) as file_object: &apos;&apos;&apos;打开文件&apos;&apos;&apos; pi = &apos;&apos; &apos;&apos;&apos;初始化变量pi&apos;&apos;&apos; while True: &apos;&apos;&apos;???&apos;&apos;&apos; line = file_object.readline() &apos;&apos;&apos;读取一行内容赋给变量line&apos;&apos;&apos; if line: &apos;&apos;&apos;如果读取到一行数据&apos;&apos;&apos; #print(line) pi += line.strip() &apos;&apos;&apos;剔除这行数据两端的空字符之后拼接并赋给pi&apos;&apos;&apos; else: &apos;&apos;&apos;如果读取内容为空&apos;&apos;&apos; break &apos;&apos;&apos;退出循环&apos;&apos;&apos; print(pi) &apos;&apos;&apos;打印拼接完成的π&apos;&apos;&apos; 方法四：.readlines()with open(&apos;pi_digits.txt&apos;) as file_object: &apos;&apos;&apos;打开文件&apos;&apos;&apos; lines = file_object.readlines() &apos;&apos;&apos;读取文件的每行作为元素存入列表&apos;&apos;&apos; print(lines) &apos;&apos;&apos;打印列表&apos;&apos;&apos; pi = &apos;&apos; &apos;&apos;&apos;初始化变量pi&apos;&apos;&apos; for line in lines: &apos;&apos;&apos;遍历列表的元素&apos;&apos;&apos; pi += line.strip() &apos;&apos;&apos;剔除元素首尾的空字符后做字符串拼接，并赋给pi&apos;&apos;&apos; print(pi) &apos;&apos;&apos;打印拼接完成的π&apos;&apos;&apos; 方法五：.read().split()with open(&apos;pi_digits.txt&apos;) as file_object: &apos;&apos;&apos;打开文件&apos;&apos;&apos; lines = file_object.read().split() &apos;&apos;&apos;将文件分割为字符串列表，相对于.readlines(),这种方法在分割内容时，就剔除了空字符&apos;&apos;&apos; print(lines) &apos;&apos;&apos;打印列表&apos;&apos;&apos; pi = &apos;&apos; &apos;&apos;&apos;初始化变量pi，用于表示完整的π&apos;&apos;&apos; for line in lines: &apos;&apos;&apos;遍历列表的元素&apos;&apos;&apos; pi += line &apos;&apos;&apos;将每个元素做字符串拼接，并赋给pi&apos;&apos;&apos; print(pi) &apos;&apos;&apos;打印拼接完成的π&apos;&apos;]]></content>
      <categories>
        <category>编程之路</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>read()</tag>
        <tag>readline()</tag>
        <tag>readlines()</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu磁盘空间不足:卷boot仅剩余xxMB的磁盘空间]]></title>
    <url>%2F2017%2F02%2F27%2FUbuntu%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%3A%E5%8D%B7boot%E4%BB%85%E5%89%A9%E4%BD%99xxMB%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[最近启动Ubuntu16.04进入桌面之后，总弹出”磁盘空间不足:卷boot仅剩余5.1MB的硬盘空间”的提示 点击”分析…”之后提示”无法扫描”/boot”所包含的某些文件夹 Error opening directory ‘/boot/lost+found’:权限不够” 安装Ubuntu16.04系统时，分配给boot分区200MB的磁盘空间，升级系统之后，之前的内核版本依然会存在boot分区中，造成分区的空间不足。需要删除旧的Linux内核版本，保留当前使用的版本即可。 1. 查看已存在的Linux-image版本$ sudo dpkg --get-selections |grep linux-image linux-image-4.4.0-21-generic install linux-image-4.4.0-59-generic install linux-image-4.4.0-62-generic install linux-image-4.4.0-64-generic install linux-image-extra-4.4.0-21-generic install linux-image-extra-4.4.0-59-generic install linux-image-extra-4.4.0-62-generic install linux-image-extra-4.4.0-64-generic install linux-image-generic install 2. 查看当前正在使用的Linux内核版本$ uname -r 4.4.0-62-generic 或 $ cat /proc/version Linux version 4.4.0-62-generic (buildd@lcy01-30) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) #83-Ubuntu SMP Wed Jan 18 14:10:15 UTC 2017 3. 卸载其它不用的内核版本$ sudo apt purge linux-image-4.4.0-21-generic $ sudo apt purge linux-image-4.4.0-59-generic 4. 再次查看剩余的版本$ sudo dpkg --get-selections | grep linux-image linux-image-4.4.0-62-generic install linux-image-4.4.0-64-generic install linux-image-extra-4.4.0-62-generic install linux-image-extra-4.4.0-64-generic install linux-image-generic install 5. 查看/boot分区的空间使用情况$ df -lh | grep boot 文件系统 1K-块 已用 可用 已用% 挂载点 /dev/sda1 180M 104M 64M 62% /boot 参考文档 Ubuntu提示卷boot仅剩0字节的硬盘空间，解决办法]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github_Pages灾备至Coding_Pages]]></title>
    <url>%2F2017%2F02%2F26%2FGithub_Pages%E7%81%BE%E5%A4%87%E8%87%B3Coding_Pages%2F</url>
    <content type="text"><![CDATA[周四晚间在家访问我托管在Github Pages上的Blog时发现网站打不开，确认本地网络没问题，尝试清理浏览器缓存，刷新系统缓存，问题依旧。下意识的回想起来今天我修改代码啦？调整过DNSPod的解析记录啦？还是站点没备案被和谐了？……打开微博刷新了一下，看到关注的几个技术大V:Easy、刘巍峰、梁斌penny都发布或转发了Github无法访问的消息，我有点惊讶：卧槽！why？ 随即查看了DNSPod的监控，看到托管在Github Pages的三个站点全部告警。 零点前后部分地区开始恢复访问，但周五上午我在工地访问Github依然时断时续，速度极慢，而github.io始终无法访问，直到中午才恢复正常。事后没能找到关于本次Github无法访问的详细解析，但发现相对我这样的Git小白用户，真正的开发人员似乎都见怪不怪，这次只是又一次而已。 我想起来刚接触Hugo时在Hugo中文文档看到的那篇通过webhook将Hugo自动部署至GitHub Pages和GitCafe Pages，那时完全看不懂，其实现在也是…… 不过我突然明白为什么托管在Github上的代码也要容灾，虽然Github的服务相对稳定可靠，但我们的网络并非如此，将代码备份到国内的代码托管服务上是很有必要的。目前我并不需要自动部署项目至Github和GitCafe，我只希望能够将本地代码同时push到两个远程库，手工创建版本库，并推送到远程仓库，可以让我更熟练Git的常用命令。 这个方法很简单：先将Github上已有的仓库导入到Coding，在本地.git版本库配置文件中添加Coding远程仓库的地址，一次push即可将代码同时推送到Github和Coding。 1. 注册Coding起初我是冲着GitCafe去的，但现在已经合并到Coding了。 2. 创建项目的同时导入Github的仓库 3. 本地.git版本库追加Coding远程仓库地址修改 .gitmodules $ vim .gitmodules [submodule &quot;public&quot;] path = public url = git@github.com:mingguilu/blog.mingguilu.com.git url = git@git.coding.net:Mingguilu/blog.mingguilu.com.git # 添加Coding远程仓库地址 修改 .git/config $ vim .git/config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true [remote &quot;origin&quot;] url = git@github.com:mingguilu/blog_mingguilu_com.git url = git@git.coding.net:Mingguilu/blog_mingguilu_com.git # 添加Coding远程仓库地址 fetch = +refs/heads/*:refs/remotes/origin/* [branch &quot;master&quot;] remote = origin merge = refs/heads/master [submodule &quot;public&quot;] url = git@github.com:mingguilu/blog.mingguilu.com.git url = git@git.coding.net:Mingguilu/blog.mingguilu.com.git # 添加Coding远程仓库地址 修改 .git/modules/public/config $ vim .git/modules/public/config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true worktree = ../../../public [remote &quot;origin&quot;] url = git@github.com:mingguilu/blog.mingguilu.com.git url = git@git.coding.net:Mingguilu/blog.mingguilu.com.git # 添加Coding远程仓库地址 fetch = +refs/heads/*:refs/remotes/origin/* [branch &quot;master&quot;] remote = origin merge = refs/heads/master 4. 至此，一次push即可同时推送到Github和Coding$ git push origin master 对象计数中: 13, 完成. Delta compression using up to 4 threads. 压缩对象中: 100% (13/13), 完成. 写入对象中: 100% (13/13), 1.68 MiB | 368.00 KiB/s, 完成. Total 13 (delta 5), reused 0 (delta 0) remote: Resolving deltas: 100% (5/5), completed with 5 local objects. To git@github.com:mingguilu/blog.mingguilu.com.git # 推送至Github远程仓库 c5e9106..ebb5fca master -&gt; master 对象计数中: 13, 完成. Delta compression using up to 4 threads. 压缩对象中: 100% (13/13), 完成. 写入对象中: 100% (13/13), 1.68 MiB | 0 bytes/s, 完成. Total 13 (delta 5), reused 0 (delta 0) To git@git.coding.net:Mingguilu/blog.mingguilu.com.git # 推送至Coding远程仓库 c5e9106..ebb5fca master -&gt; master 5. 开启Coding仓库的Pages服务并绑定域名 6. 在DNSPod的增加域名别名解析记录至pages.coding.me.，并设置为默认线路，xxx.github.io设置为国外线路到这里，已完成将Github仓库导入到Coding项目作为备份，并实现Blog的在线访问的灾备，和国内访问速度的优化。]]></content>
      <categories>
        <category>趣玩尝新</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>Coding Pages</tag>
        <tag>GitCafe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7使用YUM搭建Samba文件共享]]></title>
    <url>%2F2017%2F02%2F23%2FCentOS7%E4%BD%BF%E7%94%A8YUM%E6%90%AD%E5%BB%BASamba%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[1. 关于SambaSamba用于在Linux、UNIX和Windows之间提供安全、稳定、快速的文件和打印服务。 Samba所需的软件包括： Samba 服务器端软件包 Samba-client 客户端软件包 Samba-common Samba公共文件软件包 Samba有smbd和nmbd两个守护进程组成，两个进程的而启动脚本是独立的： smbd服务进程 为客户端提供文件共享和打印机服务，还负责用户权限验证以及锁功能，默认监听端口TCP协议的139和445 nmbd服务进程 提供NetBIOS名称服务，以满足基于Common Internet File System (CIFS)协议的共享访问，默认使用UDP协议的137端口 2. 关闭防火墙和SELinuxCentOS7防火墙与SELinux默认是开启状态，并拒绝远程用户对Samba的访问，需要暂时关闭。 查看防火墙状态 # systemctl status firewalld.service ● firewalld.service - firewalld - dynamic firewall daemon Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled) Active: active (running) since 二 2016-10-18 00:23:15 CST; 38min ago Main PID: 843 (firewalld) CGroup: /system.slice/firewalld.service └─843 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid 10月 18 00:23:15 localhost.localdomain systemd[1]: Started firewalld - dynamic firewall daemon. 查看SELinux状态 # getenforce Enforcing 临时关闭SELinux # setenforce 0 永久关闭SELinux # sed -i &quot;/SELINUX=/c SELINUX=disable&quot; /etc/sysconfig/selinux 临时关闭防火墙 # systemctl stop firewalld.service 永久关闭防火墙 # systemctl disable firewalld.service Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service. Removed symlink /etc/systemd/system/basic.target.wants/firewalld.service. 3. 配置Samba服务器安装Samba软件 # yum install -y samba # rpm -qa | grep samba samba-common-4.4.4-12.el7_3.noarch samba-client-libs-4.4.4-12.el7_3.x86_64 samba-common-tools-4.4.4-12.el7_3.x86_64 samba-4.4.4-12.el7_3.x86_64 samba-common-libs-4.4.4-12.el7_3.x86_64 samba-libs-4.4.4-12.el7_3.x86_64 启动smb和nmb服务 # systemctl start smb.service # systemctl start nmb.service 停止smb和nmb服务 # systemctl stop smb.service # systemctl stop nmb.service 重启smb和nmb服务 # systemctl restart smb.service # systemctl restart nmb.service 查看smb和nmb服务状态 # systemctl status smb.service # systemctl status nmb.service 设置smb和nmb服务器自启动 # systemctl enable smb.service # systemctl enable nmb.service 4. 创建共享目录假设目前有设计、开发、运维三个部门，各自创建一个部门共享目录供部门内部共享文件，和一个公共共享目录供部门间互相共享文件： # mkdir -p /filesrv/{design,develop,ops,share/{design,develop,ops}} # tree /filesrv/ /filesrv/ ├── design ├── develop ├── ops └── share ├── desing ├── develop └── ops 7 directories, 0 files 5. 创建Samba账户在使用useradd创建系统账户时使用参数 -s /sbin/nologin 指定账户无法登陆系统，提高账户安全性 Smaba共享使用的账户就是服务器端操作系统中真实存在的系统账户，但必须使用smbpasswd命令添加为Samba账户并设置独立的密码，而不可以使用系统密码 Samba默认将账户与密码文件存放在/var/lib/samba/private目录下 假设每个部门创建2个Samba账户，并加入对应部门的组中： # groupadd design # useradd design1 -g design -s /sbin/nologin -M # useradd design2 -g design -s /sbin/nologin -M # smbpasswd -a design1 # smbpasswd -a design2 # groupadd develop # useradd develop1 -g develop -s /sbin/nologin -M # useradd develop2 -g develop -s /sbin/nologin -M # smbpasswd -a develop1 # smbpasswd -a develop2 # groupadd ops # useradd ops1 -g ops -s /sbin/nologin -M # useradd ops2 -g ops -s /sbin/nologin -M # smbpasswd -a ops1 # smbpasswd -a ops2 6. 修改配置文件Samba默认配置文件：/etc/samba/smb.conf 好习惯说三遍：备份配置文件！备份配置文件！备份配置文件！ 配置文件解析： [global] # 定义全局策略 workgroup = SAMBA # 定义工作组 interfaces = lo 192.168.80.101/24 # 指定samba监听哪些网络端口 hosts allow = 127. 192.168.80. EXCEPT 192.168.80.250 # 指定有权访问Samba服务器资源的主机，与之相反的是hosts deny，使用EXCEPT可以指定例外的IP地址 log_file = /var/log/samba/log.%m # 指定日志文件，每个访问主机会独立产生日志 max log size = 50 # 定义单个日志文件最大容量为50kb security = user # 设置客户端访问Samba的方式 # user表示使用用户名和密码验证身份 # share表示匿名访问 # server表示验证身份的访问，但账户信息保存在另一台smb服务器上 # domain也表示验证身份的访问，但账户信息保存在活动目录中 passdb backend = tdbsam # 账户与密码的存储方式 # smbpasswd表示老的明文格式存储账户及密码 # tdbsam表示基于TDB的密文格式存储 # ldapsam表示用LDAP存储账户资料 guest account = nobody # 设置匿名账户为nobody deadtime = 10# 连接回话自动关闭的期限，在大量并发访问环境中可提高服务器性能 max connections = 0 # 设置最大连接数，0表示无限制 printing = cups # 设置打印工具为cups ?? http://yuanbin.blog.51cto.com/363003/115768/ printcap name = cups # ？？？ load printers = yes # 是否共享打印机 cups options = raw # 打印属性 [filesrv] # 共享名称 comment = Home Directories # 共享描述信息 path = /filesrv # 共享路径 browseable = no # 是否对所有人可见（yes|no） public = no # 是否被所有人可读(yes|no) read only = No # 是否只读（yes|no） writeable = no # 是否可写（yes|no） write list = # 可写用户或组列表 create mask = 0744 # 客户端上传文件的默认权限 directory mask = 0755 # 客户端创建目录的默认权限 valid users = # 白名单 invalid users = # 黑名单 inherit acls = Yes # 继承访问控制列表（yes|no） guest ok = no # 是否允许匿名访问，仅当全局设置security=share时有效（yes|no） available = yes # 是否启用该共享(yes|no) 假设每个Samba目录都对自己部门的共享目录可读可写，所有的Samba用户都对share目录可读可写 # cat smb.conf [global] workgroup = SAMBA security = user passdb backend = tdbsam printing = cups printcap name = cups load printers = yes cups options = raw [homes] comment = Home Directories valid users = %S, %D%w%S browseable = No read only = No inherit acls = Yes available = no # 关闭用户家目录共享 [printers] comment = All Printers path = /var/tmp printable = Yes create mask = 0600 browseable = No [print$] comment = Printer Drivers path = /var/lib/samba/drivers write list = root create mask = 0664 directory mask = 0775 [design] comment = design share path = /filesrv/design write list = @design [develop] comment = develop share path = /filesrv/develop write list = @develop [ops] comment = ops share path = /filesrv/ops write list = @ops [share] comment = public share path = /filesrv/share write list = @design @develop @ops create mask = 0775 # 创建文件的用户和所属组拥有可读写执行权限，其它用户可读可执行 directory mask = 0775 # 创建目录的用户和所属组拥有可读写执行权限，其它用户可读可执行 7. 修改共享目录权限除了要在Samba主配置文件中定义权限外，还需要为系统目录设置正确的权限 # chmod 1770 /filesrv/{design,develop,ops,share} # chmod 1777 /filesrv/share -R # chown :design /filesrv/design # chown :develop /filesrv/develop # chown :ops /filesrv/ops 8. 重启Samba服务# systemctl restart smb.service 9. 访问Samba共享 Windows客户端访问:\\Samba-server-ip 使用用户ops1验证，可见四个共享目录，但只有ops和share可访问 无权限访问design和develop目录 Linux客户端访问 查看Samba主机上的共享信息 # smbclient -L \\192.168.80.102 Enter root&apos;s password: # 仅查看共享信息不需要密码，此处直接回车，以匿名用户查看 Anonymous login successful Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4] Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers design Disk design share develop Disk develop share ops Disk ops share share Disk public share IPC$ IPC IPC Service (Samba 4.4.4) Anonymous login successful Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4] Server Comment --------- ------- LOCALHOST Samba 4.4.4 Workgroup Master --------- ------- SAMBA LOCALHOST WORKGROUP IMKINDU-PC 访问Samba共享目录 # smbclient -U develop2 //192.168.80.102/develop Enter develop2&apos;s password: Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4] smb: \&gt; smb: \&gt; ls . D 0 Sat Feb 25 05:54:45 2017 .. D 0 Fri Feb 24 18:36:11 2017 test D 0 Sat Feb 25 05:44:55 2017 test1.txt N 0 Sat Feb 25 05:54:40 2017 test2.md N 0 Sat Feb 25 05:54:40 2017 test3 D 0 Sat Feb 25 05:54:45 2017 39294212 blocks of size 1024. 38295904 blocks available 常见问题FQA1. 安装了samba-client，但使用smbclient命令时如下报错：# smbclient -L \\192.168.80.102 smbclient: relocation error: /lib64/libsamba-credentials.so.0: symbol GSS_KRB5_CRED_NO_CI_FLAGS_X, version gssapi_krb5_2_MIT not defined in file libgssapi_krb5.so.2 with link time reference # 缺失samba软件 解决方法：安装samba软件 # yum install -y samba 2. 查看Samba主机共享信息时，有报错：# smbclient -L \\192.168.80.102 Enter root&apos;s password: session setup failed: NT_STATUS_LOGON_FAILURE # 登陆失败，一般为账户或密码错误 解决方法：仅查看共享信息不需要密码，此处直接回车，以匿名用户查看 3. 访问Samba共享目录时，有报错# smbclient -U develop2 //192.168.80.102 \\192.168.80.102: Not enough &apos;\&apos; characters in service # 共享路径输入有误，一般使用//ip格式访问时会报错 解决：按照正确的格式输入共享路径 //Samba-server-ip/share-name 4. 访问Samba共享目录时，有报错：# smbclient -U develop2 //192.168.80.102/filesrv Enter develop2&apos;s password: Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4] tree connect failed: NT_STATUS_BAD_NETWORK_NAME # 输入性错误，一般为输入了错误的共享名称 解决方法：检查并修正共享名称，比如本案中虽然各部门共享目录存放在filesrv目录中，但Samba配置文件中并未将filesrv设置为共享目录 # smbclient -U develop2 //192.168.80.102/develop 5. 访问共享目录时，有报错：# smbclient -U develop2 //192.168.80.102/develop Enter develop2&apos;s password: Connection to 192.168.80.102 failed (Error NT_STATUS_HOST_UNREACHABLE) # 无法连接Samba服务器，一般为网络故障或防火墙策略造成 解决方法：排除网络连接问题，调整防火墙策略，或关闭防火墙 6. 访问共享目录是，有报错：# smbclient -U develop2 //192.168.80.102/ops Enter develop2&apos;s password: Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.4.4] smb: \&gt; smb: \&gt; ls NT_STATUS_ACCESS_DENIED listing \* # 访问被拒绝，权限不足 smb: \&gt; mkdir test NT_STATUS_MEDIA_WRITE_PROTECTED making remote directory \test # 写保护，权限不足 解决方法： 检查Samba目录的共享权限，或服务器文件系统的访问权限，是否不允许客户端或用户访问 参考文档 《Linux运维之道（第二版）》 - Samba文件共享 P176~189]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>Samba</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu使用一键安装包安装禅道开源版]]></title>
    <url>%2F2017%2F02%2F18%2FUbuntu%E4%BD%BF%E7%94%A8%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%8C%85%E5%AE%89%E8%A3%85%E7%A6%85%E9%81%93%E5%BC%80%E6%BA%90%E7%89%88%2F</url>
    <content type="text"><![CDATA[相比搭建LAMP环境使用源码包安装禅道，使用Linux一键安装包则简单很多 1. 下载并安装Linux 64位一键安装包下载禅道9.0.1版本Linux 64位一键安装包 $ wget http://dl.cnezsoft.com/zentao/9.0.1/ZenTaoPMS.9.0.1.zbox_64.tar.gz 直接将安装包解压缩到/opt目录下，即安装完成 $ sudo tar -zxvf ZenTaoPMS.9.0.1.zbox_64.tar.gz -C /opt/ 2. 使用zbox命令管理Apache和Ｍysql服务获取zbox命令的帮助 $ sudo /opt/zbox/zbox -h Usage: zbox.php {start|stop|restart|status} Options: -h --help Show help. -ap --aport Apache port, default 80 # 修改Apache服务端口号 -mp --mport Mysql port, default 3306 # 修改Mysql服务端口号 开启Apache和Ｍysql服务 $ sudo /opt/zbox/zbox start Start Apache success Start Mysql success 重启Apache和Ｍysql服务 $ sudo /opt/zbox/zbox restart Retart Apache success Retart Mysql success 停止Apache和Ｍysql服务 $ sudo /opt/zbox/zbox stop Stop Apache success Stop Mysql success 查看Apache和Ｍysql服务状态 $ sudo /opt/zbox/zbox status Apache is not running Mysql is not running 开启Apache和Ｍysql服务后，在浏览器访问禅道管理系统 http://server-ip 进入“开源版”登录界面，默认帐号：admin，密码：123456 登录成功 3. 访问数据库网页登录数据库数据库管理用的是adminer，为了安全，访问adminer的时候需要身份验证，需要运行/opt/zbox/auth/adduser.sh来添加用户 在普通用户下 $ sudo ./adduser.sh This tool is used to add user to access adminer Account: adminer1 passwd123! # 设置用户名和密码 ./adduser.sh: 3: read: Illegal option -s Adding password for user adminer1 在root用户下 ＃ cd /opt/zbox/auth/ ＃ ./adduser.sh This tool is used to add user to access adminer Account: adminer2 ＃ 设置用户名 Password: ＃ 设置密码(隐式) Adding password for user adminer2 在访问禅道管理系统时，点击右下角的“数据库管理” adminer身份验证 验证通过进入数据web管理台 命令行连接数据库登录数据库，默认帐号:root，密码为空 /opt/zbox/bin/mysql -u root -P mysql端口 -p $ /opt/zbox/bin/mysql -uroot -p # 使用默认的3306端口，可省略`-P`参数 Enter password: # 密码为空 Welcome to the MySQL monitor. Commands end with ; or \g. Your MySQL connection id is 58 Server version: 5.5.45 Source distribution Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement. mysql&gt; 常见问题FQA1. 如果服务器上已经搭建了LAMP环境，80端口和3306端口被占用了，无法启动$ sudo /opt/zbox/zbox start (98)Address already in use: AH00073: make_sock: unable to listen for connections on address 0.0.0.0:80 no listening sockets available, shutting down AH00015: Unable to open logs Start Apache fail. You can see the log /opt/zbox/logs/apache_error.log Start Mysql fail. You can see the log /opt/zbox/logs/mysql_error.log 解决方法： 修改Apache端口 $ sudo /opt/zbox/zbox -ap 8080 修改Mysql端口 $ sudo /opt/zbox/zbox -mp 3308 在浏览器访问禅道管理系统时指定端口号 http://server-ip:8080 参考文档 linux用一键安装包]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>禅道</tag>
        <tag>Zentao</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu使用源码包安装禅道开源版]]></title>
    <url>%2F2017%2F02%2F17%2FUbuntu%E4%BD%BF%E7%94%A8%E6%BA%90%E7%A0%81%E5%8C%85%E5%AE%89%E8%A3%85%E7%A6%85%E9%81%93%E5%BC%80%E6%BA%90%E7%89%88%2F</url>
    <content type="text"><![CDATA[1. 搭建LAMP环境上一篇文档，已经在Ubuntu server 16.04 上使用apt搭建了LAMP环境，本文在此基础上使用源码包安装禅道9.0.1开源版 ２. 下载并解压禅道源码包安装zip、unzip软件sudo apt install -y zip unzip #### 下载禅道9.0.1开源版源码包 wget http://dl.cnezsoft.com/zentao/9.0.1/ZenTaoPMS.9.0.1.zip 解压缩源码包unzip ZenTaoPMS.9.0.1.zip 将解压后的源码目录拷贝到apache网站根目录sudo cp -rvf zentaopms/ /var/www/html/ $ ls /var/www/html/zentaopms/ bin config db doc framework lib module tmp VERSION www ３. 安装禅道在浏览器访问 http://server-ip/zentaopms/www/index.php，进入安装页面 点击“开始安装”，阅读并同意授权协议 系统检查，两项未通过 根据图提示修复临时文件目录和上传文件目录的权限chmod o=rwx -R /var/www/html/zentaopms/tmp/ chmod o=rwx -R /var/www/html/zentaopms/www/data 刷新系统检查，全部通过 输入数据库root密码，生成配置文件 保存配置文件 根据提示拷贝文本框中的配置内容，保存到” /var/www/html/zentaopms/config/my.php “中 $ sudo vim /var/www/html/zentaopms/config/my.php $ cat /var/www/html/zentaopms/config/my.php &lt;?php $config-&gt;installed = true; $config-&gt;debug = false; $config-&gt;requestType = &apos;GET&apos;; $config-&gt;db-&gt;host = &apos;127.0.0.1&apos;; $config-&gt;db-&gt;port = &apos;3306&apos;; $config-&gt;db-&gt;name = &apos;zentao&apos;; $config-&gt;db-&gt;user = &apos;root&apos;; $config-&gt;db-&gt;password = &apos;passwd123!&apos;; $config-&gt;db-&gt;prefix = &apos;zt_&apos;; $config-&gt;webRoot = getWebRoot(); $config-&gt;default-&gt;lang = &apos;zh-cn&apos;; 设置帐号 安装成功 正式登录禅道管理系统之前，为了安全起见，必须删除install.php和upgrade.php $ pwd /var/www/html/zentaopms/www/ $ sudo rm -rvf install.php upgrade.php 已删除&apos;install.php&apos; 已删除&apos;upgrade.php&apos; 登录禅道管理系统 登录成功 常见问题FQA１. 在“生成配置文件”时，出现如下报错： 解决方法： 可能是由于禁止了MySql或ＭriaDB的root用户远程登录，需要允许root用户远程登录 改表法：更改“mysql”数据库里的“user”表里的“host”项，从“localhost”改为“%”，并刷新权限，让修改生效 $ mysql -uroot -p MariaDB [(none)]&gt; use mysql; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed MariaDB [mysql]&gt; select user,host from user; +————+———–+ | user | host | +————+———–+ | phpmyadmin | localhost | | root | localhost | +————+———–+ 2 rows in set (0.00 sec) MariaDB [mysql]&gt; update user set host = ‘%’ where user = ‘root’ and host = ‘localhost’; ＃更改“mysql”数据库里的“user”表里的“host”项，从“localhost”改为“%” Query OK, 1 row affected (0.00 sec) Rows matched: 1 Changed: 1 Warnings: 0 MariaDB [mysql]&gt; flush privileges; ＃ 刷新权限，让修改生效 Query OK, 0 rows affected (0.00 sec) MariaDB [mysql]&gt; select user,host from user; +————+———–+ | user | host | +————+———–+ | root | % | | phpmyadmin | localhost | +————+———–+ 2 rows in set (0.00 sec) 2. “保存配置文件”后，安装页面变成空白，无法设置帐号解决方法： 可能是将配置内容保存到了/var/www/html/zentaopms/config/config.php，且保存时，没有去掉第一行&lt;?php，导致配置文件出错。注意查看config.php文件第一行，就是&lt;?php。 默认情况下/var/www/html/zentaopms/config/my.php是不存在的，可以先sudo touch my.php或直接sudo vim my.php，再将配置内容保存进去。 参考文档 使用源码包安装(各系统通用)禅道]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>禅道</tag>
        <tag>Zentao</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu使用apt搭建LAMP]]></title>
    <url>%2F2017%2F02%2F16%2FUbuntu%E4%BD%BF%E7%94%A8apt%E6%90%AD%E5%BB%BALAMP%2F</url>
    <content type="text"><![CDATA[１. Web服务Apache2安装Apache2$ sudo apt install -y apache2 查看apache2版本$ sudo apache2 -v Server version: Apache/2.4.18 (Ubuntu) Server built: 2016-07-14T12:32:26 启动apache2.service$ sudo systemctl start apache2.service 停止apache2.service$ sudo systemctl stop apache2.service 查看apache2.service状态$ sudo systemctl status apache2.service 在浏览器测试访问http://server-ip 2. 数据库服务MariaDB安装MariaDB$ sudo apt install -y mariadb-server mariadb-client 设置MariaDB root用户密码$ sudo mysql_secure_installation Enter current password for root (enter for none): ＃ 输入当前的root密码：没有就直接回车 Set root password? [Y/n] y ＃是否设置密码：是 New password: ＃设置密码 Re-enter new password: ＃再次确认密码 Remove anonymous users? [Y/n] y ＃ 是否移除匿名用户：是 Disallow root login remotely? [Y/n] y ＃ 禁止root用户远程登录：是 Remove test database and access to it? [Y/n] y ＃ 是否删除默认创建的test数据库，并清除所有对test数据的权限设置：是 Reload privilege tables now? [Y/n] y ＃ 是否重新加载权限表：是 All done! If you&apos;ve completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB! 测试登录MariaDB$ sudo mysql -uroot -p 或 $ sudo mysql -u root -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 59 Server version: 10.0.29-MariaDB-0ubuntu0.16.04.1 Ubuntu 16.04 Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others. Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement. MariaDB [(none)]&gt; 启动MariaDB$ sudo systemctl start mysql-service 停止MariaDB$ sudo systemctl stop mysql-service 查看MariaDB$ sudo systemctl status mysql.service 3. 脚本语言PHP安装PHP7$ sudo apt install -y php7.0 php7.0-mysql php7.0-curl php7.0-json php7.0-cgi libapache2-mod-php7.0 查看php版本$ sudo php -v PHP 7.0.13-0ubuntu0.16.04.1 (cli) ( NTS ) Copyright (c) 1997-2016 The PHP Group Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies with Zend OPcache v7.0.13-0ubuntu0.16.04.1, Copyright (c) 1999-2016, by Zend Technologies 创建php探针$ sudo vim /var/www/html/test.php $ sudo cat /var/www/html/test.php &lt;?php phpinfo(); ?&gt; 在浏览器测试php探针文件http://server-ip/test.php 4. phpMyAdmin安装phpMyAdmin$ sudo apt install -y phpmyadmin 选择运行phpMyAdmin的web服务 确认配置phpMyAdmin管理的数据库 设置phpMyAdmin的密码 在浏览器测试访问phpMyAdminhttp://server-ip/phpmyadmin 登录phpMyAdmin用户名：phpmyadmin 密码：（上面安装时设置的phpmyadmin的密码） 登录成功，进入phpMyAdmin的web界面 注意：如果使用root用户和密码登录phpMyAdmin,则会报错：待解决：为什么root无法登录？因为禁止了root用户远程登录数据库？该怎么处理？ 至此，已成功在Ubuntu 16.04 LTS上搭建LAMP。 参考链接在 Ubuntu Server 16.04 LTS 上安装 LAMP]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>LAMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于JennyCh_Blog的使用文档]]></title>
    <url>%2F2017%2F02%2F14%2F%E5%85%B3%E4%BA%8EJennyCh_Blog%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[一 准备1. Hugo简述:Hugo是由Go语言实现的静态网站生成器。其特点是：简单、易用、高效、易扩展、快速部署。 官方网站：http://gohugo.io/ 入门推荐：Hugo中文文档 安装:下载适用的windows的hugo_x.xx.x_Windows-64bit.zip 解压后重命名为hugo.exe并存放在c:\Program Files\hugo，并把路径添加到系统环境变量Path中，然后再cmd中输入hugo version测试是否可用 &gt; hugo version Hugo Static Site Generator v0.16 BuildDate: 2016-06-06T08:33:34+08:00 2. Github pages 简述：Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目 入门推荐：廖雪峰Git教程、git - 简明指南 GitHub 是一个面向开源及私有软件项目的托管平台，只支持 Git 作为唯一的版本库格式进行托管 Github pages用于将托管在Github上的项目发布位个人主页网站或项目主页网站 安装Git下载Git for windows，以默认选项安装，在桌面双击运行Git Bash 创建Github仓库在Repositories页面点击New创建新仓库 以下是JennyCh托管在Github个人主页和博客项目的仓库 blog 托管JennyCh Blog的静态博客网页的仓库 jennych_blog_hugo 托管JennyCh Blog的站点源代码的仓库 jennych.github.io 托管JennyCh个人主页静态网页的仓库 jennych_github_io 托管JennyCh个人主页的站点源代码的仓库 启用Github Pages个人主页：例如https://jennych.github.io ，创建Ｇithub帐号.github.io的仓库，并上传个人主页静态页面项目即可 项目主页：例如https://jennych.github.io/blog/ ，创建随意名称的仓库，并上传项目的静态页面，只要在根目录下存在index.html，即可开启Ｇithub Pages，settings－－&gt;Ｇithub Pages－－&gt;Source－－&gt;master branch－－&gt; Save，即可访问项目主页https://Github帐号.github.io/项目仓库名/ 3. MarkdownMarkdown 是一种轻量级的「标记语言」，它拥有很多优点，语法简洁明了、学习容易，而且功能比纯文本更强，导出格式随心所欲，因此有很多人用它写博客 入门推荐：Markdown——入门指南 MarkdownPad 是Windows下的一个多功能Markdown编辑器 二 使用Hugo创建Hugo静态站点 hugo new site 站点名称 $ hugo new site my_website Congratulations! Your new Hugo site is created in &quot;D:\\Hellolworld\\my_website&quot;. Hugo站点下包含如下目录和文件： archetypes：存放创建新文章时自动生成内容的模板 content：存放markdown格式的文章 layouts：存放网站前端的html模板 static：存放img、font、css、js等文件 public: 存放生成的静态网页内容 theme: 存放网站主题模板(一般将模板内容直接覆盖到根目录) config.toml: 网站的配置文件，一般包括baseurl、title、languageCode等配置参数 添加网站主题 $ cd my_website/themes/ $ git clone https://github.com/christianmendoza/hugo-smpl-theme Cloning into &apos;hugo-smpl-theme&apos;... remote: Counting objects: 78, done. remote: Compressing objects: 100% (55/55), done. remote: Total 78 (delta 17), reused 78 (delta 17), pack-reused 0 Unpacking objects: 100% (78/78), done. $ cd .. $ pwd /d/Hellolworld/my_website $ ls themes/hugo-smpl-theme/ archetypes/ images/ LICENSE static/ exampleSite/ layouts/ README.md theme.toml $ cp themes/hugo-smpl-theme/exampleSite/config.toml . # 使用theme文件时，需要适配的config.toml(一般在theme根目录或exampleSite目录下可以找到)，并指定theme = &quot;theme-name&quot;参数才能启动网站 新建文章 hugo new 路径/文章名称.md $ hugo new post/技术文章/第一篇技术文章.md D:\Hellolworld\my_website\content\post\技术文章\第一篇技术文章.md created 启动Hugo静态站点 hugo server -t=主题名称 # 如果已将theme文件覆盖到站点根目录，无需使用-t指定主题文件，hugo server即可 $ hugo server -t=hugo-smpl-theme -w Started building site 0 of 1 draft rendered 0 future content 0 pages created 0 non-page files copied 0 paginator pages created 0 tags created 0 categories created in 7 ms Watching for changes in D:\Hellolworld\my_website\{data,content,layouts,static,themes} Serving pages from memory Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 生成静态页面 # hugo命令用于将当前站点转换为静态页面，并自动保存在public目录下 $ hugo Started building site 0 of 1 draft rendered 0 future content 1 pages created 0 non-page files copied 0 paginator pages created 0 tags created 0 categories created in 46 ms $ ls public/ 404.html assets/ index.html index.xml post/ sitemap.xml 三 使用Git 克隆和提交代码以下内容以JennyCh Blog的站点为例 1. 从Github远程仓库克隆JennyCh Blog的站点源代码git clone Ｇithub远程仓库地址 #Github远程仓库地址分为两种：https和ssh ，可以在仓库主页中点开&quot;Clone or Download&quot;，点击`Use Https`或`Use SSH`可分别查看仓库地址 $ git clone git@github.com:jennych/jennych_blog_hugo.git Cloning into &apos;jennych_blog_hugo&apos;... remote: Counting objects: 151, done. remote: Compressing objects: 100% (131/131), done. remote: Total 151 (delta 10), reused 151 (delta 10), pack-reused 0 Receiving objects: 100% (151/151), 4.25 MiB | 124.00 KiB/s, done. Resolving deltas: 100% (10/10), done. $ cd jennych_blog_hugo/ $ ls archetypes/ content/ images/ LICENSE.md static/ config.toml exampleSite/ layouts/ README.md theme.toml 2. 从Github远程仓库克隆JennyCh Blog的静态网页git clone Ｇithub远程仓库地址 public # 将JennyCh Blog的静态页面仓库克隆到本地，并重命名为public $ git clone git@github.com:jennych/blog.git public Cloning into &apos;public&apos;... remote: Counting objects: 169, done. remote: Compressing objects: 100% (113/113), done. remote: Total 169 (delta 41), reused 169 (delta 41), pack-reused 0 Receiving objects: 100% (169/169), 3.84 MiB | 124.00 KiB/s, done. Resolving deltas: 100% (41/41), done. $ ls public/ 404.html categories/ fancybox/ font/ img/ js/ sitemap.xml about/ css/ feed.xml highlight/ index.html post/ tags/ 3. 推送本地Git版本至Github远程仓库当修改站点源代码或文章内容后，将修改内容提交为新版本，并推送到Github远程仓库jennych_blog_hugo $ pwd /d/Hellolworld/jennych_blog_hugo $ git add -A # 把修改内容提交到Git缓存区 $ git commit -m &quot;xxxx&quot; # 把Git缓存区的内容提交为Git新版本，`-m &quot;xxxx&quot; `为本次提交的版本的简述，如果不加`-m`参数，会进入编辑描述信息的状态 $ git push origin master # 将本地新版本推送到Github远程仓库 生成新的静态页面后提交为新版本，并推送到Github远程仓库blog $ hugo # 将修改后的代码和文章转换生成新的静态页面 Started building site 0 draft content 0 future content 6 pages created 0 non-page files copied 0 paginator pages created 3 tags created 2 categories created in 668 ms $ cd public/ # 进入public目录,public目录存放着转换生成后的静态页面 $ pwd /d/Hellolworld/jennych_blog_hugo/public $ git add -A # 把新生成的内容提交到Git缓存区 $ git commit -m &quot;xxxx&quot; # 把Git缓存区的内容提交为Git新版本，`-m &quot;xxxx&quot; `为本次提交的版本的简述，如果不加`-m`参数，会进入编辑描述信息的状态 $ git push origin master # 将本地新版本推送到Github远程仓库 推送完成，访问https://jennych.github.io/blog/即可看到新内容]]></content>
      <categories>
        <category>趣玩尝新</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>hugo</tag>
        <tag>JennyCh</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[感谢Hugo，让我遇见Git和Markdown]]></title>
    <url>%2F2017%2F01%2F14%2F%E6%84%9F%E8%B0%A2Hugo%EF%BC%8C%E8%AE%A9%E6%88%91%E9%81%87%E8%A7%81Git%E5%92%8CMarkdown%2F</url>
    <content type="text"><![CDATA[去年7月在机缘巧合之下接触了静态博客的概念，深入了解了一些知识之后，特别欣喜，决定动手搭建一个自己的静态博客。时间一晃到了年底，当着手实现的时候发现并不简单 首先是选择哪一款生成器，在知乎上研究一番后，最终在Jekyll、Hexo和Hugo中，选择了Hugo，因为简单、生成速度快，在静态博客生成器排名榜上发展势头好，接着在《Hugo中文文档》学习如何安装使用它，利用自己有限的网页知识在Hugo作者个人博客spf13.com的源码基础上定制了自己的博客前端 然后编写文档需要学习一门新的文本标记语言Markdown，所幸Markdown语法相对容易，常用的也不多，看完Te_Lee 分享的《认识与入门 Markdown》和《Markdown——入门指南》，就可以入门了 最后为了将Hugo发布到Github Pages的个人主页上，必须得学习Git。我并非一名程序，虽然之前使用过svn和github，但并不了解这个强大并让我之后受益匪浅的Git。花了大概一周的时间潜心学习了廖学锋老师的《Git教程》和贺永康老师的《深入理解Git》 经过1个月的折腾，终于把博客上线了。然而，收获不仅是有了这个博客，还促使自己学习了Markdown和Git，更重要的是，Git的版本控制思想让我受益匪浅！ 为了记录博客搭建的过程，除了写文档，还用git版本记录代码改动，经过实践发现很多问题： 前端代码经常改了又改，有时仅仅1处字体px大小；有时修改bug到一半不得要领，先去解决另外一个，这样导致频繁的git commit，且一个commit掺和多处修改 因为频繁的git commit，commit message每次随性而写，回头git log一看全是一句话概括，具体改了什么自己也看不懂了 当写文档时，前一篇没写完搁置了，接着完成了另外一篇，这时commit并push就很尴尬了 有时候不得不感慨，真是想什么来什么！这段时间伯乐在线官方微博刚好推荐了两篇git干货，《Git 最佳实践：commit msg》和《Git 最佳实践：分支管理》。虽然自己没法全部理解两篇文章的内容，但依然指导我做些改变 多使用git分支，在新分支里开始一篇文档，在新分支里修改前端的代码，当文档完成可以发表，或代码修改完测试没有问题，再将新分支合并到marst分支，并push到github的远程仓库里 基于以上的分支，commit即可灵活很多，坚持一次commit只完成一个任务，并确保每次commit的正确性。因为“每次提交的代码都可能产生一个可发布的版本，坚持这个实践，那么软件会一直处于可用状态 —— 《持续交付》” 在《Git 最佳实践：commit msg》关于commit message规范的指导下，重新创建了版本库，并在写message时尝试写简单易懂的标题和详尽明了的内容 近期刚好在看一本关于Devops的书《持续交付 - 发布可靠软件的系统方法》，本书前2章着重讲述了使用版本控制对构建软件可重复且可靠的自动化发布的重要意义。而这次git的实践，有助于理解书中的内容，最终使用“Continuous Delivery”作为博客标题也是因为这本书。]]></content>
      <categories>
        <category>若有所思</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>hugo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux软件安装与维护]]></title>
    <url>%2F2016%2F12%2F30%2FLinux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%B4%E6%8A%A4%2F</url>
    <content type="text"><![CDATA[1. 使用软件源码包2. Debian/UbuntuDebian系Linux发行版的软件包格式为deb 2.1 dpkgdpkg的是基于Debian系统的一个低级包管理器。它可以安装，删除，提供有关资料，以及建立*.deb包，但它不能自动下载并安装它们相应的依赖包。 查看帮助 dpkg --help 查看指定软件包的信息 dpkg -I 下载/Software/vivaldi-stable_1.6.689.46-1_amd64.deb #以Vivaldi浏览器deb安装包为例 ##必须使用软件包的完整名称 列出指定软件包里的文件目录 dpkg -c 下载/Software/vivaldi-stable_1.6.689.46-1_amd64.deb #必须使用软件包的完整名称 安装deb软件包 dpkg -i vivaldi-stable_1.6.689.46-1_amd64.deb 列出所有已安装的软件包 dpkg -l 查询是否已安装指定软件包 dpkg -l vivaldi-stable #即可看到软件名称、版本、架构、描述信息 #注意软件名称必须正确，比如查询“vivaldi”就会提示“dpkg-query: 没有找到与 vivaldi 相匹配的软件包” #当不能确认完整的软件包名称，可以再输入“vivaldi”后，按“Tab”键，会列出所有相关包名称 查看已安装的软件包的详细信息 dpkg -s vivaldi-stable #同上，必须指定软件名称“vivaldi-stable”，而不能用原始的软件包名称“vivaldi-stable_1.6.689.46-1_amd64.deb” 列出指定软件包安装后的所有文件 dpkg -L vivaldi-stable #同上 卸载软件包（保留配置文件） dpkg -r vivaldi-stable #同上，必须指定软件名称“vivaldi-stable”，而不能用原始的软件包名称“vivaldi-stable_1.6.689.46-1_amd64.deb” 卸载软件包（删除配置文件） dpkg -p vivaldi-stable #有些软件包卸载后还会遗留一些配置文件，使用`-p`就像在windows上卸载软件时勾选上“同时清除用户配置文件” 安装指定目录及其子目录下所有的“.deb”包 dpkg -R --install debpackages/ # -R 参数表示递归，指定目录和子目录下所有的.deb包都将被安装 释放软件包，但不配置 dpkg --unpack vivaldi-stable_1.6.689.46-1_amd64.deb 重新配置软件包 dpkg --configure 替换软件包信息 dpkg --update-avail 清除包的当前可用信息 dpkg --clear-avail 丢弃所有不能安装和不可用软件包的信息 dpkg --forget-old-unavail 显示版本 dpkg --version 2.2 apt-cache、apt-get2.2.1 apt-cacheapt-cache是Linux下的apt软件包管理工具，使用它能查询到apt的二进制软件包缓存文件,结合一些参数使用能查寻到软件包信息和软件包依赖关系等 列出所有软件包的名称 apt-cache pkgnames 列出所有以指定字符开头的软件包 apt-cache pkgnames apache2 #以“apache2”为例 列出包含指定关键字的软件包和简介 apt-cache search apache2 以便于阅读的格式介绍该软件包 apt-cache show apache2 查询软件包的依赖关系 apt-cache showpkg apache2 统计全部软件包的信息 apt-cache stats 2.2.2 apt-getapt-get是Debian及其衍生版的高级包管理器，并提供命令行方式来从多个来源检索和安装软件包，其中包括解决依赖性。和dpkg不同的是，apt-get不是直接基于.deb文件工作，而是基于软件包的正确名称。 更新软件源（/etc/apt/source.list） sudo apt-get update 升级已安装的所有软件包（不管依赖性，不添加包，也不删除包） sudo apt-get upgrade 升级已安装的所有软件包（根据依赖关系的变化，添加包或删除包） sudo apt-get dist-upgrade 安装指定的软件包 sudo apt-get install apache2 #以“apache2”为例 安装多个软件包 sudo apt-get install apache2 mysql-server php5 #同时安装“apache2”、&quot;mysql-server&quot;、&quot;php5&quot;，并解决依赖性 安装包含指定字符串的软件包 sudo apt-get install &apos;*name*&apos; 安装软件包但不升级 sudo apt-get install packageName --no-upgrade 安装指定名称和版本的软件包 sudo apt-get install apache2=2.4.18-2ubuntu3.1 卸载软件包但不清除配置文件 sudo apt-get remove apache2 卸载软件包同时清除配置文件 sudo apt-get purge apaceh2 或者 sudo apt-get remove --purge apache2 清理本地软件仓库 sudo apt-get clean 仅下载指定软件源码包 sudo apt-get --download-only source apache2 下载指定软件包并解包 sudo apt-get source apache2 同时下载、解包并编译软件包 sudo apt-get --compile source apache2 仅下载不安装软件包 sudo apt-get download apache2 查看软件包版本变更日志 sudo apt-get changelog apache2 检查是否有损坏的依赖关系 sudo apt-get check 建立指定软件包的编译环境 sudo apt-get build-dep apache2 #为手工编译软件apache2,提前把编译过程中需要用的软件包先安装配置好 将已经删除了的软件包的.deb安装文件从硬盘中删除掉 sudo apt-get autoclean 将已经安装了的所有软件包的.deb包从硬盘中删除掉 sudo apt-get clean 删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包 sudo apt-get autoremove apache2]]></content>
      <categories>
        <category>运维之道</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>apt</tag>
        <tag>apt-get</tag>
        <tag>rpm</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[打造Ubuntu桌面]]></title>
    <url>%2F2016%2F12%2F15%2F%E6%89%93%E9%80%A0Ubuntu%E6%A1%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[初始配置Ubuntu 16.04新特性 默认禁用dash在线搜索 使用GNOME Software代替Ubuntu软件中心 自定义Unity所处位置 apt命令升级：apt可代替apt-get 支持ZFS文件系统 软件更新：Linux4.4 LTS、LibreOffice5.1、Python3.5、Docket1.10 设置root密码sudo passwd root 切换到root用户su 或 sudo -i 自定义Unity所处位置gsettings set com.canonical.Unity.Launcher launcher-position Bottom|Left 查看Ubuntu版本lsb_release -a 查看内核版本uname -a 查看硬件驱动lspci 打开终端快捷键Ctrl+Alt+T 切换控制台tty1-tt6Ctrl+Alt+F1~F6 回到桌面 Ctrl+Alt+F7 网络配置图形化操作系统设置——&gt;网络——&gt;有线/无线——&gt;选项——&gt;IPv4设置——&gt;自动(DHCP)/手动 终端操作查看网卡配置文件(/etc/network/interfaces)默认配置如下 $ cat /etc/network/interfaces # interfaces(5) file used by ifup(8) and ifdown(8) auto lo iface lo inet loopback 配置DHCP自动获取，在配置文件末尾添加： auto ens33 iface ens33 inet dhcp 配置静态IP，在配置文件末尾添加： auto ens33 iface ens33 inet static address 192.168.1.120 netmask 255.255.255.0 gateway 192.168.1.1 配置DNS地址，修改/etc/resolv.conf文件为： # Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8) # DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN # nameserver 127.0.1.1 nameserver 192.168.1.1 nameserver 202.103.24.68 但以上配置只是临时的，在重启系统或者重启网卡之后，就不生效了。要永久有效，需要在/etc/resolvconf/resolv.conf.d/base中添加DNS地址 $ cat /etc/resolvconf/resolv.conf.d/base nameserver 192.168.1.1 nameserver 202.103.24.68 重启网络 sudo service networking restart 或 sudo /etc/init.d/networking restart 或 sudo systemctl restart networking.service 但见证奇迹的时刻到了! ifconfig查看网卡信息，ip地址依然是DHCP自动获取的192.168.1.114; $ ifconfig ens33 Link encap:以太网 硬件地址 00:0c:29:71:70:f0 inet 地址:192.168.1.114 广播:192.168.1.255 掩码:255.255.255.0 inet6 地址: fe80::b69c:e0ad:fc8c:5ec3/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 跃点数:1 接收数据包:98507 错误:0 丢弃:0 过载:0 帧数:0 发送数据包:30429 错误:0 丢弃:0 过载:0 载波:0 碰撞:0 发送队列长度:1000 接收字节:99756941 (99.7 MB) 发送字节:3526694 (3.5 MB) ip add查看网卡信息，ens33出现两个IP地址，192.168.1.114是之前DHCP获取的，192.168.1.120是配置的静态IP，而且网络访问正常 $ ip add 2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 00:0c:29:71:70:f0 brd ff:ff:ff:ff:ff:ff inet 192.168.1.114/24 brd 192.168.1.255 scope global dynamic ens33 valid_lft 86379sec preferred_lft 86379sec inet 192.168.1.120/24 brd 192.168.1.255 scope global secondary ens33 valid_lft forever preferred_lft forever 经过各种尝试，找到解决方法：先停止网络服务，在启用网络服务，虽然与重启网络服务原理一样，不过效果却不一样 sudo service networking stop sudo service networking start 这个方法同样适用于修改静态ip后，重启网络服务新的IP地址不生效的问题 Home目录下的中文目录名改为英文方法一：命令export LANG=en_US xdg-user-dirs-gtk-update 跳出对话框确认是否将目录转换为英文，同意并关闭 export LANG=zh_CN 再重启系统，下次登录桌面后，会提示是否把转换好的英文改为中文，选择不再提示，并保持旧名称 方法二：配置文件现将中文目录名改为英文目录名 mv 桌面 Desktop mv 文档 Documents mv 下载 Downloads mv 音乐 Music mv 图片 Pictures mv 视频 Videos mv 公共 Public 修改配置文件 ～/.config/user-dirs.dirs ，将对应的路径改为上面修改的英文名 vim ~/.config/user-dirs.dirs XDG_DESKTOP_DIR=&quot;$HOME/Desktop&quot; XDG_DOCUMENTS_DIR=&quot;$HOME/Documents&quot; XDG_DOWNLOAD_DIR=&quot;$HOME/Downloads&quot; XDG_MUSIC_DIR=&quot;$HOME/Music&quot; XDG_PICTURES_DIR=&quot;$HOME/Picture&quot; XDG_VIDEOS_DIR=&quot;$HOME/Video&quot; XDG_PUBLICSHARE_DIR=&quot;$HOME/Public&quot; 安装zsh安装zsh sudo apt install zsh curl sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; 查看主题 ls ~/.oh-my-zsh/themes 或者 https://github.com/robbyrussell/oh-my-zsh/wiki/Themes 设置主题 vi ~/.zshrc ZSH_THEME=&quot;steeef&quot; #修改为自己喜欢的主题名称 常用桌面软件安装安装VMware tools (root用户执行)VMware Workstation ——&gt; 虚拟机 ——&gt; 安装VMware Tools挂载VMware Tools安装光盘 su mount /dev/sr0 /mnt 把VMware Tools安装文件拷贝至root主目录 cp /mnt/VMwareTools-10.0.10-4301679.tar.gz . 解压缩VMmareTools安装文件 tar xvf VMwareTools-10.0.10-4301679.tar.gz 解压完毕后进入vmware-tools-distrib目录 cd vmware-tools-distrib 运行vmware-install.pl ./vmware-install.pl DO you still want to proceed with this legacy installer?[no] 输入 yes ，回车 接下来一路回车，直至安装完成。重启系统后，即可自适应窗口、拖放文件等 删除Amazon链接sudo apt-get remove unity-webapps-common 卸载Libreofficesudo apt-get remove libreoffice-common 安装 Unity Tweak Toolsudo apt-get install unity-tweak-tool 查看unity-tweak-tool安装了哪些文件 dpkg -L unity-tweak-tool 启动Unity Tweak Tool /usr/bin/unity-tweak-tool 安装Numix主题和图标添加Numix源 sudo apt-add-repository ppa:numix/ppa sudo apt-get update 安装GTK主题 sudo apt-get install numix-gtk-theme 安装Numix图标 sudo apt-get install numix-icon-theme-circle 在Unity-tweak-tool中启用Numix daily主题和Numix-circle图标 安装指示器大小写指示灯和触摸板开关 sudo add-apt-repository ppa:tsbarnes/indicator-keylock sudo add-apt-repository ppa:atareao/atareao sudo apt-get update sudo apt-get install indicator-keylock sudo apt-get install touchpad-indicator 安装系统监测工具Syspeek sudo add-apt-repository ppa:nilarimogard/webupd8 sudo apt-get update sudo apt-get install syspeek 安装经典菜单插件 sudo add-apt-repository ppa:diesch/testing sudo apt-get update sudo apt-get install classicmenu-indicator 安装Google Chrome浏览器sudo apt-get install google-chrome-stable 解决软件包依赖关系 sudo apt-get -f install 安装Adobe Flash Player在Firefox中打开 https://get.adobe.com/flashplayer/?loc=cn已自动识别出：Linux 64-bit, 简体中文, Firefox，选择版本为 .tar.gz 适用于 Linux 立即下载，然后提取flash_player_npapi_linux.x86_64.tar.gz 按照readme.txt方法 sudo cp libflashplayer.so /usr/lib/firefox-addons/plugins/ -v sudo cp -r usr/* /usr 在Chrome中打开 https://get.adobe.com/cn/flashplayer/otherversions/选择操作系统为： Linux(64-bit) 选择版本为 xxx for Linux 64-bit(.tar.gz)- PPAPI 立即下载，然后提取flash_player_ppapi_linux.x86_64.tar.gz 按照readme.txt方法 sudo cp ~/下载/flash_player_ppapi_linux.x86_64/* /usr/lib/adobe-flashplugin/ -rvf 如果/usr/lib/adobe-flashplugin目录不存在，可以自己创建一个再进行上一步，也起作用 sudo mkdir /usr/lib/adobe-flashplugin 配置老D的Google Hosts下载老D最新的Google hosts文件，添加以下部分到 /etc/hosts # Modified hosts start ...... # Modified hosts end 以root用户编辑 /etc/hosts sudo gedit /etc/hosts 重启网络使hosts本地解析生效 sudo systemctl restart NetworkManager 添加Ubuntu Kylin的apt源,方便安装常用的桌面软件sudo vim /etc/apt/sources.list.d/ubuntukylin.list deb http://archive.ubuntukylin.com:10006/ubuntukylin trusty main sudo apt-get update 安装搜狗输入法sudo apt-get install sogoupinyin 安装网易云音乐sudo apt-get install netease-cloud-music 或者，下载 ubuntu16.04 (64位) 版本的云音乐并安装 sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb 解决软件包依赖关系 sudo apt-get -f install 安装有道词典 参考：Ubuntu 16.04安装有道词典 下载Ubuntu 64位的deb包：youdao-dict_1.1.0-0-ubuntu_amd64.deb 创建youdao-dict目录，把该deb包解压到youdao-dict目录： sudo dpkg -X youdao-dict_1.1.0-0-ubuntu_amd64.deb youdao-dict 解压deb包中的control信息（包的依赖就写在这个文件里面）： sudo dpkg -e youdao-dict_1.1.0-0-ubuntu_amd64.deb youdao-dict/DEBIAN 编辑control文件，删除Depends行尾的gstreamer0.10-plugins-ugly。 sudo gedit youdao-dict/DEBIAN/control 重新打包： sudo dpkg-deb -b youdao-dict youdaobuild.deb 安装重新打包的安装包 sudo dpkg -i youdaobuild.deb 安装完毕即可使用，屏幕取词和滑词翻译均能正常使用，喜大普奔！当切换到其他窗口有道词典会自动最小化到右上角任务栏 使用apt-get和dpkg安装deb包测试多次都安装失败，原因正是因为: 未安装软件包 gstreamer0.10-plugins-ugly 安装WPS Office下载 wps-office_10.1.0.5672~a21_amd64.deb 并安装 sudo dpkg -i wps-office_10.1.0.5672~a21_amd64.deb 打开wps会提示缺失symbol、wingdings、wingdings 2、wingdings 3、webding、mtextra 6个字体，在Windows上C:\Windows\Fonts搜索拷贝这6个字体到Ubuntu的usr/share/fonts/下即可。 百度云分享链接: http://pan.baidu.com/s/1pL6ONHL 密码: 2stm 安装Shadowsockssudo add-apt-repository ppa:hzwhuang/ss-qt5 sudo apt-get update sudo apt-get install shadowsocks-qt5 安装Irssisudo apt-get install screen sudo apt-get install irssi 安装迅雷的替代者Xware-desktop 在百度网盘中下载最新的Xware-desktop：http://pan.baidu.com/s/1qWHMlK4 sudo chmod +x xware-desktop_0.11.20140723_amd64.deb sudo dpkg -i xware-desktop_0.11.20140723_amd64.deb sudo apt-get install -f 安装Vivaldi浏览器 下载Vivaldi的deb安装包 sudo dpkg -i vivaldi-stable_1.6.689.46-1_amd64.deb 自定义截图快捷键系统设置——&gt;键盘——&gt;快捷键——&gt;截图 安装Teamviewer 下载Ubuntu版Teamviewer_12.0.71510_i386.deb,注意必须下载32位的版本 为64位Ubuntu16.04添加32位架构支持 sudo dpkg --add-architecture i386 安装Teamviewer的依赖包 sudo apt-get update sudo apt-get install libdbus-1-3:i386 libasound2:i386 libexpat1:i386 libfontconfig1:i386 libfreetype6:i386 libjpeg62:i386 libpng12-0:i386 libsm6:i386 libxdamage1:i386 libxext6:i386 libxfixes3:i386 libxinerama1:i386 libxrandr2:i386 libxrender1:i386 libxtst6:i386 zlib1g:i386 libc6:i386 安装Teamviewer12 sudo dpkg -i teamviewer_12.0.71510_i386.deb 安装KDE ConnectKDE Connect用于linux桌面和Android手机之前传输文件 ,虚拟输入等 Android手机上需要安装KDE Connect的APP，桌面端程序安装如下： sudo add-apt-repository ppa:varlesh-l/indicator-kdeconnect sudo apt update sudo apt install kdeconnect indicator-kdeconnect 安装firefox下载firefox安装包：http://www.firefox.com.cn/ 解压安装包，并移动到/opt目录下 tar xvf Firefox-latest-x86_64.tar.bz2sudo mv firefox /opt 修改配置文件使firefox图标可以出现在程序中 vi /usr/share/applications/firefox.desktop [Desktop Entry] Name=firefox Name[zh_CN]=火狐浏览器 Comment=火狐浏览器 Exec=/opt/firefox/firefox Icon=/opt/firefox/browser/icons/mozicon128.png Terminal=false Type=Application Categories=Application; Encoding=UTF-8 StartupNotify=true 这时发现firefox没有软件图标，去Google一个firefox图标图片，保存到配置文件中指定的目录和文件名 /opt/firefox/browser/icons/mozicon128.png，稍等一会儿即会自动显示图标 常用工具软件安装安装Albert 安装方法参考Albert WIki的《How to install albert》 sudo add-apt-repository ppa:nilarimogard/webupd8 sudo apt-get update sudo apt-get install albert 安装Vimsudo apt-get install vim 安装Filezillasudo apt-get install filezilla 安装Gitsudo apt-get install git 安装Sublime Text 3sudo add-apt-repository ppa:webupd8team/sublime-text-3 sudo apt-get update sudo apt-get install sublime-text 如果修改Preferences.sublime-settings - User后提示没有权限保存 sudo chmode o+rwx ~/.config/sublime-text-3/ -R 关于Sublime Text 3在Ubuntu下无法输入中文的问题，尝试了网上很多方法都没有解决 安装NotepadqqNotepadqq功能近似于Windows下的Notepad++ sudo add-apt-repository ppa:notepadqq-team/notepadqq sudo apt-get update sudo apt-get install notepadqq 安装Atom安装过程因为下载速度奇慢，建议单独开一个Terminal,耐心等待 sudo add-apt-repository ppa:webupd8team/atom sudo apt-get update sudo apt-get install atom 安装Hugo(由Go语言实现的静态网站生成器)sudo apt-get install hugo 安装VMware Workstation下载VMware Workstation Pro for Linux安装方法参考官方文档：http://pubs.vmware.com/workstation-12/index.jsp#com.vmware.ws.using.doc/GUID-1F5B1F14-A586-4A56-83FA-2E7D8333D5CA.html su root sh VMware-Workstation-Full-12.5.2-4638234.x86_64.bundle 稍等弹出图形化的安装界面，与windows上安装相似，一路下一步至安装完毕。 安装Visual Studio Code 下载Ubuntu版的.deb包 ：code_1.10.1-1488415350_amd64.deb 安装.deb包 sudo dpkg -i code_1.10.1-1488415350_amd64.deb 使用Samba与Windows共享文件搭建Samba服务安装samba和smbclient sudo apt-get install samba smbclient 创建共享目录 sudo mkdir -p /home/share sudo chmod -R 777 /home/share 添加samba用户 sudo useradd -s /sbin/nologin share #创建一个samba用户，不能用于登录系统 设置用户密码 sudo smbpasswd -a share 配置smb配置文件 sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak sudo vim /etc/samba/smb.conf [share] comment = Shared Folder require password path = /home/share browseable = yes guest ok = yes writable = yes valid users = share create mask = 0777 directory mask = 0777 available = yes #常用选项 #[shared_name] # 共享名称 # comment = # 共享描述 # path = # 文件系统路径 # browseable = {yes|no} # 是否可以被查看到 # public = {yes|no} # 是否可被所有人读 # guest ok = {yes|no} # 与 public 相同 # read only = yes # 是否只读 # writeable = yes # 是否可写 # write list = user1, user2 # 可写用户列表 # @group, +group # 可写组列表 # valid users = # 白名单 # invalid users = # 黑名单 # create mask = # 默认创建文件的权限 # directory mask = # 默认创建目录的权限 # available = {yes|no} # 是否启用该目录共享 重启samba服务 sudo service smbd restart 或 sudo /etc/init.d/smbd restart 或 sudo systemctl restart smbd.service 查看samba服务的状态 sudo smbstatus 在Windows上访问Ubuntu的共享目录Windows上使用FQDN路径访问，在开始或者资源管理器地址栏输入： \\192.168.1.114 Windwos上断开与samba共享目录的链接 net use \\192.168.1.114\share /del /y 或 net use * /del /y #注意*代表断开所有的共享链接，如果有多个共享链接时，应避免使用* Windows上映射samba共享目录为网络映射驱动器 在Ubuntu上访问Windows共享目录在Ubuntu文件管理器上，点击“连接到服务器”，输入: smb://192.168.1.110 ，点击“连接” 在Ubuntu上使用mount挂载Windows共享目录 sudo mount -t cifs -o username=awesomeit //192.168.1.110/d /mnt/share/ #回车之后输入Windows用户“awesomeit”的密码，把Windows上的共享目录”d“挂载到ubuntu的“/mnt/share”（需先创建好）下 #使用mount挂载windows共享目录一定要先安装cifs-utils,否则挂载时会有如下报错： mount: //192.168.1.110/d is write-protected, mounting read-only mount: cannot mount //192.168.1.110/d read-only 安装cifs-utils sudo apt-get install cifs-utils 查看已挂载的共享目录 sudo mount | tail -1 //192.168.1.110/d on /mnt/share type cifs (rw,relatime,vers=1.0,cache=strict,username=awesomeit,domain=DESKTOP-L440,uid=0,noforceuid,gid=0,noforcegid,addr=192.168.1.110,file_mode=0755,dir_mode=0755,nounix,serverino,mapposix,rsize=61440,wsize=65536,actimeo=1) 在Ubuntu上使用umount卸载Windows共享目录的挂载点 sudo umount /mnt/share #卸载挂载点时，必须先离开挂载点目录，否则会报错： umount: /mnt/share: target is busy (In some cases useful info about processes that use the device is found by lsof(8) or fuser(1).) 使用ssh远程登录UbuntuUbuntu16.04默认安装了“openssh-client”，但未安装“openssh-server”，在远程ssh时会提示： $ ssh awesomeit@192.168.1.114 ssh: connect to host 192.168.1.114 port 22: Connection refused 安装openssh-server sudo apt-get install openssh-server 安装完成即可使用ssh远程登录 $ ssh awesomeit@192.168.1.114 The authenticity of host &apos;192.168.1.114 (192.168.1.114)&apos; can&apos;t be established. ECDSA key fingerprint is SHA256:bNfIXbmCCh1qzw9d5VkOWecltbZV1OaKizH8pLuMigo. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added &apos;192.168.1.114&apos; (ECDSA) to the list of known hosts. awesomeit@192.168.1.114&apos;s password: Welcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-57-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 1 个可升级软件包。 0 个安全更新。 Last login: Thu Jan 5 22:28:15 2017 from 192.168.1.107 awesomeit@awesomeit-virtual-machine:~$ awesomeit@awesomeit-virtual-machine:~$ 但是默认不允许root用户远程ssh登录 $ ssh root@192.168.1.114 root@192.168.1.114&apos;s password: Permission denied, please try again. root@192.168.1.114&apos;s password: Permission denied, please try again. 如要开启root用户ssh远程登录（不建议这样做），需修改配置文件”/etc/ssh/sshd_config” sudo vim /etc/ssh/sshd_config 注释掉“PermitRootLogin prohibit-password”，添加“PermitRootLogin yes” #PermitRootLogin prohibit-password PermitRootLogin yes 重启ssh服务 sudo service ssh restart 再测试即可使用root用户ssh远程登录 sudo service ssh restart $ ssh root@192.168.1.114 root@192.168.1.114&apos;s password: Welcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-57-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 1 个可升级软件包。 0 个安全更新。 Last login: Thu Jan 5 22:38:09 2017 from 192.168.1.107 root@awesomeit-virtual-machine:~#]]></content>
      <categories>
        <category>趣玩尝新</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hugo和Github搭建静态博客之填坑]]></title>
    <url>%2F2016%2F12%2F14%2F%E4%BD%BF%E7%94%A8Hugo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E4%B9%8B%E5%A1%AB%E5%9D%91%2F</url>
    <content type="text"><![CDATA[我的静态博客已经搭建成功了，并且使用Markdown记录了过程，但期间踩了一路的坑，今天总结一下其中一个：Hugo成功部署到Github Pages，但访问博客时不加载网页布局和样式。 这算是遇到最大的坑了，前后折腾了半个月的时间，直到找到了组织（Hugo交流QQ群：512499080），群主大大@coderzh 一语道破天机。 1 先来回顾一下如何踩上这个大坑的1.1 使用hugo new site 创建一个新站点时，配置文件config.toml 中的 baseurl 默认是 http://baseurl = &quot;http://replace-this-with-your-hugo-site.com/ clone spf13.com的博客项目中baseurl 也是 http:// baseurl = &quot;http://spf13.com/&quot; 在之后修改时，直接把博客地址改为了我自己的 baseurl = &quot;http://imkind.github.io/&quot; 1.2 自2016年6月15日起，使用Github Pages默认域名搭建个人站点，已被强制要求HTTPS访问，即使用HTTP访问，也会被重定向到HTTPS。参见《Securing your GitHub Pages site with HTTPS》 https://help.github.com/articles/securing-your-github-pages-site-with-https/ You can enforce HTTPS to add a layer of encryption for traffic to your GitHub Pages site if it has a github.io domain. With HTTPS enforcement enabled, HTTP requests to your GitHub Pages site will be transparently redirected to HTTPS. HTTPS enforcement is required for GitHub Pages sites created after June 15, 2016 and using a github.io domain. If you created your GitHub Pages site before June 15, 2016, you can manually enable HTTPS enforcement. HTTPS is not supported for GitHub Pages using custom domains. 这一点可以在repository的settings中得到证实 √ Enforce HTTPS — Required for your site because you are using the default domain (imkind.github.io) HTTPS provides a layer of encryption that prevents others from snooping on or tampering with traffic to your site. When HTTPS is enforced, your site will only be served over HTTPS. Learn more. 此时，Hugo中配置的HTTP与Github Pages强制使用的HTTPS不一致，导致站点图片、css和js文件无法加载，访问时造成上图的情况 If you enable HTTPS for your site, and your site’s HTML still references images, CSS, or JavaScript over HTTP, then your site is serving mixed content, and you may have trouble loading assets. Serving mixed content also makes your site less secure. To remove your site’s mixed content, improve your site’s security, and resolve problems related to loading mixed content, edit your site’s HTML files and change http:// to https:// so that all of your assets are served over HTTPS. 2. 填坑，更多解决方案参见《Resolving problems with mixed content》https://help.github.com/articles/securing-your-github-pages-site-with-https/2.1 综上，在配置文件config.toml中把http修改为httpsbaseurl = &quot;http://imkind.github.io/&quot; 修改为 baseurl = &quot;https://imkind.github.io/&quot; 然后，重新运行 hugo 生成静态站点，分别把改动push到IMkind_blog_hugo和imkind.github.io 2.2 但是，我发现spf13.com、blog.coderzh.com、nanshu.wang、blog.bpcoder.com等都能使用HTTP正常访问，这可能是因为绑定了自己的域名。《Securing your GitHub Pages site with HTTPS》 https://help.github.com/articles/securing-your-github-pages-site-with-https/ ，第三段最后一句： HTTPS is not supported for GitHub Pages using custom domains. 彩蛋附上群主大大@coderzh如何一语道破天机]]></content>
      <categories>
        <category>趣玩尝新</category>
      </categories>
      <tags>
        <tag>Hugo</tag>
        <tag>Github</tag>
        <tag>Pages</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git-everything-is-local]]></title>
    <url>%2F2016%2F12%2F08%2Fgit-everything-is-local%2F</url>
    <content type="text"><![CDATA[1. 安装gitwindows下载并安装Git for Windows，默认选项安装到Ajusting your PATH environment时，勾选第二项Run Git from Windows Command Prompt，即可在windows命令行使用git命令，不过Git Bash用户体验更好 ubnutusudo apt-get install git 2. 全局配置git命令行 git config --global user.name [your-name] git config --global user.email [your-email-address] git config --global color.ui true 配置文件 vim ~/.gitconfig 查看全局配置 git config --list 3. 创建repository/repo创建本地git repo git init 克隆线上的项目 git clone https://github.com/[github-account]/[project-name].git 4. 添加及提交文件 添加文件到staying area git add [file-name] 提交改动到git repository git commit -m [&quot;commit-description&quot;] 直接从working directory提交到git repository git commit -am [&quot;commit-description&quot;] 5. 查看git状态查看git状态 git status 查看git状态标志 git status -s 标志的说明 A: 你本地新增的文件（服务器上没有） C: 文件的一个新拷贝 D: 你本地删除的文件（服务器上还在） M: 文件的内容或者mode被修改了 R: 文件名被修改了 T: 文件的类型被修改了 U: 文件没有被合并(你需要完成合并才能进行提交) X: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report) 忽略~结尾的文件 echo &quot;*~&quot; &gt; .gitignore 6. 查看文件区别 查看working directory 和 staying area 之间的区别 git diff 查看staying area 和 git repository 之间的区别 git diff --staged 查看history 和 working directory 之间的区别 git diff HEAD 使用–stat参数查看简短信息 git diff --stat [--staged|HEAD] 7. 撤销误操作 从git repository 撤销到staying area git reset [file-name] 从staying area撤销到working directory git checkout [file-name] 从git repository 撤销到working directory git checkout HEAD [file-name] 8. 移除及重命名文件删除git文件 git rm [file-name] 删除git文件，但保留源文件 git rm --cached [file-name] 重命名git文件 git mv [file-name] [file-name] 9. 暂存工作区放入暂存区 git stash 查看暂存区 git stash list 恢复暂存区 git stash pop 10. 图解commit对象 查看commit记录 git log 或 git log --pretty=oneline 或 git log --oneline 或 git reflog 查看commit对象类型 git cat-file -t [HEAD|short-Hash] commit对象类型说明 tree 目录结构 blob 一个二进制文件 commit 一次提交的信息（包含tree、parent、author、committer信息） tag 标签（commit的别名） 查看commit对象详细信息 git cat-file -p [HEAD|short-Hash] 11. 理解tree-ish表达式查看commit对象指向的HASH值 git rev-parse [HEAD|HEAD~|HEAD~2|master~3|master~4|...] 查看指定commit的tree的HASH值 git rev-parse HEAD~4^{tree} 查看指定commit的blob的HASH值 git rev-parse HEAD~6:[file-path] 12. 创建及删除分支分支文件路径 /.git/refs/heads/ 查看所有分支 git branch 创建分支 git branch [branch-name] 切换分支 git checkout [branch-name] 创建并切换分支 git checkout -b [branch-name] 删除分支 git branch -d [branch-name] 合并分支 git merge [branch-name] 13. 配置Github远程仓库创建SSH Key ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 一路回车使用默认值，完成之后在用户主目录中打开 .ssh目录，可以看到 id_rsa 私钥，不能泄露出去 id_rsa.pub 公钥，可告诉任何人 登录Github，依次点击”settings”——&gt;”SSH and GPG keys”——&gt;”New SSH Key” 填写Title，在Key文本框里粘贴id_rsa.pub文件的内容，点击”Add SSH Key” 14. 同步远程Github仓库关联本地仓库与远程仓库 git remote add origin git@github.com:[github-account]/[repo-name].git 第一次把本地库master分支推送到远程库 git push -u origin master 之后本地做了提交，即可推送到远程库 git push origin master 15. 从Github远程库克隆创建Github Repositories远程库 把远程库克隆到本地 git clone git@github.com:[github-account]/[repo-name].git 或 git clone https://github.com/[github-account]/[repo-name].git]]></content>
      <categories>
        <category>编程之路</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitbash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hugo和Github搭建静态博客]]></title>
    <url>%2F2016%2F12%2F02%2F%E4%BD%BF%E7%94%A8Hugo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[我的静态博客使用Hugo生成，部署在Github Pages个人主页上，为了完成搭建，期间学习了Hugo、Git、Markdown。由于接触静态博客不久，对很多东西一知半解，本文仅记录了在Windows 10上基于Hugo作者Steve Francia的个人博客http://spf13.com/的源代码定制自己博客的过程，绝不权威，仅供参考。 1.准备1.1 注册Github1.2 安装并配置Git for Windows默认选项安装到Ajusting your PATH environment时，勾选第二项Run Git from Windows Command Prompt，即可在windows命令行使用git命令，不过Git Bash用户体验更好。 Git全局配置 git config --global user.name [your-name] git config --global user.email [your-email-address] git config --global color.ui true 配置SSH Key ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 一路回车使用默认值，完成之后在用户主目录中进入 .ssh目录，可以看到 id_rsa 私钥，不能泄露出去 id_rsa.pub 公钥，可告诉任何人 登录Github，依次点击”settings”——&gt;”SSH and GPG keys”——&gt;”New SSH Key” 填写Title，在Key文本框里粘贴id_rsa.pub文件的内容，点击”Add SSH Key” 1.3 安装Hugo1.3.2 Ubuntusudo apt-get install hugo 1.3.1 Windows 10 下载hugo-0.17-Windows-64bit.zip，并解压缩到C:\Program Files\Hugo\ 将hugo-0.17-windows-amd64.exe修改为hugo.exe 运行sysdm.cpl，添加环境变量：高级-环境变量-系统变量-编辑PATH-新建-‪C:\Program Files\Hugo 2. 定制Hugo2.1 Clone大神spf13的博客项目源代码进入工作目录 $ cd d/HelloWorld/hugo/ $ pwd /d/HelloWorld/hugo clone大神spf13的博客项目源代码：spf13.com $ git clone https://github.com/spf13/spf13.com.git Cloning into &apos;spf13.com&apos;... remote: Counting objects: 894, done. remote: Total 894 (delta 0), reused 0 (delta 0), pack-reused 894 Receiving objects: 100% (894/894), 17.35 MiB | 20.00 KiB/s, done. Resolving deltas: 100% (346/346), done. Checking out files: 100% (366/366), done. $ ls -A spf13.com/ .git/ .gitignore archetypes/ config.toml content/ layouts/ README.md static/ 重新打开一个git bash，运行站点 $ cd /d/HelloWorld/hugo/spf13.com/ $ hugo server -w Started building site 0 of 12 drafts rendered 0 future content 151 pages created 0 non-page files copied 0 paginator pages created 273 tags created 22 topics created in 718 ms Watching for changes in D:\HelloWorld\hugo\spf13.com\{content,layouts,static} Serving pages from memory Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 在浏览器输入localhost:1313,查看效果: 2.2 删除多余文件，修改项目名称删除spf13.com\content\下三个目录post、presentation、project,这是导航栏对应的博文存放目录，删除后，稍后将创建自己的分类博文目录 $ rm -r spf13.com/content/post/ $ rm -r spf13.com/content/presentation/ $ rm -r spf13.com/content/project/ 删除spf13.com\static\media\下的所有图片文件(spf13博文中的图片) rm spf13.com/static/images/* Ctrl+C停止站点运行，修改目录名为自己的项目名称 $ mv spf13.com/ IMkind_blog_hugo 删除项目的Git版本库 $ rm -rf IMkind_blog_hugo/ .git/ $ rm IMkind_blog_hugo/ .gitignore $ cd IMkind_blog_hugo/ $ git status fatal: Not a git repository (or any of the parent directories): .git 创建新的版本库 $ git init Initialized empty Git repository in D:/HelloWorld/hugo/IMkind_blog_hugo/.git/ 2.3 修改配置文件config.toml baseurl = &quot;https://imkind.github.io/&quot; title = &quot;Continuous Delivery&quot; languageCode = &quot;en-us&quot; disqusShortname = &quot;&quot; copyright = &quot;&quot; MetaDataFormat = &quot;yaml&quot; [author] name = &quot;IMkind&quot; [indexes] tag = &quot;tags&quot; topic = &quot;topics&quot; baeurl 博客地址，必须使用https://,切记！ title 博客标题 disqusShortname Disqus的用户名，不使用评论功能可留空 copyright 版权信息 name 博客作者署名 其它项默认参数即可 启动站点，在浏览器可以看到效果了： 2.4 修改博客副标题 在 layouts\partials\subheader.html &lt;div class=&quot;icon-spf13-3&quot; id=&quot;logo&quot;&gt; &lt;div id=&quot;byline&quot;&gt;by Steve Francia&lt;/div&gt; 修改为 &lt;div class=&quot;icon-happy&quot; id=&quot;logo&quot;&gt; &lt;div id=&quot;byline&quot;&gt;Hello , IMkind&lt;/div&gt; spf13.com博客中所有的图标都是以 css类 来实现，\static\static\css 中以 .icon- 开头的类各自定义了一个图标。 例如：.icon-happy 即 笑脸图标，浏览器查看效果： 2.5 修改导航条 在 layouts\partials\nav.html &lt;ul id=&quot;mainnav&quot;&gt; &lt;li&gt; &lt;a href=&quot;/post/&quot;&gt; &lt;span class=&quot;icon&quot;&gt; &lt;i aria-hidden=&quot;true&quot; class=&quot;icon-quill&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;span&gt; blog &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;/project/&quot;&gt; &lt;span class=&quot;icon&quot;&gt; &lt;i aria-hidden=&quot;true&quot; class=&quot;icon-console&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;span&gt; code &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;/presentation/&quot;&gt; &lt;span class=&quot;icon&quot;&gt; &lt;i aria-hidden=&quot;true&quot; class=&quot;icon-stats&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;span&gt; talks &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://stevefrancia.com&quot;&gt; &lt;span class=&quot;icon&quot;&gt; &lt;i aria-hidden=&quot;true&quot; class=&quot;icon-13&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;span&gt; me &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; 修改为 &lt;ul id=&quot;mainnav&quot;&gt; &lt;li&gt; &lt;a href=&quot;/感/&quot;&gt; &lt;span class=&quot;icon&quot;&gt; &lt;i aria-hidden=&quot;true&quot; class=&quot;icon-quill&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;span&gt; 感 &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;/猿/&quot;&gt; &lt;span class=&quot;icon&quot;&gt; &lt;i aria-hidden=&quot;true&quot; class=&quot;icon-code&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;span&gt; 猿 &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;/狮/&quot;&gt; &lt;span class=&quot;icon&quot;&gt; &lt;i aria-hidden=&quot;true&quot; class=&quot;icon-console&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;span&gt; 狮 &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;/about/index.html&quot;&gt; &lt;span class=&quot;icon&quot;&gt; &lt;i aria-hidden=&quot;true&quot; class=&quot;icon-user&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;span&gt; 吾 &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; 注意：在源码中修改了每个导航标题之后，还要到www\content下创建对应的目录。但是直接创建的目录并不能起作用，即使目录中存在Markdown格式的文档，点击之后也会是一片空白。 到底该怎么创建对应的目录呢？使用hugo new 命令： $ hugo new about.md D:\HelloWorld\hugo\IMkind_blog_hugo\content\about.md created $ hugo new 感/我的第一篇感.md D:\HelloWorld\hugo\IMkind_blog_hugo\content\感\我的第一篇感.md created $ hugo new 猿/我的第一篇猿.md D:\HelloWorld\hugo\IMkind_blog_hugo\content\猿\我的第一篇猿.md created $ hugo new 狮/我的第一篇狮.md D:\HelloWorld\hugo\IMkind_blog_hugo\content\狮\我的第一篇狮.md created 这样就创建好了三个对应目录感、猿、狮，并同时创建了markdown格式的博文，往每篇博文中写入一段内容，即可在浏览器看到效果，在导航栏点击对应的标题，显示对应目录下所有的博文标题。 注意：必须往每篇博文正文写入一段内容，否则在页面上点击对应的导航标题都会跳转到空白页面。 导航栏每行默认显示四个标题，超过会另取一行。可随意增加&lt;li&gt;...&lt;/li&gt;数量，并创建对应的目录,如下： 2.6 修改侧边栏分享和社交 在 layouts\partials\social.html 按需增减、修改&lt;li&gt;...&lt;/li&gt; &lt;ul id=&quot;social&quot;&gt; &lt;li id=&quot;follow&quot;&gt; &lt;span class=&quot;icon icon-heart-2&quot;&gt; &lt;/span&gt; &lt;span class=&quot;title&quot;&gt; follow &lt;/span&gt; &lt;div class=&quot;dropdown follow&quot;&gt; &lt;ul class=&quot;social&quot;&gt; &lt;li&gt; &lt;a href=&quot;http://github.com/imkind&quot; target=&quot;_blank&quot; title=&quot;GitHub&quot; class=&quot;github&quot;&gt;&lt;span class=&quot;icon icon-github&quot;&gt;&lt;/span&gt;GitHub&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://weibo.com/kind0214&quot; target=&quot;_blank&quot; title=&quot;Weibo&quot; class=&quot;github&quot;&gt;&lt;span class=&quot;icon icon-feed&quot;&gt;&lt;/span&gt;Weibo&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://www.facebook.com/kind0214&quot; target=&quot;_blank&quot; title=&quot;Join me on Facebook&quot; class=&quot;facebook&quot;&gt;&lt;span class=&quot;icon icon-facebook&quot;&gt;&lt;/span&gt;Facebook&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://www.twitter.com/kind0214&quot; target=&quot;_blank&quot; title=&quot;Follow me on Twitter&quot; class=&quot;twitter&quot;&gt;&lt;span class=&quot;icon icon-twitter&quot;&gt;&lt;/span&gt;Twitter&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://www.linkedin.com/in/luminggui&quot; target=&quot;_blank&quot; title=&quot;LinkedIn&quot; class=&quot;linkedin&quot;&gt;&lt;span class=&quot;icon icon-linkedin&quot;&gt;&lt;/span&gt;LinkedIn&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;mailto:luminggui0214@gmail.com&quot; target=&quot;_blank&quot; title=&quot;Send an email&quot; class=&quot;email&quot;&gt;&lt;span class=&quot;icon icon-mail&quot;&gt;&lt;/span&gt;Email&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;span class=&quot;subcount icon-arrow-right&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; 在 static\css\style.css 调整侧边栏位置 #social{position:absolute;bottom:2em;width:90%;left:5%} 修改为 #social{position:relative;top:1em;width:90%;left:5%} 浏览器查看效果 2.7 修改脚注 在 layouts\partials\footer.html 修改脚注内容 &lt;footer&gt; &lt;div&gt; &lt;p&gt; &amp;copy;2016 &lt;span itemprop=&quot;name&quot;&gt;IMkind .&lt;/span&gt; Powered by &lt;a href=&quot;http://gohugo.io&quot;&gt;Hugo&lt;/a&gt;. Theme by &lt;a href=&quot;http://servergrove.com&quot;&gt;Server Francia&lt;/a&gt;. &lt;/p&gt; &lt;/div&gt; &lt;/footer&gt; &lt;/body&gt; &lt;/html&gt; 在浏览器查看效果 2.8 修改博文正文显示页的布局 2.8.1 修改博客作者相关介绍 在 layouts\partials\details.html 对作者介绍部分 &lt;div&gt;&lt;section id=&quot;author&quot;&gt;...&lt;/section&gt;&lt;/div&gt; 稍作修改即可，由于本人实在太过平淡无奇，索性去掉这一部分 &lt;!-- &lt;div&gt;&lt;section id=&quot;author&quot;&gt; ... &lt;/section&gt;&lt;/div&gt; --&gt; 2.8.2 修改博文创建时间、字数统计、阅读时间、tags、topics的显示位置 将博文创建时间、字数统计、阅读时间、tags、topics的显示位置调整到标题和正文之间 在 layouts_default\single.html &lt;section id=&quot;main&quot;&gt; &lt;h1 itemprop=&quot;name&quot; id=&quot;title&quot;&gt;{{ .Title }}&lt;/h1&gt; &lt;div&gt; &lt;article itemprop=&quot;articleBody&quot; id=&quot;content&quot;&gt; {{ .Content }} &lt;/article&gt; &lt;/div&gt; &lt;/section&gt; {{ partial "meta_aside.html" . }} 修改为 &lt;section id=&quot;main&quot;&gt; &lt;h1 itemprop=&quot;name&quot; id=&quot;title&quot;&gt;{{ .Title }}&lt;/h1&gt; {{ partial "meta_aside.html" . }} &lt;div&gt; &lt;article itemprop=&quot;articleBody&quot; id=&quot;content&quot;&gt; {{ .Content }} &lt;/article&gt; &lt;/div&gt; &lt;/section&gt; 在浏览器查看效果 2.8.3 修改上下篇链接的显示位置 在 layouts\partials\details.html 中删除或注释掉上下篇链接相关代码 &lt;!-- &lt;div&gt; &lt;section id=&quot;prev&quot;&gt; &amp;nbsp;{{if .Prev}}&lt;a class=&quot;previous&quot; href=&quot;{{.Prev.Permalink}}&quot;&gt;&lt;i class=&quot;icon-arrow-left&quot;&gt;&lt;/i&gt; {{.Prev.Title}}&lt;/a&gt;&lt;br&gt;{{end}} &lt;/section&gt; &lt;section id=&quot;next&quot;&gt; &amp;nbsp;{{if .Next}}&lt;a class=&quot;next&quot; href=&quot;{{.Next.Permalink}}&quot;&gt;{{.Next.Title}} &lt;i class=&quot;icon-arrow-right&quot;&gt;&lt;/i&gt;&lt;/a&gt;{{end}} &lt;/section&gt; &lt;/div&gt; --&gt; 新建 layouts\partials\prevnext.html，代码如下 &lt;div&gt; &lt;section id=&quot;prev&quot;&gt; &amp;nbsp;{{if .Prev}}&lt;a class=&quot;previous&quot; href=&quot;{{.Prev.Permalink}}&quot;&gt;&lt;i class=&quot;icon-arrow-left&quot;&gt;&lt;/i&gt; {{.Prev.Title}}&lt;/a&gt;&lt;br&gt;{{end}} &lt;/section&gt; &lt;section id=&quot;next&quot;&gt; &amp;nbsp;{{if .Next}}&lt;a class=&quot;next&quot; href=&quot;{{.Next.Permalink}}&quot;&gt;{{.Next.Title}} &lt;i class=&quot;icon-arrow-right&quot;&gt;&lt;/i&gt;&lt;/a&gt;{{end}} &lt;/section&gt; &lt;/div&gt; 新建 layouts\partials\prevnext_aside.html，代码如下 {{ $baseurl := .Site.BaseURL }} &lt;aside id=&quot;prevnext&quot;&gt; {{ partial "prevnext.html" . }} &lt;/aside&gt; &lt;meta itemprop=&quot;wordCount&quot; content=&quot;{{ .WordCount }}&quot;&gt; &lt;meta itemprop=&quot;datePublished&quot; content=&quot;{{ .Date.Format "2006-01-02" }}&quot;&gt; &lt;meta itemprop=&quot;url&quot; content=&quot;{{ .Permalink }}&quot;&gt; 在 layouts_default\single.html &lt;section id=&quot;main&quot;&gt; &lt;h1 itemprop=&quot;name&quot; id=&quot;title&quot;&gt;{{ .Title }}&lt;/h1&gt; {{ partial "meta_aside.html" . }} &lt;div&gt; &lt;article itemprop=&quot;articleBody&quot; id=&quot;content&quot;&gt; {{ .Content }} &lt;/article&gt; &lt;/div&gt; &lt;/section&gt; {{ partial "disqus.html" . }} {{ partial "footer.html" . }} 修改为 &lt;section id=&quot;main&quot;&gt; &lt;h1 itemprop=&quot;name&quot; id=&quot;title&quot;&gt;{{ .Title }}&lt;/h1&gt; {{ partial "meta_aside.html" . }} &lt;div&gt; &lt;article itemprop=&quot;articleBody&quot; id=&quot;content&quot;&gt; {{ .Content }} &lt;/article&gt; &lt;/div&gt; {{ partial "prevnext_aside.html" . }} &lt;/section&gt; {{ partial "disqus.html" . }} {{ partial "footer.html" . }} 在 static\css\style.css #main&gt;div,footer&gt;div,#meta&gt;div,#content,#comments&gt;div{position:relative;text-align:left;margin:0 auto;word-wrap:break-word} #next,#prev{width:50% !important;padding-top:2em} #main&gt;div,footer&gt;div,#meta&gt;div,#meta&gt;section,#content,#comments&gt;div{max-width:38em} 修改为 #main&gt;div,footer&gt;div,#meta&gt;div,#content,#comments&gt;div,#prevnext&gt;div{position:relative;text-align:left;margin:0 auto;word-wrap:break-word} #next,#prev{width:50% !important;padding-top:2em;float:left;} #main&gt;div,footer&gt;div,#meta&gt;div,#meta&gt;section,#content,#comments&gt;div,#prevnext&gt;div{max-width:100%} 在浏览器查看效果 2.9 修改字号大小在 static\css\style.css body{font-size:0.9em;line-height:1.8em} h1{font-size:1.6em;line-height:1.8em} h2{font-size:1.4em;line-height:1.8em} h3{font-size:1.2em;line-height:1.8em} h4{font-size:1.1em;line-height:1.8em} h5{font-size:1em;line-height:1.8em} h1#title{font-size:1.6em !important;line-height:1.8em} h1,h2{font-size:1.6em;line-height:1.8em} h2{font-size:1.4em;font-weight:normal} h3{margin:1.3em 0 1.5em} .post-meta{color:#34495e;font-size:90%} body&gt;footer p{margin:0;padding:0;font-size:90%;line-height:1.5em} body&gt;section,body&gt;aside,body&gt;footer,body&gt;.content{font-size:0.9em;line-height:1.8em} body&gt;section,body&gt;aside,body&gt;.content,body&gt;footer,#comments{margin:1em 7.14286% 0 28.57143%;font-size:0.9em;line-height:1.8em;*zoom:1} body&gt;section,body&gt;aside,body&gt;.content,body&gt;footer,#comments{margin:1em 21.42857% 0 21.42857%;font-size:0.9em;line-height:1.8em;*zoom:1} 2.10 修改网站标题 在 layouts\partials\header.html &lt;title&gt; {{ .Title }} - spf13.com &lt;/title&gt; 将网站标题spf13.com修改为imkind.github.io &lt;title&gt; {{ .Title }} - imkind.github.io &lt;/title&gt; 2.11 修改og标签摘自知乎：og是一种新的HTTP头部标记，即Open Graph Protocol，用了Meta Property=og标签，就是你同意了网页内容可以被其他社会化网站引用等 在 layouts\partials\meta.html 将大神spf13相关的信息修改为自己的，或者注释掉这一部分 &lt;!-- open graph --&gt; &lt;meta property=&quot;og:type&quot; content=&quot;article&quot;/&gt; &lt;meta property=&quot;og:description&quot; content=&quot;{{ .Description }}&quot;/&gt; &lt;meta property=&quot;og:title&quot; content=&quot;{{ .Title }} : spf13.com&quot;/&gt; &lt;meta property=&quot;og:site_name&quot; content=&quot;spf13 is Steve Francia&quot;/&gt; &lt;meta property=&quot;og:image&quot; content=&quot;&quot; /&gt; &lt;meta property=&quot;og:image:type&quot; content=&quot;image/jpeg&quot; /&gt; &lt;meta property=&quot;og:image:width&quot; content=&quot;&quot; /&gt; &lt;meta property=&quot;og:image:height&quot; content=&quot;&quot; /&gt; &lt;meta property=&quot;og:url&quot; content=&quot;{{ .Permalink }}&quot;&gt; &lt;meta property=&quot;og:locale&quot; content=&quot;en_US&quot;&gt; &lt;meta property=&quot;article:published_time&quot; content=&quot;{{ .Date.Format "2006-01-02" }}&quot;/&gt; &lt;meta property=&quot;article:modified_time&quot; content=&quot;{{ .Date.Format "2006-01-02" }}&quot;/&gt; &lt;!--Twitter Cards--&gt; &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt; &lt;!--&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;--&gt; &lt;meta name=&quot;twitter:site&quot; content=&quot;@spf13&quot;&gt; &lt;meta name=&quot;twitter:title&quot; content=&quot;{{ .Title }} : spf13.com&quot;&gt; &lt;meta name=&quot;twitter:creator&quot; content=&quot;@spf13&quot;&gt; &lt;meta name=&quot;twitter:description&quot; content=&quot;{{ .Description }}&quot;&gt; &lt;meta name=&quot;twitter:image:src&quot; content=&quot;&quot;&gt; &lt;meta name=&quot;twitter:domain&quot; content=&quot;spf13.com&quot;&gt; 2.12 多说评论系统spf13.com默认使用了Disqus评论系统，我去注册并在博客配置之后，无法显示评论区，而且在打开博文时因为连接Disqus服务器严重拖慢速度，于是更换了国产的多说评论系统，相对于内置了Disqus，多说评论系统的植入稍微复杂一点。 2.12.1 注册多说评论系统打开多说首页，点击“登录”，使用SNS账号登录，我选择了微博。 2.12.2 创建站点登录之后就跳转到站点配置的页面 2.12.3 获取植入代码工具——&gt;获取代码——&gt;稳定版 2.12.4 植入多说代码在 layouts\partials\disqus.html &lt;aside id=comments&gt; &lt;div&gt;&lt;h2&gt; Comments &lt;/h2&gt;&lt;/div&gt; {{ template "_internal/disqus.html" . }} &lt;/aside&gt; 修改为 &lt;aside id=comments&gt; &lt;div&gt;&lt;h2&gt; Comments &lt;/h2&gt;&lt;/div&gt; &lt;!-- {{ template "_internal/disqus.html" . }} --&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;{{ .URL }}&quot; data-title=&quot;{{ .Title }}&quot; data-url=&quot;{{ .Permalink }}&quot;&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=&quot;text/javascript&quot;&gt; var duoshuoQuery = {short_name:&quot;imkind&quot;}; (function() { var ds = document.createElement(&apos;script&apos;); ds.type = &apos;text/javascript&apos;;ds.async = true; ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;; ds.charset = &apos;UTF-8&apos;; (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds); })(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt; &lt;/aside&gt; 2.12.5 设置duoshuoShortname在 config.toml disqusShortname = &quot;&quot; 修改为 duoshuoShortname = &quot;imkind&quot; 在浏览器中博文下方查看效果 2.13 代码高亮2.13.1 使用在线js(加载速度慢，不推荐使用)参考：nanshu.wang的教程Hugo静态网站生成器中文教程 在 layouts\partials\head_includes.html 添加 &lt;script src=&quot;https://yandex.st/highlightjs/8.0/highlight.min.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://yandex.st/highlightjs/8.0/styles/default.min.css&quot;&gt; &lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt; 在浏览器查看效果 2.13.2 使用本地配置highlight.js（推荐使用）参考：http://newoxygen.github.io 的教程 hugo快速建站 2.13.2.1 下载 highlight.js打开highlight.js首页，点击 Get version 9.8.0，勾选常用的编程语言，点击“Download”下载，解压 $ ls highlight/ CHANGES.md highlight.pack.js LICENSE README.md README.ru.md styles/ 2.13.2.2 植入highlight.js复制 highlight.pack.js 到 static\static\js 重命名 styles 为 highlight，并复制到 static\static\css 在layouts\partials\header.html 添加 &lt;!-- Highlight.js --&gt; &lt;script src=&quot;{{ .Site.BaseURL }}static/js/highlight.pack.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ .Site.BaseURL }}static/css/highlight/github.css&quot;&gt; &lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt; 可根据个人爱好调用 static\static\css\highlight 中的css样式。 2.14 植入百度统计注册百度统计，在“管理”中“新增网站” 拷贝“统计代码”至 layouts\partials\header.html 的&lt;/head&gt;标签前 &lt;script&gt;] var _hmt = _hmt || []; (function() { var hm = document.createElement(&quot;script&quot;); hm.src = &quot;https://hm.baidu.com/hm.js?3d1fd52b11dc0bde2abdc4760452f3dc&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s); })(); &lt;/script&gt; 2.15 植入Google Analytics(分析)注册Google Analytics (分析)，在“管理”——“媒体资源”中“创建新媒体资源” 拷贝“跟踪代码”至 layouts\partials\header.html 的&lt;/head&gt;标签前 &lt;script&gt; (function(i,s,o,g,r,a,m){i[&apos;GoogleAnalyticsObject&apos;]=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,&apos;script&apos;,&apos;https://www.google-analytics.com/analytics.js&apos;,&apos;ga&apos;); ga(&apos;create&apos;, &apos;UA-86857821-1&apos;, &apos;auto&apos;); ga(&apos;send&apos;, &apos;pageview&apos;); &lt;/script&gt; 3. 部署hugo到Github pages个人主页Github pages有两种类型，个人主页（User site）和项目主页（Project site）。个人主页一个账号只能有一个，必须以[your-github-account].github.io命名来创建repository。 3.1 在Github新建[your-hugo-project-name]仓库，用于托管hugo静态博客系统源代码https://github.com/imkind/IMkind_blog_hugo 3.2 在Github新建[your-github-account].github.io仓库，用于存放hugo生成得静态博客站点文件https://github.com/imkind/imkind.github.io 3.3 创建本地的git仓库$ git init 3.4 添加远程库，把本地git仓库同远程库关联起来$ git remote add origin git@github.com:[your-github-account]/[your-hugo-project-name].git 即 $ git remote add origin git@github.com:imkind/IMkind_blog_hugo.git 3.5 查看项目下是否有生成了静态页面的public目录，如果有删除掉（只要执行hugo即可重新生成），因为下一步配置子项目时，会再创建一个public目录$ rm -rf public/ 3.6 把[your-github-account].github.io设置为[your-hugo-project-name]的子项目，命令会clone远程仓库[your-github-account].github.io到本地并重命名为public$ git submodule add git@github.com:[your-github-account]/[your-github-account].github.io.git public 即 $ git submodule add git@github.com:imkind/imkind.github.io.git public Cloning into &apos;D:/HelloWorld/hugo/IMkind_blog_hugo/public&apos;... warning: You appear to have cloned an empty repository. fatal: You are on a branch yet to be born Unable to checkout submodule &apos;public&apos; 3.7 把pulic目录写入.gitignore文件，在之后提交hugo项目源代码时就会忽略public目录$ echo &quot;/public&quot; &gt; .gitignore 3.8 把submodule配置写入.gitmodules文件。如ls -A看不到该文件，可自行创建并添加内容。$ vim .gitmodules [submodule &quot;public&quot;] path = public url = git@github.com:imkind/imkind.github.io.git 3.9 初次提交至github远程仓库,使用了-u参数,之后改动代码提交到github，只需git push origin master$ git add -A $ git commit -m &quot;first commit&quot; $ git push -u origin master Counting objects: 379, done. Delta compression using up to 4 threads. Compressing objects: 100% (368/368), done. Writing objects: 100% (379/379), 1.15 MiB | 0 bytes/s, done. Total 379 (delta 157), reused 0 (delta 0) remote: Resolving deltas: 100% (157/157), done. To github.com:imkind/IMkind_blog_hugo.git * [new branch] master -&gt; master Branch master set up to track remote branch master from origin. 3.10 生成静态站点到public目录下$ hugo 3.11 初次提交pubic目录下的静态站点内容到远程仓库$ cd public $ git add -A $ git commit -m &quot;first post&quot; $ git push -u origin master Counting objects: 219, done. Delta compression using up to 4 threads. Compressing objects: 100% (210/210), done. Writing objects: 100% (219/219), 1.16 MiB | 51.00 KiB/s, done. Total 219 (delta 71), reused 0 (delta 0) remote: Resolving deltas: 100% (71/71), done. To https://github.com/imkind/imkind.github.io.git * [new branch] master -&gt; master Branch master set up to track remote branch master from origin. 4. 部署成功，在浏览器访问 https://[your-github-account].github.io 就看到自己的博客了。 参考 Steve Francia Hugo中文文档 使用hugo搭建个人博客站点 Hugo静态网站生成器中文教程 利用 Hugo &amp; GitHub 搭建个人博客静态网站]]></content>
      <categories>
        <category>趣玩尝新</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>imkind</tag>
        <tag>hugo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
